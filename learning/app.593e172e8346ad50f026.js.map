{"version":3,"file":"app.593e172e8346ad50f026.js","mappings":"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","sources":["webpack://@edx/frontend-app-learning/./src/course-home/data/api.js","webpack://@edx/frontend-app-learning/./src/course-home/data/slice.js","webpack://@edx/frontend-app-learning/./src/course-home/data/thunks.js","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/certificate-status/messages.js","webpack://@edx/frontend-app-learning/./src/data/localStorage.js","webpack://@edx/frontend-app-learning/./src/generic/messages.js","webpack://@edx/frontend-app-learning/./src/generic/model-store/slice.js","webpack://@edx/frontend-app-learning/./src/generic/model-store/hooks.js","webpack://@edx/frontend-app-learning/./src/generic/user-messages/UserMessagesContext.js","webpack://@edx/frontend-app-learning/./src/generic/user-messages/AlertList.jsx","webpack://@edx/frontend-app-learning/./src/generic/user-messages/hooks.js","webpack://@edx/frontend-app-learning/./src/utils.js","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/alerts/certificate-status-alert/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/alerts/certificate-status-alert/CertificateStatusAlert.jsx","webpack://@edx/frontend-app-learning/./src/generic/user-messages/Alert.jsx","webpack://@edx/frontend-app-learning/./src/generic/user-messages/UserMessagesProvider.jsx","webpack://@edx/frontend-app-learning/./src/generic/hooks.js","webpack://@edx/frontend-app-learning/./src/course-home/discussion-tab/DiscussionTab.jsx","webpack://@edx/frontend-app-learning/./src/i18n/index.js","webpack://@edx/frontend-app-learning/./src/course-home/dates-tab/utils.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/DateSummary.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/CourseDates.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/LmsHtmlFragment.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/CourseHandouts.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/StartOrResumeCourseCard.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/flag_black.svg","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/flag_outline.svg","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/flag_gray.svg","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/FlagButton.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/LearningGoalButton.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/FlagButton.scss?e631","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/WeeklyLearningGoalCard.jsx","webpack://@edx/frontend-app-learning/./src/product-tours/data/slice.js","webpack://@edx/frontend-app-learning/./src/product-tours/messages.js","webpack://@edx/frontend-app-learning/./src/product-tours/newUserCourseHomeTour/LaunchCourseHomeTourButton.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/CourseTools.jsx","webpack://@edx/frontend-app-learning/./src/shared/effort-estimate/messages.js","webpack://@edx/frontend-app-learning/./src/shared/effort-estimate/EffortEstimate.jsx","webpack://@edx/frontend-app-learning/./src/shared/effort-estimate/index.js","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/SequenceLink.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/Section.jsx","webpack://@edx/frontend-app-learning/./src/course-home/suggested-schedule-messaging/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/suggested-schedule-messaging/ShiftDatesAlert.jsx","webpack://@edx/frontend-app-learning/./src/generic/upgrade-button/messages.js","webpack://@edx/frontend-app-learning/./src/generic/upgrade-button/FormattedPricing.jsx","webpack://@edx/frontend-app-learning/./src/generic/upgrade-button/UpgradeButton.jsx","webpack://@edx/frontend-app-learning/./src/generic/upgrade-button/UpgradeNowButton.jsx","webpack://@edx/frontend-app-learning/./src/generic/upsell-bullets/UpsellBullets.jsx","webpack://@edx/frontend-app-learning/./src/generic/upgrade-notification/UpgradeNotification.jsx","webpack://@edx/frontend-app-learning/./src/course-home/suggested-schedule-messaging/UpgradeToShiftDatesAlert.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/alerts/certificate-status-alert/hooks.js","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/alerts/course-end-alert/hooks.js","webpack://@edx/frontend-app-learning/./src/alerts/course-start-alert/hooks.js","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/alerts/private-course-alert/hooks.js","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/alerts/scheduled-content-alert/hooks.js","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/WelcomeMessage.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/widgets/ProctoringInfoPanel.jsx","webpack://@edx/frontend-app-learning/./src/courseware/data/api.js","webpack://@edx/frontend-app-learning/./src/courseware/data/slice.js","webpack://@edx/frontend-app-learning/./src/courseware/data/thunks.js","webpack://@edx/frontend-app-learning/./src/courseware/data/selectors.js","webpack://@edx/frontend-app-learning/./src/alerts/logistration-alert/messages.js","webpack://@edx/frontend-app-learning/./src/alerts/logistration-alert/AccountActivationAlert.jsx","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/OutlineTab.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/assets/celebration_456x328.gif","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/assets/celebration_750x540.gif","webpack://@edx/frontend-app-learning/./src/generic/assets/edX_certificate.png","webpack://@edx/frontend-app-learning/./src/generic/assets/edX_locked_certificate.png","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/ProgramCompletion.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/Footnote.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/utils.js","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/DashboardFootnote.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/UpgradeFootnote.jsx","webpack://@edx/frontend-app-learning/./src/courseware/social-share/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/social-share/SocialIcons.jsx","webpack://@edx/frontend-app-learning/./src/shared/links.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/data/slice.js","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/CatalogSuggestion.jsx","webpack://@edx/frontend-app-learning/./src/generic/PageLoading.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/CourseRecommendations.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/data/thunks.js","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/data/api.js","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/CourseCelebration.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/CourseInProgress.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/CourseNonPassing.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/course-exit/CourseExit.jsx","webpack://@edx/frontend-app-learning/./src/tab-page/messages.js","webpack://@edx/frontend-app-learning/./src/course-tabs/messages.js","webpack://@edx/frontend-app-learning/./src/generic/tabs/useIndexOfLastVisibleChild.js","webpack://@edx/frontend-app-learning/./src/generic/tabs/Tabs.jsx","webpack://@edx/frontend-app-learning/./src/course-tabs/CourseTabsNavigation.jsx","webpack://@edx/frontend-app-learning/./src/shared/streak-celebration/assets/Streak_mobile.png","webpack://@edx/frontend-app-learning/./src/shared/streak-celebration/assets/Streak_desktop.png","webpack://@edx/frontend-app-learning/./src/shared/streak-celebration/messages.js","webpack://@edx/frontend-app-learning/./src/shared/streak-celebration/StreakCelebrationModal.jsx","webpack://@edx/frontend-app-learning/./src/shared/streak-celebration/utils.jsx","webpack://@edx/frontend-app-learning/./src/instructor-toolbar/masquerade-widget/messages.js","webpack://@edx/frontend-app-learning/./src/instructor-toolbar/masquerade-widget/MasqueradeUserNameInput.jsx","webpack://@edx/frontend-app-learning/./src/instructor-toolbar/masquerade-widget/MasqueradeWidgetOption.jsx","webpack://@edx/frontend-app-learning/./src/instructor-toolbar/masquerade-widget/MasqueradeWidget.jsx","webpack://@edx/frontend-app-learning/./src/instructor-toolbar/masquerade-widget/data/api.js","webpack://@edx/frontend-app-learning/./src/instructor-toolbar/masquerade-widget/index.js","webpack://@edx/frontend-app-learning/./src/alerts/access-expiration-alert/hooks.js","webpack://@edx/frontend-app-learning/./src/instructor-toolbar/InstructorToolbar.jsx","webpack://@edx/frontend-app-learning/./src/alerts/enrollment-alert/hooks.js","webpack://@edx/frontend-app-learning/./src/alerts/logistration-alert/hooks.js","webpack://@edx/frontend-app-learning/./src/product-tours/GenericTourFormattedMessages.jsx","webpack://@edx/frontend-app-learning/./src/product-tours/AbandonTour.jsx","webpack://@edx/frontend-app-learning/./src/product-tours/CoursewareTour.jsx","webpack://@edx/frontend-app-learning/./src/product-tours/ExistingUserCourseHomeTour.jsx","webpack://@edx/frontend-app-learning/./src/product-tours/newUserCourseHomeTour/NewUserCourseHomeTour.jsx","webpack://@edx/frontend-app-learning/./src/product-tours/newUserCourseHomeTour/course_home_tour_modal_hero.png","webpack://@edx/frontend-app-learning/./src/product-tours/newUserCourseHomeTour/NewUserCourseHomeTourModal.jsx","webpack://@edx/frontend-app-learning/./src/product-tours/data/api.js","webpack://@edx/frontend-app-learning/./src/product-tours/data/thunks.js","webpack://@edx/frontend-app-learning/./src/product-tours/ProductTours.jsx","webpack://@edx/frontend-app-learning/./src/tab-page/LoadedTabPage.jsx","webpack://@edx/frontend-app-learning/./src/tab-page/TabPage.jsx","webpack://@edx/frontend-app-learning/./src/shared/access.js","webpack://@edx/frontend-app-learning/./src/tab-page/TabContainer.jsx","webpack://@edx/frontend-app-learning/./src/alerts/sequence-alerts/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/course-license/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/course-license/CourseLicense.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/SidebarContext.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/common/SidebarBase.jsx","webpack://@edx/frontend-app-learning/./src/data/sessionStorage.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/common/TriggerBase.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/sidebars/notifications/NotificationIcon.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/sidebars/notifications/NotificationTrigger.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/sidebars/notifications/NotificationTray.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/sidebars/discussions/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/sidebars/discussions/DiscussionsTrigger.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/sidebars/discussions/DiscussionsSidebar.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/sidebars/index.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/Sidebar.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/SidebarTriggers.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/hidden-after-due/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/hidden-after-due/HiddenAfterDue.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/sequence-navigation/UnitIcon.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/sequence-navigation/CompleteIcon.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/bookmark/BookmarkFilledIcon.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/sequence-navigation/UnitButton.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/sequence-navigation/SequenceNavigationDropdown.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/sequence-navigation/SequenceNavigationTabs.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/sequence-navigation/hooks.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/sequence-navigation/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/sequence-navigation/SequenceNavigation.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/sequence-navigation/UnitNavigationEffortEstimate.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/sequence-navigation/UnitNavigation.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/bookmark/BookmarkOutlineIcon.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/bookmark/data/api.js","webpack://@edx/frontend-app-learning/./src/courseware/course/bookmark/BookmarkButton.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/bookmark/data/thunks.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/Unit/hooks/useExamAccess.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/Unit/constants.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/Unit/hooks/useLoadBearingHook.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/Unit/hooks/useIFrameBehavior.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/Unit/hooks/useModalIFrameData.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/Unit/hooks/useShouldDisplayHonorCode.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/Unit/ContentIFrame.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/honor-code/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/honor-code/HonorCode.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/lock-paywall/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/lock-paywall/LockPaywall.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/Unit/UnitSuspense.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/Unit/urls.js","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/Unit/index.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/SequenceContent.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sequence/Sequence.jsx","webpack://@edx/frontend-app-learning/./src/alerts/sequence-alerts/hooks.js","webpack://@edx/frontend-app-learning/./src/courseware/course/celebration/assets/claps_280x201.gif","webpack://@edx/frontend-app-learning/./src/courseware/course/celebration/assets/claps_456x328.gif","webpack://@edx/frontend-app-learning/./src/courseware/course/celebration/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/celebration/data/api.js","webpack://@edx/frontend-app-learning/./src/courseware/course/celebration/utils.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/celebration/CelebrationModal.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/celebration/assets/target.svg","webpack://@edx/frontend-app-learning/./src/courseware/course/celebration/WeeklyGoalCelebrationModal.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/chat/Chat.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/content-tools/calculator/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/content-tools/calculator/Calculator.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/content-tools/calculator/index.js","webpack://@edx/frontend-app-learning/./src/courseware/course/content-tools/notes-visibility/messages.js","webpack://@edx/frontend-app-learning/./src/courseware/course/content-tools/notes-visibility/NotesVisibility.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/content-tools/notes-visibility/index.js","webpack://@edx/frontend-app-learning/./src/courseware/course/content-tools/ContentTools.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/content-tools/index.js","webpack://@edx/frontend-app-learning/./src/courseware/course/JumpNavMenuItem.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/CourseBreadcrumbs.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/sidebar/SidebarContextProvider.jsx","webpack://@edx/frontend-app-learning/./src/courseware/course/Course.jsx","webpack://@edx/frontend-app-learning/./src/courseware/CoursewareContainer.jsx","webpack://@edx/frontend-app-learning/./src/courseware/utils.jsx","webpack://@edx/frontend-app-learning/./src/constants.js","webpack://@edx/frontend-app-learning/./src/decode-page-route/index.jsx","webpack://@edx/frontend-app-learning/./src/courseware/RedirectPage.jsx","webpack://@edx/frontend-app-learning/./src/courseware/CoursewareRedirectLandingPage.jsx","webpack://@edx/frontend-app-learning/./src/course-home/dates-tab/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/dates-tab/timeline/badgelist.jsx","webpack://@edx/frontend-app-learning/./src/course-home/dates-tab/timeline/Day.jsx","webpack://@edx/frontend-app-learning/./src/course-home/dates-tab/timeline/Timeline.jsx","webpack://@edx/frontend-app-learning/./src/course-home/suggested-schedule-messaging/SuggestedScheduleHeader.jsx","webpack://@edx/frontend-app-learning/./src/course-home/suggested-schedule-messaging/UpgradeToCompleteAlert.jsx","webpack://@edx/frontend-app-learning/./src/course-home/dates-tab/DatesTab.jsx","webpack://@edx/frontend-app-learning/./src/course-home/dates-tab/index.jsx","webpack://@edx/frontend-app-learning/./src/course-home/goal-unsubscribe/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/goal-unsubscribe/unsubscribe.svg","webpack://@edx/frontend-app-learning/./src/course-home/goal-unsubscribe/ResultPage.jsx","webpack://@edx/frontend-app-learning/./src/course-home/goal-unsubscribe/GoalUnsubscribe.jsx","webpack://@edx/frontend-app-learning/./src/course-home/goal-unsubscribe/index.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/certificate-status/CertificateStatus.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/course-completion/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/course-completion/CompleteDonutSegment.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/course-completion/IncompleteDonutSegment.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/course-completion/LockedDonutSegment.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/course-completion/CompletionDonutChart.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/course-completion/CourseCompletion.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/course-grade/GradeRangeTooltip.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/course-grade/CourseGradeFooter.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/course-grade/CourseGradeHeader.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/course-grade/CurrentGradeTooltip.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/course-grade/PassingGradeTooltip.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/course-grade/GradeBar.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/credit-information/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/credit-information/CreditInformation.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/course-grade/CourseGrade.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/detailed-grades/ProblemScoreDrawer.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/detailed-grades/SubsectionTitleCell.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/detailed-grades/DetailedGradesTable.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/detailed-grades/DetailedGrades.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/grade-summary/GradeSummaryHeader.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/grade-summary/AssignmentTypeCell.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/grade-summary/DroppableAssignmentFootnote.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/grade-summary/GradeSummaryTableFooter.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/grade-summary/GradeSummaryTable.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/grades/grade-summary/GradeSummary.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/ProgressHeader.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/related-links/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/related-links/RelatedLinks.jsx","webpack://@edx/frontend-app-learning/./src/course-home/progress-tab/ProgressTab.jsx","webpack://@edx/frontend-app-learning/./src/generic/notices/NoticesProvider.jsx","webpack://@edx/frontend-app-learning/./src/generic/notices/api.js","webpack://@edx/frontend-app-learning/./src/generic/path-fixes/PathFixesProvider.jsx","webpack://@edx/frontend-app-learning/./src/course-home/live-tab/LiveTab.jsx","webpack://@edx/frontend-app-learning/./src/alerts/active-enteprise-alert/hooks.js","webpack://@edx/frontend-app-learning/./src/generic/CourseAccessErrorPage.jsx","webpack://@edx/frontend-app-learning/./src/index.jsx","webpack://@edx/frontend-app-learning/./src/store.js"],"sourcesContent":["import { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { logInfo } from '@edx/frontend-platform/logging';\nimport { appendBrowserTimezoneToUrl } from '../../utils';\n\nconst calculateAssignmentTypeGrades = (points, assignmentWeight, numDroppable) => {\n  let dropCount = numDroppable;\n  // Drop the lowest grades\n  while (dropCount && points.length >= dropCount) {\n    const lowestScore = Math.min(...points);\n    const lowestScoreIndex = points.indexOf(lowestScore);\n    points.splice(lowestScoreIndex, 1);\n    dropCount--;\n  }\n  let averageGrade = 0;\n  let weightedGrade = 0;\n  if (points.length) {\n    // Calculate the average grade for the assignment and round it. This rounding is not ideal and does not accurately\n    // reflect what a learner's grade would be, however, we must have parity with the current grading behavior that\n    // exists in edx-platform.\n    averageGrade = (points.reduce((a, b) => a + b, 0) / points.length).toFixed(2);\n    weightedGrade = averageGrade * assignmentWeight;\n  }\n  return { averageGrade, weightedGrade };\n};\n\nfunction normalizeAssignmentPolicies(assignmentPolicies, sectionScores) {\n  const gradeByAssignmentType = {};\n  assignmentPolicies.forEach(assignment => {\n    // Create an array with the number of total assignments and set the scores to 0\n    // as placeholders for assignments that have not yet been released\n    gradeByAssignmentType[assignment.type] = {\n      grades: Array(assignment.numTotal).fill(0),\n      numAssignmentsCreated: 0,\n      numTotalExpectedAssignments: assignment.numTotal,\n    };\n  });\n\n  sectionScores.forEach((chapter) => {\n    chapter.subsections.forEach((subsection) => {\n      if (!(subsection.hasGradedAssignment && subsection.showGrades && subsection.numPointsPossible)) {\n        return;\n      }\n      const {\n        assignmentType,\n        numPointsEarned,\n        numPointsPossible,\n      } = subsection;\n\n      // If a subsection's assignment type does not match an assignment policy in Studio,\n      // we won't be able to include it in this accumulation of grades by assignment type.\n      // This may happen if a course author has removed/renamed an assignment policy in Studio and\n      // neglected to update the subsection's of that assignment type\n      if (!gradeByAssignmentType[assignmentType]) {\n        return;\n      }\n\n      let {\n        numAssignmentsCreated,\n      } = gradeByAssignmentType[assignmentType];\n\n      numAssignmentsCreated++;\n      if (numAssignmentsCreated <= gradeByAssignmentType[assignmentType].numTotalExpectedAssignments) {\n        // Remove a placeholder grade so long as the number of recorded created assignments is less than the number\n        // of expected assignments\n        gradeByAssignmentType[assignmentType].grades.shift();\n      }\n      // Add the graded assignment to the list\n      gradeByAssignmentType[assignmentType].grades.push(numPointsEarned ? numPointsEarned / numPointsPossible : 0);\n      // Record the created assignment\n      gradeByAssignmentType[assignmentType].numAssignmentsCreated = numAssignmentsCreated;\n    });\n  });\n\n  return assignmentPolicies.map((assignment) => {\n    const { averageGrade, weightedGrade } = calculateAssignmentTypeGrades(\n      gradeByAssignmentType[assignment.type].grades,\n      assignment.weight,\n      assignment.numDroppable,\n    );\n\n    return {\n      averageGrade,\n      numDroppable: assignment.numDroppable,\n      shortLabel: assignment.shortLabel,\n      type: assignment.type,\n      weight: assignment.weight,\n      weightedGrade,\n    };\n  });\n}\n\n/**\n * Tweak the metadata for consistency\n * @param metadata the data to normalize\n * @param rootSlug either 'courseware' or 'outline' depending on the context\n * @returns {Object} The normalized metadata\n */\nfunction normalizeCourseHomeCourseMetadata(metadata, rootSlug) {\n  const data = camelCaseObject(metadata);\n  return {\n    ...data,\n    tabs: data.tabs.map(tab => ({\n      // The API uses \"courseware\" as a slug for both courseware and the outline tab.\n      // If needed, we switch it to \"outline\" here for\n      // use within the MFE to differentiate between course home and courseware.\n      slug: tab.tabId === 'courseware' ? rootSlug : tab.tabId,\n      title: tab.title,\n      url: tab.url,\n    })),\n    isMasquerading: data.originalUserIsStaff && !data.isStaff,\n  };\n}\n\nexport function normalizeOutlineBlocks(courseId, blocks) {\n  const models = {\n    courses: {},\n    sections: {},\n    sequences: {},\n  };\n  Object.values(blocks).forEach(block => {\n    switch (block.type) {\n      case 'course':\n        models.courses[block.id] = {\n          id: courseId,\n          title: block.display_name,\n          sectionIds: block.children || [],\n          hasScheduledContent: block.has_scheduled_content,\n        };\n        break;\n\n      case 'chapter':\n        models.sections[block.id] = {\n          complete: block.complete,\n          id: block.id,\n          title: block.display_name,\n          resumeBlock: block.resume_block,\n          sequenceIds: block.children || [],\n        };\n        break;\n\n      case 'sequential':\n        models.sequences[block.id] = {\n          complete: block.complete,\n          description: block.description,\n          due: block.due,\n          effortActivities: block.effort_activities,\n          effortTime: block.effort_time,\n          icon: block.icon,\n          id: block.id,\n          // The presence of a URL for the sequence indicates that we want this sequence to be a clickable\n          // link in the outline (even though we ignore the given url and use an internal <Link> to ourselves).\n          showLink: !!block.lms_web_url,\n          title: block.display_name,\n        };\n        break;\n\n      default:\n        logInfo(`Unexpected course block type: ${block.type} with ID ${block.id}.  Expected block types are course, chapter, and sequential.`);\n    }\n  });\n\n  // Next go through each list and use their child lists to decorate those children with a\n  // reference back to their parent.\n  Object.values(models.courses).forEach(course => {\n    if (Array.isArray(course.sectionIds)) {\n      course.sectionIds.forEach(sectionId => {\n        const section = models.sections[sectionId];\n        section.courseId = course.id;\n      });\n    }\n  });\n\n  Object.values(models.sections).forEach(section => {\n    if (Array.isArray(section.sequenceIds)) {\n      section.sequenceIds.forEach(sequenceId => {\n        if (sequenceId in models.sequences) {\n          models.sequences[sequenceId].sectionId = section.id;\n        } else {\n          logInfo(`Section ${section.id} has child block ${sequenceId}, but that block is not in the list of sequences.`);\n        }\n      });\n    }\n  });\n\n  return models;\n}\n\nexport async function getCourseHomeCourseMetadata(courseId, rootSlug) {\n  let url = `${getConfig().LMS_BASE_URL}/api/course_home/course_metadata/${courseId}`;\n  url = appendBrowserTimezoneToUrl(url);\n  const { data } = await getAuthenticatedHttpClient().get(url);\n  return normalizeCourseHomeCourseMetadata(data, rootSlug);\n}\n\n// For debugging purposes, you might like to see a fully loaded dates tab.\n// Just uncomment the next few lines and the immediate 'return' in the function below\n// import { Factory } from 'rosie';\n// import './__factories__';\nexport async function getDatesTabData(courseId) {\n  // return camelCaseObject(Factory.build('datesTabData'));\n  const url = `${getConfig().LMS_BASE_URL}/api/course_home/dates/${courseId}`;\n  try {\n    const { data } = await getAuthenticatedHttpClient().get(url);\n    return camelCaseObject(data);\n  } catch (error) {\n    const httpErrorStatus = error?.response?.status;\n    if (httpErrorStatus === 401) {\n      // The backend sends this for unenrolled and unauthenticated learners, but we handle those cases by examining\n      // courseAccess in the metadata call, so just ignore this status for now.\n      return {};\n    }\n    if (httpErrorStatus === 403) {\n      // The backend sends this if there is a course access error and the user should be redirected. The redirect\n      // info is included in the course metadata request and will be handled there as long as this call returns\n      // without an error\n      return {};\n    }\n    throw error;\n  }\n}\n\nexport async function getProgressTabData(courseId, targetUserId) {\n  let url = `${getConfig().LMS_BASE_URL}/api/course_home/progress/${courseId}`;\n\n  // If targetUserId is passed in, we will get the progress page data\n  // for the user with the provided id, rather than the requesting user.\n  if (targetUserId) {\n    url += `/${targetUserId}/`;\n  }\n\n  try {\n    const { data } = await getAuthenticatedHttpClient().get(url);\n    const camelCasedData = camelCaseObject(data);\n\n    camelCasedData.gradingPolicy.assignmentPolicies = normalizeAssignmentPolicies(\n      camelCasedData.gradingPolicy.assignmentPolicies,\n      camelCasedData.sectionScores,\n    );\n\n    // We replace gradingPolicy.gradeRange with the original data to preserve the intended casing for the grade.\n    // For example, if a grade range key is \"A\", we do not want it to be camel cased (i.e. \"A\" would become \"a\")\n    // in order to preserve a course team's desired grade formatting.\n    camelCasedData.gradingPolicy.gradeRange = data.grading_policy.grade_range;\n\n    camelCasedData.gradesFeatureIsFullyLocked = camelCasedData.completionSummary.lockedCount > 0;\n\n    camelCasedData.gradesFeatureIsPartiallyLocked = false;\n    if (camelCasedData.gradesFeatureIsFullyLocked) {\n      camelCasedData.sectionScores.forEach((chapter) => {\n        chapter.subsections.forEach((subsection) => {\n          // If something is eligible to be gated by content type gating and would show up on the progress page\n          if (subsection.assignmentType !== null && subsection.hasGradedAssignment && subsection.showGrades\n            && (subsection.numPointsPossible > 0 || subsection.numPointsEarned > 0)) {\n            // but the learner still has access to it, then we are in a partially locked, rather than fully locked state\n            // since the learner has access to some (but not all) content that would normally be locked\n            if (subsection.learnerHasAccess) {\n              camelCasedData.gradesFeatureIsPartiallyLocked = true;\n              camelCasedData.gradesFeatureIsFullyLocked = false;\n            }\n          }\n        });\n      });\n    }\n\n    return camelCasedData;\n  } catch (error) {\n    const httpErrorStatus = error?.response?.status;\n    if (httpErrorStatus === 404) {\n      global.location.replace(`${getConfig().LMS_BASE_URL}/courses/${courseId}/progress`);\n      return {};\n    }\n    if (httpErrorStatus === 401) {\n      // The backend sends this for unenrolled and unauthenticated learners, but we handle those cases by examining\n      // courseAccess in the metadata call, so just ignore this status for now.\n      return {};\n    }\n    if (httpErrorStatus === 403) {\n      // The backend sends this if there is a course access error and the user should be redirected. The redirect\n      // info is included in the course metadata request and will be handled there as long as this call returns\n      // without an error\n      return {};\n    }\n    throw error;\n  }\n}\n\nexport async function getProctoringInfoData(courseId, username) {\n  let url = `${getConfig().LMS_BASE_URL}/api/edx_proctoring/v1/user_onboarding/status?is_learning_mfe=true&course_id=${encodeURIComponent(courseId)}`;\n  if (username) {\n    url += `&username=${encodeURIComponent(username)}`;\n  }\n  try {\n    const { data } = await getAuthenticatedHttpClient().get(url);\n    return data;\n  } catch (error) {\n    const { httpErrorStatus } = error && error.customAttributes;\n    if (httpErrorStatus === 404) {\n      return {};\n    }\n    throw error;\n  }\n}\n\nexport async function getLiveTabIframe(courseId) {\n  const url = `${getConfig().LMS_BASE_URL}/api/course_live/iframe/${courseId}/`;\n  try {\n    const { data } = await getAuthenticatedHttpClient().get(url);\n    return data;\n  } catch (error) {\n    const { httpErrorStatus } = error && error.customAttributes;\n    if (httpErrorStatus === 404) {\n      return {};\n    }\n    throw error;\n  }\n}\n\nexport function getTimeOffsetMillis(headerDate, requestTime, responseTime) {\n  // Time offset computation should move down into the HttpClient wrapper to maintain a global time correction reference\n  // Requires 'Access-Control-Expose-Headers: Date' on the server response per https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#access-control-expose-headers\n\n  let timeOffsetMillis = 0;\n  if (headerDate !== undefined) {\n    const headerTime = Date.parse(headerDate);\n    const roundTripMillis = requestTime - responseTime;\n    const localTime = responseTime - (roundTripMillis / 2); // Roughly compensate for transit time\n    timeOffsetMillis = headerTime - localTime;\n  }\n\n  return timeOffsetMillis;\n}\n\nexport async function getOutlineTabData(courseId) {\n  const url = `${getConfig().LMS_BASE_URL}/api/course_home/outline/${courseId}`;\n  const requestTime = Date.now();\n  let tabData;\n  try {\n    tabData = await getAuthenticatedHttpClient().get(url);\n  } catch (error) {\n    const httpErrorStatus = error?.response?.status;\n    if (httpErrorStatus === 403) {\n      // The backend sends this if there is a course access error and the user should be redirected. The redirect\n      // info is included in the course metadata request and will be handled there as long as this call returns\n      // without an error\n      return {};\n    }\n    throw error;\n  }\n\n  const responseTime = Date.now();\n\n  const {\n    data,\n    headers,\n  } = tabData;\n\n  const accessExpiration = camelCaseObject(data.access_expiration);\n  const canShowUpgradeSock = data.can_show_upgrade_sock;\n  const certData = camelCaseObject(data.cert_data);\n  const courseBlocks = data.course_blocks ? normalizeOutlineBlocks(courseId, data.course_blocks.blocks) : {};\n  const courseGoals = camelCaseObject(data.course_goals);\n  const courseTools = camelCaseObject(data.course_tools);\n  const datesBannerInfo = camelCaseObject(data.dates_banner_info);\n  const datesWidget = camelCaseObject(data.dates_widget);\n  const enableProctoredExams = data.enable_proctored_exams;\n  const enrollAlert = camelCaseObject(data.enroll_alert);\n  const enrollmentMode = data.enrollment_mode;\n  const handoutsHtml = data.handouts_html;\n  const hasScheduledContent = data.has_scheduled_content;\n  const hasEnded = data.has_ended;\n  const offer = camelCaseObject(data.offer);\n  const resumeCourse = camelCaseObject(data.resume_course);\n  const timeOffsetMillis = getTimeOffsetMillis(headers && headers.date, requestTime, responseTime);\n  const userHasPassingGrade = data.user_has_passing_grade;\n  const verifiedMode = camelCaseObject(data.verified_mode);\n  const welcomeMessageHtml = data.welcome_message_html || '';\n\n  return {\n    accessExpiration,\n    canShowUpgradeSock,\n    certData,\n    courseBlocks,\n    courseGoals,\n    courseTools,\n    datesBannerInfo,\n    datesWidget,\n    enrollAlert,\n    enrollmentMode,\n    enableProctoredExams,\n    handoutsHtml,\n    hasScheduledContent,\n    hasEnded,\n    offer,\n    resumeCourse,\n    timeOffsetMillis, // This should move to a global time correction reference\n    userHasPassingGrade,\n    verifiedMode,\n    welcomeMessageHtml,\n  };\n}\n\nexport async function postCourseDeadlines(courseId, model) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_experience/v1/reset_course_deadlines`);\n  return getAuthenticatedHttpClient().post(url.href, {\n    course_key: courseId,\n    research_event_data: { location: `${model}-tab` },\n  });\n}\n\nexport async function deprecatedPostCourseGoals(courseId, goalKey) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_home/save_course_goal`);\n  return getAuthenticatedHttpClient().post(url.href, { course_id: courseId, goal_key: goalKey });\n}\n\nexport async function postWeeklyLearningGoal(courseId, daysPerWeek, subscribedToReminders) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_home/save_course_goal`);\n  return getAuthenticatedHttpClient().post(url.href, {\n    course_id: courseId,\n    days_per_week: daysPerWeek,\n    subscribed_to_reminders: subscribedToReminders,\n  });\n}\n\nexport async function postDismissWelcomeMessage(courseId) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_home/dismiss_welcome_message`);\n  await getAuthenticatedHttpClient().post(url.href, { course_id: courseId });\n}\n\nexport async function postRequestCert(courseId) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/courses/${courseId}/generate_user_cert`);\n  await getAuthenticatedHttpClient().post(url.href);\n}\n\nexport async function executePostFromPostEvent(postData, researchEventData) {\n  const url = new URL(postData.url);\n  return getAuthenticatedHttpClient().post(url.href, {\n    course_key: postData.bodyParams.courseId,\n    research_event_data: researchEventData,\n  });\n}\n\nexport async function unsubscribeFromCourseGoal(token) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_home/unsubscribe_from_course_goal/${token}`);\n  return getAuthenticatedHttpClient().post(url.href)\n    .then(res => camelCaseObject(res));\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nexport const LOADING = 'loading';\nexport const LOADED = 'loaded';\nexport const FAILED = 'failed';\nexport const DENIED = 'denied';\n\nconst slice = createSlice({\n  name: 'course-home',\n  initialState: {\n    courseStatus: 'loading',\n    courseId: null,\n    proctoringPanelStatus: 'loading',\n    toastBodyText: null,\n    toastBodyLink: null,\n    toastHeader: '',\n  },\n  reducers: {\n    fetchProctoringInfoResolved: (state) => {\n      state.proctoringPanelStatus = LOADED;\n    },\n    fetchTabDenied: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.courseStatus = DENIED;\n    },\n    fetchTabFailure: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.courseStatus = FAILED;\n    },\n    fetchTabRequest: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.courseStatus = LOADING;\n    },\n    fetchTabSuccess: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.targetUserId = payload.targetUserId;\n      state.courseStatus = LOADED;\n    },\n    setCallToActionToast: (state, { payload }) => {\n      const {\n        header,\n        link,\n        linkText,\n      } = payload;\n      state.toastBodyLink = link;\n      state.toastBodyText = linkText;\n      state.toastHeader = header;\n    },\n  },\n});\n\nexport const {\n  fetchProctoringInfoResolved,\n  fetchTabDenied,\n  fetchTabFailure,\n  fetchTabRequest,\n  fetchTabSuccess,\n  setCallToActionToast,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","import { logError } from '@edx/frontend-platform/logging';\nimport { camelCaseObject } from '@edx/frontend-platform';\nimport {\n  executePostFromPostEvent,\n  getCourseHomeCourseMetadata,\n  getDatesTabData,\n  getOutlineTabData,\n  getProgressTabData,\n  postCourseDeadlines,\n  deprecatedPostCourseGoals,\n  postWeeklyLearningGoal,\n  postDismissWelcomeMessage,\n  postRequestCert,\n  getLiveTabIframe,\n} from './api';\n\nimport {\n  addModel,\n} from '../../generic/model-store';\n\nimport {\n  fetchTabDenied,\n  fetchTabFailure,\n  fetchTabRequest,\n  fetchTabSuccess,\n  setCallToActionToast,\n} from './slice';\n\nconst eventTypes = {\n  POST_EVENT: 'post_event',\n};\n\nexport function fetchTab(courseId, tab, getTabData, targetUserId) {\n  return async (dispatch) => {\n    dispatch(fetchTabRequest({ courseId }));\n    try {\n      const courseHomeCourseMetadata = await getCourseHomeCourseMetadata(courseId, 'outline');\n      dispatch(addModel({\n        modelType: 'courseHomeMeta',\n        model: {\n          id: courseId,\n          ...courseHomeCourseMetadata,\n        },\n      }));\n      const tabDataResult = getTabData && await getTabData(courseId, targetUserId);\n      if (tabDataResult) {\n        dispatch(addModel({\n          modelType: tab,\n          model: {\n            id: courseId,\n            ...tabDataResult,\n          },\n        }));\n      }\n      // Disable the access-denied path for now - it caused a regression\n      if (!courseHomeCourseMetadata.courseAccess.hasAccess) {\n        dispatch(fetchTabDenied({ courseId }));\n      } else if (tabDataResult || !getTabData) {\n        dispatch(fetchTabSuccess({\n          courseId,\n          targetUserId,\n        }));\n      }\n    } catch (e) {\n      dispatch(fetchTabFailure({ courseId }));\n      logError(e);\n    }\n  };\n}\n\nexport function fetchDatesTab(courseId) {\n  return fetchTab(courseId, 'dates', getDatesTabData);\n}\n\nexport function fetchProgressTab(courseId, targetUserId) {\n  return fetchTab(courseId, 'progress', getProgressTabData, parseInt(targetUserId, 10) || targetUserId);\n}\n\nexport function fetchOutlineTab(courseId) {\n  return fetchTab(courseId, 'outline', getOutlineTabData);\n}\n\nexport function fetchLiveTab(courseId) {\n  return fetchTab(courseId, 'live', getLiveTabIframe);\n}\n\nexport function fetchDiscussionTab(courseId) {\n  return fetchTab(courseId, 'discussion');\n}\n\nexport function dismissWelcomeMessage(courseId) {\n  return async () => postDismissWelcomeMessage(courseId);\n}\n\nexport function requestCert(courseId) {\n  return async () => postRequestCert(courseId);\n}\n\nexport function resetDeadlines(courseId, model, getTabData) {\n  return async (dispatch) => {\n    postCourseDeadlines(courseId, model).then(response => {\n      const { data } = response;\n      const {\n        header,\n        link,\n        link_text: linkText,\n      } = data;\n      dispatch(getTabData(courseId));\n      dispatch(setCallToActionToast({ header, link, linkText }));\n    });\n  };\n}\n\nexport async function deprecatedSaveCourseGoal(courseId, goalKey) {\n  return deprecatedPostCourseGoals(courseId, goalKey);\n}\n\nexport async function saveWeeklyLearningGoal(courseId, daysPerWeek, subscribedToReminders) {\n  return postWeeklyLearningGoal(courseId, daysPerWeek, subscribedToReminders);\n}\n\nexport function processEvent(eventData, getTabData) {\n  return async (dispatch) => {\n    // Pulling this out early so the data doesn't get camelCased and is easier\n    // to use when it's passed to the backend\n    const { research_event_data: researchEventData } = eventData;\n    const event = camelCaseObject(eventData);\n    if (event.eventName === eventTypes.POST_EVENT) {\n      executePostFromPostEvent(event.postData, researchEventData).then(response => {\n        const { data } = response;\n        const {\n          header,\n          link,\n          link_text: linkText,\n        } = data;\n        dispatch(getTabData(event.postData.bodyParams.courseId));\n        dispatch(setCallToActionToast({ header, link, linkText }));\n      });\n    }\n  };\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  allDates: {\n    id: 'learning.outline.dates.all',\n    defaultMessage: 'View all course dates',\n    description: 'Text anchor for link that redirects to dates or course timeline tab',\n  },\n  casualGoalButtonText: {\n    id: 'learning.outline.goalButton.casual.text',\n    defaultMessage: '1 day a week',\n    description: 'Text shown for casual goal button',\n  },\n  casualGoalButtonTitle: {\n    id: 'learning.outline.goalButton.screenReader.text',\n    defaultMessage: 'Casual',\n    description: 'A very short description of the least intense of three learning goals',\n  },\n  certAlt: {\n    id: 'learning.outline.certificateAlt',\n    defaultMessage: 'Example Certificate',\n    description: 'Alternate text displayed when the example certificate image cannot be displayed.',\n  },\n  collapseAll: {\n    id: 'learning.outline.collapseAll',\n    defaultMessage: 'Collapse all',\n    description: 'Label for button to close all of the collapsible sections',\n  },\n  completedAssignment: {\n    id: 'learning.outline.completedAssignment',\n    defaultMessage: 'Completed',\n    description: 'Text used to describe the green checkmark icon in front of an assignment title',\n  },\n  completedSection: {\n    id: 'learning.outline.completedSection',\n    defaultMessage: 'Completed section',\n    description: 'Text used to describe the green checkmark icon in front of a section title',\n  },\n  dates: {\n    id: 'learning.outline.dates',\n    defaultMessage: 'Important dates',\n    description: 'Headline for the (summary of dates) section of the outline page',\n  },\n  editGoal: {\n    id: 'learning.outline.editGoal',\n    defaultMessage: 'Edit goal',\n    description: 'Edit course goal button',\n  },\n  expandAll: {\n    id: 'learning.outline.expandAll',\n    defaultMessage: 'Expand all',\n    description: 'Label for button to open all of the collapsible sections',\n  },\n  goal: {\n    id: 'learning.outline.goal',\n    defaultMessage: 'Goal',\n    description: 'Label for the selected course goal',\n  },\n  goalReminderDetail: {\n    id: 'learning.outline.goalReminderDetail',\n    defaultMessage: 'If we notice you’re not quite at your goal, we’ll send you an email reminder.',\n    description: 'It describe to learner what is goal reminder service',\n  },\n  goalUnsure: {\n    id: 'learning.outline.goalUnsure',\n    defaultMessage: 'Not sure yet',\n  },\n  handouts: {\n    id: 'learning.outline.handouts',\n    defaultMessage: 'Course Handouts',\n    description: 'Header for (Course Handouts) section in course outline',\n  },\n  incompleteAssignment: {\n    id: 'learning.outline.incompleteAssignment',\n    defaultMessage: 'Incomplete',\n    description: 'Text used to describe the gray checkmark icon in front of an assignment title',\n  },\n  incompleteSection: {\n    id: 'learning.outline.incompleteSection',\n    defaultMessage: 'Incomplete section',\n    description: 'Text used to describe the gray checkmark icon in front of a section title',\n  },\n  intenseGoalButtonText: {\n    id: 'learning.outline.goalButton.intense.text',\n    defaultMessage: '5 days a week',\n    description: 'Text shown for intense goal button',\n  },\n  intenseGoalButtonTitle: {\n    id: 'learning.outline.goalButton.intense.title',\n    defaultMessage: 'Intense',\n    description: 'A very short description of the most intensive option of three learning goals, Casual, Regular and Intense',\n  },\n  learnMore: {\n    id: 'learning.outline.learnMore',\n    defaultMessage: 'Learn More',\n  },\n  openSection: {\n    id: 'learning.outline.altText.openSection',\n    defaultMessage: 'Open',\n    description: 'A button to open the given section of the course outline',\n  },\n  proctoringInfoPanel: {\n    id: 'learning.proctoringPanel.header',\n    defaultMessage: 'This course contains proctored exams',\n    description: 'Used as a label to indicate that course has proctored exams',\n  },\n  regularGoalButtonText: {\n    id: 'learning.outline.goalButton.regular.text',\n    defaultMessage: '3 days a week',\n    description: 'Text shown for regular goal button',\n\n  },\n  regularGoalButtonTitle: {\n    id: 'learning.outline.goalButton.regular.title',\n    defaultMessage: 'Regular',\n    description: 'A very short description of the middle option of three learning goals, Casual, Regular and Intense',\n  },\n  resumeBlurb: {\n    id: 'learning.outline.resumeBlurb',\n    defaultMessage: 'Pick up where you left off',\n    description: 'Text describing to the learner that they can return to the last section they visited within the course.',\n  },\n  resume: {\n    id: 'learning.outline.resume',\n    defaultMessage: 'Resume course',\n    description: 'Anchor text for button that would resume course',\n  },\n  setGoal: {\n    id: 'learning.outline.setGoal',\n    defaultMessage: 'To start, set a course goal by selecting the option below that best describes your learning plan.',\n    description: 'In indicate to learner how to set or use the goal reminder service',\n  },\n  setGoalReminder: {\n    id: 'learning.outline.setGoalReminder',\n    defaultMessage: 'Set a goal reminder',\n    description: 'The text for the radio button which activate or deactivate the goal reminder service',\n  },\n  setLearningGoalButtonScreenReaderText: {\n    id: 'learning.outline.goalButton.casual.title',\n    defaultMessage: 'Set a learning goal style.',\n    description: 'screen reader text informing learner they can select an intensity of learning goal',\n  },\n  setWeeklyGoal: {\n    id: 'learning.outline.setWeeklyGoal',\n    defaultMessage: 'Set a weekly learning goal',\n    description: 'The headline for (goal reminder service) section in course outline',\n  },\n  setWeeklyGoalDetail: {\n    id: 'learning.outline.setWeeklyGoalDetail',\n    defaultMessage: 'Setting a goal motivates you to finish the course. You can always change it later.',\n    description: 'It indiacate the gaol or the purpose of the goal reminder service to learners',\n  },\n  start: {\n    id: 'learning.outline.start',\n    defaultMessage: 'Start course',\n    description: 'The text for button which starts the course',\n  },\n  startBlurb: {\n    id: 'learning.outline.startBlurb',\n    defaultMessage: 'Begin your course today',\n  },\n  tools: {\n    id: 'learning.outline.tools',\n    defaultMessage: 'Course Tools',\n    description: 'Headline for the (course tools) section in course outline. course tool might include links to course bookmarks, financial assistance...etc',\n  },\n  upgradeButton: {\n    id: 'learning.outline.upgradeButton',\n    defaultMessage: 'Upgrade ({symbol}{price})',\n    description: 'Text for the button which redirects to the upgrading page',\n  },\n  upgradeTitle: {\n    id: 'learning.outline.upgradeTitle',\n    defaultMessage: 'Pursue a verified certificate',\n    description: 'Upgrade title',\n  },\n  welcomeMessage: {\n    id: 'learning.outline.welcomeMessage',\n    defaultMessage: 'Welcome Message',\n  },\n  welcomeMessageShowMoreButton: {\n    id: 'learning.outline.welcomeMessageShowMoreButton',\n    defaultMessage: 'Show More',\n  },\n  welcomeMessageShowLessButton: {\n    id: 'learning.outline.welcomeMessageShowLessButton',\n    defaultMessage: 'Show Less',\n  },\n  welcomeTo: {\n    id: 'learning.outline.goalWelcome',\n    defaultMessage: 'Welcome to',\n    description: 'This precedes the title of the course',\n  },\n  notStartedProctoringStatus: {\n    id: 'learning.proctoringPanel.status.notStarted',\n    defaultMessage: 'Not Started',\n    description: 'It indcate that proctortrack onboarding exam hasn’t started yet',\n  },\n  startedProctoringStatus: {\n    id: 'learning.proctoringPanel.status.started',\n    defaultMessage: 'Started',\n    description: 'Label to indicate the starting status of the proctortrack onboarding exam',\n  },\n  submittedProctoringStatus: {\n    id: 'learning.proctoringPanel.status.submitted',\n    defaultMessage: 'Submitted',\n    description: 'Label to indicate the submitted status of proctortrack onboarding exam',\n  },\n  verifiedProctoringStatus: {\n    id: 'learning.proctoringPanel.status.verified',\n    defaultMessage: 'Verified',\n    description: 'Label to indicate the verified status of the proctortrack onboarding exam',\n  },\n  rejectedProctoringStatus: {\n    id: 'learning.proctoringPanel.status.rejected',\n    defaultMessage: 'Rejected',\n    description: 'Label to indicate the rejection status of the proctortrack onboarding exam',\n  },\n  errorProctoringStatus: {\n    id: 'learning.proctoringPanel.status.error',\n    defaultMessage: 'Error',\n    description: 'Label to indicate that there is error in proctortrack onboarding exam',\n  },\n  otherCourseApprovedProctoringStatus: {\n    id: 'learning.proctoringPanel.status.otherCourseApproved',\n    defaultMessage: 'Approved in Another Course',\n    description: 'Label to indicate that the proctortrack onboarding exam is verified based on taking onboarding exam on another course',\n  },\n  expiringSoonProctoringStatus: {\n    id: 'learning.proctoringPanel.status.expiringSoon',\n    defaultMessage: 'Expiring Soon',\n    description: 'A label to indicate that proctortrack onboarding exam will expire soon',\n  },\n  expiredProctoringStatus: {\n    id: 'learning.proctoringPanel.status.expired',\n    defaultMessage: 'Expired',\n    description: 'A label to indicate that proctortrack onboarding exam has expired',\n  },\n  proctoringCurrentStatus: {\n    id: 'learning.proctoringPanel.status',\n    defaultMessage: 'Current Onboarding Status:',\n    description: 'The text that precede the status label of proctortrack onboarding exam',\n  },\n  notStartedProctoringMessage: {\n    id: 'learning.proctoringPanel.message.notStarted',\n    defaultMessage: 'You have not started your onboarding exam.',\n    description: 'The text that explain the meaning of (not started) label of the proctortrack onboarding exam',\n  },\n  startedProctoringMessage: {\n    id: 'learning.proctoringPanel.message.started',\n    defaultMessage: 'You have started your onboarding exam.',\n    description: 'The text that explain the meaning of (started) label of the proctortrack onboarding exam',\n  },\n  submittedProctoringMessage: {\n    id: 'learning.proctoringPanel.message.submitted',\n    defaultMessage: 'You have submitted your onboarding exam.',\n    description: 'The text that explain the meaning of (submitted) label of the proctortrack onboarding exam',\n  },\n  verifiedProctoringMessage: {\n    id: 'learning.proctoringPanel.message.verified',\n    defaultMessage: 'Your onboarding exam has been approved in this course.',\n    description: 'The text that explain the meaning of (verified) label of the proctortrack onboarding exam',\n  },\n  rejectedProctoringMessage: {\n    id: 'learning.proctoringPanel.message.rejected',\n    defaultMessage: 'Your onboarding exam has been rejected. Please retry onboarding.',\n    description: 'The text that explain the meaning of (rejected) label of the proctortrack onboarding exam',\n  },\n  errorProctoringMessage: {\n    id: 'learning.proctoringPanel.message.error',\n    defaultMessage: 'An error has occurred during your onboarding exam. Please retry onboarding.',\n    description: 'The text that explain the meaning of (error) label of the proctortrack onboarding exam',\n  },\n  otherCourseApprovedProctoringMessage: {\n    id: 'learning.proctoringPanel.message.otherCourseApproved',\n    defaultMessage: 'Your onboarding exam has been approved in another course.',\n    description: 'The text that explain the meaning of (approved in another course) label of the proctortrack onboarding exam',\n  },\n  otherCourseApprovedProctoringDetail: {\n    id: 'learning.proctoringPanel.detail.otherCourseApproved',\n    defaultMessage: 'If your device has changed, we recommend that you complete this course\\'s onboarding exam in order to ensure that your setup still meets the requirements for proctoring.',\n    description: 'The text that recommend an action when the status of the proctortrack onboarding exam is (approved in another course)',\n  },\n  expiringSoonProctoringMessage: {\n    id: 'learning.proctoringPanel.message.expiringSoon',\n    defaultMessage: 'Your onboarding profile has been approved. However, your onboarding status is expiring soon. Please complete onboarding again to ensure that you will be able to continue taking proctored exams.',\n    description: 'The text that recommend an action when the status of the proctortrack onboarding exam is (expiring soon)',\n  },\n  expiredProctoringMessage: {\n    id: 'learning.proctoringPanel.message.expired',\n    defaultMessage: 'Your onboarding status has expired. Please complete onboarding again to continue taking proctored exams.',\n    description: 'The text that recommend an action when the status of the proctortrack onboarding exam is (expired)',\n  },\n  proctoringPanelGeneralInfo: {\n    id: 'learning.proctoringPanel.generalInfo',\n    defaultMessage: 'You must complete the onboarding process prior to taking any proctored exam. ',\n    description: 'It indicate key and important fact to learner about the importance of taking proctortrack onboarding exam',\n  },\n  proctoringPanelGeneralInfoSubmitted: {\n    id: 'learning.proctoringPanel.generalInfoSubmitted',\n    defaultMessage: 'Your submitted profile is in review.',\n    description: 'The text that explain the meaning of (in review) label of the proctortrack onboarding exam',\n  },\n  proctoringPanelGeneralTime: {\n    id: 'learning.proctoringPanel.generalTime',\n    defaultMessage: 'Onboarding profile review can take 2+ business days.',\n    description: 'This text explain for how long the (in review) status of the proctortrack onboarding exam might remain',\n  },\n  proctoringOnboardingButton: {\n    id: 'learning.proctoringPanel.onboardingButton',\n    defaultMessage: 'Complete Onboarding',\n    description: 'Text shown on the button that starts the actual proctortrack onboarding exam when it is released',\n  },\n  proctoringOnboardingPracticeButton: {\n    id: 'learning.proctoringPanel.onboardingPracticeButton',\n    defaultMessage: 'View Onboarding Exam',\n    description: 'The text that appears on onboarding exam while its not released, so learners can take or view it as a practice',\n  },\n  proctoringOnboardingButtonNotOpen: {\n    id: 'learning.proctoringPanel.onboardingButtonNotOpen',\n    defaultMessage: 'Onboarding Opens: {releaseDate}',\n    description: 'It indicate when or from when the learner can take the proctortrack onboarding exam',\n  },\n  proctoringReviewRequirementsButton: {\n    id: 'learning.proctoringPanel.reviewRequirementsButton',\n    defaultMessage: 'Review instructions and system requirements',\n    description: 'Anchor text for button which redirect leaner to doc or a detailed page about proctortrack onboarding exam',\n  },\n  proctoringOnboardingButtonPastDue: {\n    id: 'learning.proctoringPanel.onboardingButtonPastDue',\n    defaultMessage: 'Onboarding Past Due',\n    description: 'Text that show when the deadline of proctortrack onboarding exam has passed, it appears on button that start the onboarding exam however for this case the button is disabled for obvious reason',\n  },\n});\n\nexport default messages;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  notPassingHeader: {\n    id: 'progress.certificateStatus.notPassingHeader',\n    defaultMessage: 'Certificate status',\n    description: 'Header text when learner certifcate status is not passing',\n  },\n  notPassingBody: {\n    id: 'progress.certificateStatus.notPassingBody',\n    defaultMessage: 'In order to qualify for a certificate, you must have a passing grade.',\n    description: 'Body text when learner certifcate status is not passing',\n  },\n  inProgressHeader: {\n    id: 'progress.certificateStatus.inProgressHeader',\n    defaultMessage: 'More content is coming soon!',\n    description: 'Header text when learner certifcate is in progress',\n  },\n  inProgressBody: {\n    id: 'progress.certificateStatus.inProgressBody',\n    defaultMessage: 'It looks like there is more content in this course that will be released in the future. Look out for email updates or check back on your course for when this content will be available.',\n    description: 'Body text when learner certifcate is in progress',\n  },\n  requestableHeader: {\n    id: 'progress.certificateStatus.requestableHeader',\n    defaultMessage: 'Certificate status',\n    description: 'Header text when learner certifcate status is requestable',\n  },\n  requestableBody: {\n    id: 'progress.certificateStatus.requestableBody',\n    defaultMessage: 'Congratulations, you qualified for a certificate! In order to access your certificate, request it below.',\n    description: 'Body text when learner certifcate status is requestable',\n  },\n  requestableButton: {\n    id: 'progress.certificateStatus.requestableButton',\n    defaultMessage: 'Request certificate',\n    description: 'Button text when learner certifcate status is requestable',\n  },\n  unverifiedHeader: {\n    id: 'progress.certificateStatus.unverifiedHeader',\n    defaultMessage: 'Certificate status',\n    description: 'Header text when learner certifcate status is unverified',\n  },\n  unverifiedButton: {\n    id: 'progress.certificateStatus.unverifiedButton',\n    defaultMessage: 'Verify ID',\n    description: 'Button text when learner certifcate status is unverified',\n  },\n  unverifiedPendingBody: {\n    id: 'progress.certificateStatus.courseCelebration.verificationPending',\n    defaultMessage: 'Your ID verification is pending and your certificate will be available once approved.',\n    description: 'Body text when learner certifcate status is unverified pending',\n  },\n  downloadableHeader: {\n    id: 'progress.certificateStatus.downloadableHeader',\n    defaultMessage: 'Your certificate is available!',\n    description: 'Header text when the certifcate is available',\n  },\n  downloadableBody: {\n    id: 'progress.certificateStatus.downloadableBody',\n    defaultMessage: 'Showcase your accomplishment on LinkedIn or your resumé today. You can download your certificate now and access it any time from your Dashboard and Profile.',\n    description: 'Recommending an action for learner when course certificate is available',\n  },\n  viewableButton: {\n    id: 'progress.certificateStatus.viewableButton',\n    defaultMessage: 'View my certificate',\n    description: 'Button text which view or links to the certifcate',\n  },\n  notAvailableHeader: {\n    id: 'progress.certificateStatus.notAvailableHeader',\n    defaultMessage: 'Certificate status',\n    description: 'Header text when the certifcate is not available',\n  },\n  notAvailableEndDateBody: {\n    id: 'progress.certificateBody.notAvailable.endDate',\n    defaultMessage: 'Final grades and any earned certificates are scheduled to be available after {endDate}.',\n    description: 'Shown for learners who have finished a course before grades and certificates are available.',\n  },\n  upgradeHeader: {\n    id: 'progress.certificateStatus.upgradeHeader',\n    defaultMessage: 'Earn a certificate',\n    description: 'Header text when the learner needs to upgrade to earn a certifcate ',\n  },\n  upgradeBody: {\n    id: 'progress.certificateStatus.upgradeBody',\n    defaultMessage: 'You are in an audit track and do not qualify for a certificate. In order to work towards a certificate, upgrade your course today.',\n    description: 'Body text when the learner needs to upgrade to earn a certifcate ',\n  },\n  upgradeButton: {\n    id: 'progress.certificateStatus.upgradeButton',\n    defaultMessage: 'Upgrade now',\n    description: 'Button text which leaner needs to upgrade to get the certifcate',\n  },\n  unverifiedHomeHeader: {\n    id: 'progress.certificateStatus.unverifiedHomeHeader.v2',\n    defaultMessage: 'Verify your identity to qualify for a certificate.',\n    description: 'Header text when the learner needs to do verification to earn a certifcate ',\n  },\n  unverifiedHomeButton: {\n    id: 'progress.certificateStatus.unverifiedHomeButton',\n    defaultMessage: 'Verify my ID',\n    description: 'Button text which leaner needs to do verification to earn a certifcate',\n  },\n  unverifiedHomeBody: {\n    id: 'progress.certificateStatus.unverifiedHomeBody',\n    defaultMessage: 'In order to generate a certificate for this course, you must complete the ID verification process.',\n    description: 'Body text when the learner needs to do verification to earn a certifcate',\n  },\n});\n\nexport default messages;\n","// This file holds some convenience methods for dealing with localStorage.\n//\n// NOTE: These storage keys are not namespaced.  That means that it's shared for the current fully\n// qualified domain.  Namespacing could be added, but we'll cross that bridge when we need it.\n\nfunction getLocalStorage(key) {\n  try {\n    if (global.localStorage) {\n      const rawItem = global.localStorage.getItem(key);\n      if (rawItem) {\n        return JSON.parse(rawItem);\n      }\n    }\n  } catch (e) {\n    // If this fails for some reason, just return null.\n  }\n  return null;\n}\n\nfunction setLocalStorage(key, value) {\n  try {\n    if (global.localStorage) {\n      global.localStorage.setItem(key, JSON.stringify(value));\n    }\n  } catch (e) {\n    // If this fails, just bail.\n  }\n}\n\nfunction clearLocalStorage(key) {\n  try {\n    if (global.localStorage) {\n      global.localStorage.removeItem(key);\n    }\n  } catch (e) {\n    // If this fails, just bail.\n  }\n}\n\nfunction popLocalStorage(key) {\n  const value = getLocalStorage(key);\n  clearLocalStorage(key);\n  return value;\n}\n\nexport {\n  clearLocalStorage,\n  getLocalStorage,\n  popLocalStorage,\n  setLocalStorage,\n};\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  close: {\n    id: 'general.altText.close',\n    defaultMessage: 'Close',\n    description: 'Text used as an aria-label to describe closing or dismissing a component',\n  },\n  registerLowercase: {\n    id: 'learning.logistration.register', // ID left for historical purposes\n    defaultMessage: 'register',\n    description: 'Text in a link, prompting the user to create an account.  Used in \"learning.logistration.alert\"',\n  },\n  signInLowercase: {\n    id: 'learning.logistration.login', // ID left for historical purposes\n    defaultMessage: 'sign in',\n    description: 'Text in a link, prompting the user to log in.  Used in \"learning.logistration.alert\"',\n  },\n  signInSentenceCase: {\n    id: 'general.signIn.sentenceCase',\n    defaultMessage: 'Sign in',\n    description: 'Text in a button, prompting the user to log in.',\n  },\n});\n\nexport default messages;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nfunction add(state, modelType, model, idField) {\n  idField = idField ?? 'id';\n  const id = model[idField];\n  if (state[modelType] === undefined) {\n    state[modelType] = {};\n  }\n  state[modelType][id] = model;\n}\n\nfunction update(state, modelType, model, idField) {\n  idField = idField ?? 'id';\n  const id = model[idField];\n  if (state[modelType] === undefined) {\n    state[modelType] = {};\n  }\n  state[modelType][id] = { ...state[modelType][id], ...model };\n}\n\nfunction remove(state, modelType, id) {\n  if (state[modelType] === undefined) {\n    state[modelType] = {};\n  }\n\n  delete state[modelType][id];\n}\n\nconst slice = createSlice({\n  name: 'models',\n  initialState: {},\n  reducers: {\n    addModel: (state, { payload }) => {\n      const { modelType, model, idField } = payload;\n      add(state, modelType, model, idField);\n    },\n    addModels: (state, { payload }) => {\n      const { modelType, models, idField } = payload;\n      models.forEach(model => add(state, modelType, model, idField));\n    },\n    addModelsMap: (state, { payload }) => {\n      const { modelType, modelsMap, idField } = payload;\n      Object.values(modelsMap).forEach(model => add(state, modelType, model, idField));\n    },\n    updateModel: (state, { payload }) => {\n      const { modelType, model, idField } = payload;\n      update(state, modelType, model, idField);\n    },\n    updateModels: (state, { payload }) => {\n      const { modelType, models, idField } = payload;\n      models.forEach(model => update(state, modelType, model, idField));\n    },\n    updateModelsMap: (state, { payload }) => {\n      const { modelType, modelsMap, idField } = payload;\n      Object.values(modelsMap).forEach(model => update(state, modelType, model, idField));\n    },\n    removeModel: (state, { payload }) => {\n      const { modelType, id } = payload;\n      remove(state, modelType, id);\n    },\n    removeModels: (state, { payload }) => {\n      const { modelType, ids } = payload;\n      ids.forEach(id => remove(state, modelType, id));\n    },\n  },\n});\n\nexport const {\n  addModel,\n  addModels,\n  addModelsMap,\n  updateModel,\n  updateModels,\n  updateModelsMap,\n  removeModel,\n  removeModels,\n} = slice.actions;\n\nexport const { reducer } = slice;\n","import { useSelector, shallowEqual } from 'react-redux';\n\n/*\n  Return the selected model with the given id, or an empty object if the model does not exist \"{}\".\n */\nexport function useModel(type, id) {\n  return useSelector(\n    state => ((state.models[type] !== undefined && state.models[type][id] !== undefined) ? state.models[type][id] : {}),\n    shallowEqual,\n  );\n}\n\nexport function useModels(type, ids) {\n  return useSelector(\n    state => ids.map(\n      id => ((state.models[type] !== undefined && state.models[type][id] !== undefined) ? state.models[type][id] : {}),\n    ),\n    shallowEqual,\n  );\n}\n","import React from 'react';\n\nconst UserMessagesContext = React.createContext({});\n\nexport default UserMessagesContext;\n","import React, { useContext, useCallback, Suspense } from 'react';\nimport PropTypes from 'prop-types';\n\nimport UserMessagesContext from './UserMessagesContext';\nimport Alert from './Alert';\n\nconst AlertList = ({\n  topic, className, customAlerts, customProps,\n}) => {\n  const { remove, messages } = useContext(UserMessagesContext);\n  const getAlertComponent = useCallback(\n    (code) => (customAlerts[code] !== undefined ? customAlerts[code] : Alert),\n    [customAlerts],\n  );\n\n  const topicMessages = messages.filter(message => !topic || message.topic === topic);\n  if (topicMessages.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={className}>\n      {topicMessages.map(message => {\n        const AlertComponent = getAlertComponent(message.code);\n        return (\n          <Suspense key={message.id} fallback={null}>\n            <AlertComponent\n              type={message.type}\n              dismissible={message.dismissible}\n              onDismiss={() => remove(message.id)}\n              payload={message.payload}\n              {...customProps}\n            >\n              {message.text}\n            </AlertComponent>\n          </Suspense>\n        );\n      })}\n    </div>\n  );\n};\n\nAlertList.propTypes = {\n  className: PropTypes.string,\n  topic: PropTypes.string,\n  customAlerts: PropTypes.objectOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n  ),\n  // eslint-disable-next-line react/forbid-prop-types\n  customProps: PropTypes.object,\n};\n\nAlertList.defaultProps = {\n  topic: null,\n  className: null,\n  customAlerts: {},\n  customProps: {},\n};\n\nexport default AlertList;\n","/* eslint-disable import/prefer-default-export */\nimport { useContext, useEffect } from 'react';\nimport UserMessagesContext from './UserMessagesContext';\n\nexport function useAlert(isVisible, {\n  code, text, topic, type, payload, dismissible,\n}) {\n  const { add, remove } = useContext(UserMessagesContext);\n\n  // Please note:\n  // The deps list [isVisible, code, ... etc.] in this `useEffect` call prevents the\n  // effect from running if none of deps have changed. However, \"changed\" for objects is\n  // defined in terms of identity; thus, if you provide a payload that is *seemingly* equal\n  // to the previous one but *actually* a different object, then this effect will run.\n  // If you are particularly unlucky, this will cause an infinite re-render loop.\n  // This manifested itself in TNL-7400.\n  // We hope to address the underlying issue in TNL-7418.\n  // In the mean time, you may follow the pattern that `useAccessExpirationAlert`\n  // establishes: memoize the payload so that the exact same object is used if the\n  // payload has not changed. And don't put values based off of now() in your payload, as\n  // that breaks memoization.\n  useEffect(() => {\n    if (!isVisible) {\n      return undefined;\n    }\n\n    const cleanupId = add({\n      code, text, topic, type, payload, dismissible,\n    });\n\n    return () => {\n      remove(cleanupId);\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isVisible, code, text, topic, type, payload, dismissible]);\n}\n","// Helper, that is used to forcibly finalize all promises\n// in thunk before running matcher against state.\nexport const executeThunk = async (thunk, dispatch, getState) => {\n  await thunk(dispatch, getState);\n  await new Promise(setImmediate);\n};\n\n// Utility function for appending the browser timezone to the url\n// Can be used on the backend when the user timezone is not set in the user account\nexport const appendBrowserTimezoneToUrl = (url) => {\n  const browserTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  const urlObject = new URL(url);\n  if (browserTimezone) {\n    urlObject.searchParams.append('browser_timezone', browserTimezone);\n  }\n  return urlObject.href;\n};\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  certStatusEarnedNotAvailableHeader: {\n    id: 'cert.alert.earned.unavailable.header.v2',\n    defaultMessage: 'Your grade and certificate status will be available soon.',\n    description: 'Header alerting the user that their certificate will be available soon.',\n  },\n  certStatusDownloadableHeader: {\n    id: 'cert.alert.earned.ready.header',\n    defaultMessage: 'Congratulations! Your certificate is ready.',\n    description: 'Header alerting the user that their certificate is ready.',\n  },\n  certStatusNotPassingHeader: {\n    id: 'cert.alert.notPassing.header',\n    defaultMessage: 'You are not yet eligible for a certificate',\n  },\n  certStatusNotPassingButton: {\n    id: 'cert.alert.notPassing.button',\n    defaultMessage: 'View grades',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  FormattedDate,\n  FormattedMessage,\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { Alert, Button } from '@edx/paragon';\nimport { useDispatch } from 'react-redux';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\nimport { getConfig } from '@edx/frontend-platform';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport certMessages from './messages';\nimport certStatusMessages from '../../../progress-tab/certificate-status/messages';\nimport { requestCert } from '../../../data/thunks';\n\nexport const CERT_STATUS_TYPE = {\n  EARNED_NOT_AVAILABLE: 'earned_but_not_available',\n  DOWNLOADABLE: 'downloadable',\n  REQUESTING: 'requesting',\n  UNVERIFIED: 'unverified',\n};\n\nconst CertificateStatusAlert = ({ intl, payload }) => {\n  const dispatch = useDispatch();\n  const {\n    certificateAvailableDate,\n    certStatus,\n    courseEndDate,\n    courseId,\n    certURL,\n    userTimezone,\n    org,\n    notPassingCourseEnded,\n    tabs,\n  } = payload;\n\n  // eslint-disable-next-line react/prop-types\n  const AlertWrapper = (props) => props.children(props);\n\n  const sendAlertClickTracking = (id) => {\n    const { administrator } = getAuthenticatedUser();\n    sendTrackEvent(id, {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n    });\n  };\n\n  const renderCertAwardedStatus = () => {\n    const alertProps = {\n      variant: 'success',\n      icon: faCheckCircle,\n      iconClassName: 'alert-icon text-success-500',\n    };\n    if (certStatus === CERT_STATUS_TYPE.EARNED_NOT_AVAILABLE) {\n      const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n      const certificateAvailableDateFormatted = <FormattedDate value={certificateAvailableDate} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n      const courseEndDateFormatted = <FormattedDate value={courseEndDate} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n      alertProps.header = intl.formatMessage(certMessages.certStatusEarnedNotAvailableHeader);\n      alertProps.body = (\n        <p>\n          <FormattedMessage\n            id=\"learning.outline.alert.cert.earnedNotAvailable\"\n            defaultMessage=\"This course ends on {courseEndDateFormatted}. Final grades and any earned certificates are\n            scheduled to be available after {certificateAvailableDate}.\"\n            values={{\n              courseEndDateFormatted,\n              certificateAvailableDate: certificateAvailableDateFormatted,\n            }}\n            {...timezoneFormatArgs}\n          />\n        </p>\n      );\n    } else if (certStatus === CERT_STATUS_TYPE.DOWNLOADABLE) {\n      alertProps.header = intl.formatMessage(certMessages.certStatusDownloadableHeader);\n      alertProps.buttonMessage = intl.formatMessage(certStatusMessages.viewableButton);\n      alertProps.buttonVisible = true;\n      alertProps.buttonLink = certURL;\n      alertProps.buttonAction = () => {\n        sendAlertClickTracking('edx.ui.lms.course_outline.certificate_alert_downloadable_button.clicked');\n      };\n    } else if (certStatus === CERT_STATUS_TYPE.REQUESTING) {\n      alertProps.header = intl.formatMessage(certMessages.certStatusDownloadableHeader);\n      alertProps.buttonMessage = intl.formatMessage(certStatusMessages.requestableButton);\n      alertProps.buttonVisible = true;\n      alertProps.buttonLink = '';\n      alertProps.buttonAction = () => {\n        sendAlertClickTracking('edx.ui.lms.course_outline.certificate_alert_request_cert_button.clicked');\n        dispatch(requestCert(courseId));\n      };\n    }\n    return alertProps;\n  };\n\n  const renderNotIDVerifiedStatus = () => {\n    const alertProps = {\n      variant: 'warning',\n      icon: faExclamationTriangle,\n      iconClassName: 'alert-icon text-warning-500',\n      header: intl.formatMessage(certStatusMessages.unverifiedHomeHeader),\n      buttonMessage: intl.formatMessage(certStatusMessages.unverifiedHomeButton),\n      body: intl.formatMessage(certStatusMessages.unverifiedHomeBody),\n      buttonVisible: true,\n      buttonLink: getConfig().SUPPORT_URL_ID_VERIFICATION,\n      buttonAction: () => {\n        sendAlertClickTracking('edx.ui.lms.course_outline.certificate_alert_unverified_button.clicked');\n      },\n    };\n\n    return alertProps;\n  };\n\n  const renderNotPassingCourseEnded = () => {\n    const progressTab = tabs.find(tab => tab.slug === 'progress');\n    const progressLink = progressTab && progressTab.url;\n\n    const alertProps = {\n      header: intl.formatMessage(certMessages.certStatusNotPassingHeader),\n      buttonMessage: intl.formatMessage(certMessages.certStatusNotPassingButton),\n      body: intl.formatMessage(certStatusMessages.notPassingBody),\n      buttonVisible: true,\n      buttonLink: progressLink,\n      buttonAction: () => {\n        sendAlertClickTracking('edx.ui.lms.course_outline.certificate_alert_view_grades_button.clicked');\n      },\n    };\n\n    return alertProps;\n  };\n\n  let alertProps = {};\n  switch (certStatus) {\n    case CERT_STATUS_TYPE.EARNED_NOT_AVAILABLE:\n    case CERT_STATUS_TYPE.DOWNLOADABLE:\n    case CERT_STATUS_TYPE.REQUESTING:\n      alertProps = renderCertAwardedStatus();\n      break;\n    case CERT_STATUS_TYPE.UNVERIFIED:\n      alertProps = renderNotIDVerifiedStatus();\n      break;\n    default:\n      if (notPassingCourseEnded) {\n        alertProps = renderNotPassingCourseEnded();\n      }\n      break;\n  }\n\n  return (\n    <AlertWrapper {...alertProps}>\n      {({\n        variant,\n        buttonVisible,\n        iconClassName,\n        icon,\n        header,\n        body,\n        buttonAction,\n        buttonLink,\n        buttonMessage,\n      }) => (\n        <Alert variant={variant}>\n          <div className=\"d-flex flex-column flex-lg-row justify-content-between align-items-center\">\n            <div className={buttonVisible ? 'col-lg-8' : 'col-auto'}>\n              <FontAwesomeIcon icon={icon} className={iconClassName} />\n              <Alert.Heading>{header}</Alert.Heading>\n              {body}\n            </div>\n            {buttonVisible && (\n              <div className=\"flex-grow-0 pt-3 pt-lg-0\">\n                <Button\n                  variant=\"primary\"\n                  href={buttonLink}\n                  onClick={() => {\n                    if (buttonAction) { buttonAction(); }\n                  }}\n                >\n                  {buttonMessage}\n                </Button>\n              </div>\n            )}\n          </div>\n        </Alert>\n\n      )}\n    </AlertWrapper>\n  );\n};\n\nCertificateStatusAlert.propTypes = {\n  intl: intlShape.isRequired,\n  payload: PropTypes.shape({\n    certificateAvailableDate: PropTypes.string,\n    certStatus: PropTypes.string,\n    courseEndDate: PropTypes.string,\n    courseId: PropTypes.string,\n    certURL: PropTypes.string,\n    userTimezone: PropTypes.string,\n    org: PropTypes.string,\n    notPassingCourseEnded: PropTypes.bool,\n    tabs: PropTypes.arrayOf(PropTypes.shape({\n      tab_id: PropTypes.string,\n      title: PropTypes.string,\n      url: PropTypes.string,\n    })),\n  }).isRequired,\n};\n\nexport default injectIntl(CertificateStatusAlert);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert as ParagonAlert } from '@edx/paragon';\nimport { CheckCircle, Info, WarningFilled } from '@edx/paragon/icons';\n\nimport { ALERT_TYPES } from './UserMessagesProvider';\n\nfunction getAlertVariant(type) {\n  switch (type) {\n    case ALERT_TYPES.ERROR:\n      return 'warning';\n    case ALERT_TYPES.DANGER:\n      return 'danger';\n    case ALERT_TYPES.SUCCESS:\n      return 'success';\n    default:\n      return 'info';\n  }\n}\n\nfunction getAlertIcon(type) {\n  switch (type) {\n    case ALERT_TYPES.ERROR:\n      return WarningFilled;\n    case ALERT_TYPES.SUCCESS:\n      return CheckCircle;\n    default:\n      return Info;\n  }\n}\n\nconst Alert = ({\n  type, dismissible, children, onDismiss, stacked,\n}) => (\n  <ParagonAlert\n    data-testid={`alert-container-${type}`}\n    variant={getAlertVariant(type)}\n    icon={getAlertIcon(type)}\n    dismissible={dismissible}\n    onClose={onDismiss}\n    stacked={stacked}\n  >\n    {children}\n  </ParagonAlert>\n);\n\nAlert.propTypes = {\n  type: PropTypes.oneOf([\n    ALERT_TYPES.ERROR,\n    ALERT_TYPES.DANGER,\n    ALERT_TYPES.INFO,\n    ALERT_TYPES.SUCCESS,\n  ]).isRequired,\n  dismissible: PropTypes.bool,\n  children: PropTypes.node,\n  onDismiss: PropTypes.func,\n  stacked: PropTypes.bool,\n};\n\nAlert.defaultProps = {\n  dismissible: false,\n  children: undefined,\n  onDismiss: null,\n  stacked: false,\n};\n\nexport default Alert;\n","import React, {\n  useState, useRef, useEffect, useMemo,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport UserMessagesContext from './UserMessagesContext';\nimport { getLocalStorage, popLocalStorage, setLocalStorage } from '../../data/localStorage';\n\nexport const ALERT_TYPES = {\n  ERROR: 'error',\n  DANGER: 'danger',\n  SUCCESS: 'success',\n  INFO: 'info',\n  WELCOME: 'welcome',\n};\n\nconst FLASH_MESSAGES_LOCAL_STORAGE_KEY = 'UserMessagesProvider.flashMessages';\n\nfunction addFlashMessage(message) {\n  let flashMessages = getLocalStorage(FLASH_MESSAGES_LOCAL_STORAGE_KEY);\n  if (!flashMessages || !Array.isArray(flashMessages)) {\n    flashMessages = [];\n  }\n  flashMessages.push(message);\n  setLocalStorage(FLASH_MESSAGES_LOCAL_STORAGE_KEY, flashMessages);\n}\n\nfunction popFlashMessages() {\n  return popLocalStorage(FLASH_MESSAGES_LOCAL_STORAGE_KEY) || [];\n}\n\nconst UserMessagesProvider = ({ children }) => {\n  // Note: The callbacks (add, remove, clear) below interact with useState in very subtle ways.\n  // When we call setMessages, we always do so with the function-based form of the handler, making\n  // use of the \"current\" state and not relying on lexical scoping to access the state exposed\n  // above with useState.  This is very important and allows us to call multiple \"add\", \"remove\",\n  // or \"clear\" functions in a  single render.  Without it, each call to one of the callbacks\n  // references back to the -original- value of messages instead of the most recent, causing them\n  // all to override each other.  Last one in would win.\n  const [messages, setMessages] = useState([]);\n  const [nextId, setNextId] = useState(1);\n\n  // Because the add, remove, and clear handlers also need to access nextId, we have to do\n  // something a bit different.  There's no way to wait for the \"currentNextId\" in a setMessages\n  // handler.  The alternative is to update a ref, which will always point to the current value by\n  // its very nature.\n  const refId = useRef(nextId);\n\n  /**\n   * Flash messages are a special kind of message that appears once on page refresh.\n   */\n  function addFlash(message) {\n    addFlashMessage(message);\n  }\n\n  function add(message) {\n    const {\n      code, dismissible, text, type, topic, payload, ...others\n    } = message;\n    const id = refId.current;\n    setMessages(currentMessages => [...currentMessages, {\n      code, dismissible, text, type, topic, payload, ...others, id,\n    }]);\n    refId.current += 1;\n    setNextId(refId.current);\n\n    return id;\n  }\n\n  function remove(id) {\n    setMessages(currentMessages => currentMessages.filter(message => message.id !== id));\n  }\n\n  function clear(topic = null) {\n    setMessages(currentMessages => (topic === null ? [] : currentMessages.filter(message => message.topic !== topic)));\n  }\n\n  useEffect(() => {\n    // We only allow flash messages to persist through one refresh, then we clear them out.\n    // If we want persistent messages, then add a 'persist' key to the messages and handle that\n    // as a separate local storage item.\n    const flashMessages = popFlashMessages();\n    flashMessages.forEach(flashMessage => add(flashMessage));\n  }, []);\n\n  const value = useMemo(() => ({\n    add,\n    addFlash,\n    remove,\n    clear,\n    messages,\n  }), [messages]);\n\n  return (\n    <UserMessagesContext.Provider value={value}>\n      {children}\n    </UserMessagesContext.Provider>\n  );\n};\n\nUserMessagesProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nUserMessagesProvider.defaultProps = {\n  children: null,\n};\n\nexport default UserMessagesProvider;\n","/* eslint-disable import/prefer-default-export */\n\nimport {\n  useCallback, useEffect, useRef, useState,\n} from 'react';\n\nexport function useEventListener(type, handler) {\n  // We use this ref so that we can hold a reference to the currently active event listener.\n  const eventListenerRef = useRef(null);\n  useEffect(() => {\n    // If we currently have an event listener, remove it.\n    if (eventListenerRef.current !== null) {\n      global.removeEventListener(type, eventListenerRef.current);\n      eventListenerRef.current = null;\n    }\n    // Now add our new handler as the event listener.\n    global.addEventListener(type, handler);\n    // And then save it to our ref for next time.\n    eventListenerRef.current = handler;\n    // When the component finally unmounts, use the ref to remove the correct handler.\n    return () => global.removeEventListener(type, eventListenerRef.current);\n  }, [type, handler]);\n}\n\n/**\n * Hooks up post messages to callbacks\n * @param {Object.<string, function>} events A mapping of message type to callback\n */\nexport function useIFramePluginEvents(events) {\n  const receiveMessage = useCallback(({ data }) => {\n    const {\n      type,\n      payload,\n    } = data;\n    if (events[type]) {\n      events[type](payload);\n    }\n  }, [events]);\n  useEventListener('message', receiveMessage);\n}\n\n/**\n * A hook to monitor message about changes in iframe content height\n * @param onIframeLoaded A callback for when the frame is loaded\n * @returns {[boolean, number]}\n */\nexport function useIFrameHeight(onIframeLoaded = null) {\n  const [iframeHeight, setIframeHeight] = useState(null);\n  const [hasLoaded, setHasLoaded] = useState(false);\n  const receiveResizeMessage = useCallback(({ height }) => {\n    setIframeHeight(height);\n    if (!hasLoaded && !iframeHeight && height > 0) {\n      setHasLoaded(true);\n      if (onIframeLoaded) {\n        onIframeLoaded();\n      }\n    }\n  }, [setIframeHeight, hasLoaded, iframeHeight, setHasLoaded, onIframeLoaded]);\n  useIFramePluginEvents({ 'plugin.resize': receiveResizeMessage });\n  return [hasLoaded, iframeHeight];\n}\n","import { getConfig } from '@edx/frontend-platform';\nimport { injectIntl } from '@edx/frontend-platform/i18n';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams, generatePath, useNavigate } from 'react-router-dom';\nimport { useIFrameHeight, useIFramePluginEvents } from '../../generic/hooks';\n\nconst DiscussionTab = () => {\n  const { courseId } = useSelector(state => state.courseHome);\n  const { path } = useParams();\n  const [originalPath] = useState(path);\n  const navigate = useNavigate();\n\n  const [, iFrameHeight] = useIFrameHeight();\n  useIFramePluginEvents({\n    'discussions.navigate': (payload) => {\n      const basePath = generatePath('/course/:courseId/discussion', { courseId });\n      navigate(`${basePath}/${payload.path}`);\n    },\n  });\n  const discussionsUrl = `${getConfig().DISCUSSIONS_MFE_BASE_URL}/${courseId}/${originalPath}`;\n  return (\n    <iframe\n      src={discussionsUrl}\n      className=\"d-flex w-100 border-0\"\n      height={iFrameHeight}\n      style={{ minHeight: '60rem' }}\n      title=\"discussion\"\n    />\n  );\n};\n\nDiscussionTab.propTypes = {};\n\nexport default injectIntl(DiscussionTab);\n","import { messages as footerMessages } from '@edx/frontend-component-footer';\nimport { messages as headerMessages } from '@edx/frontend-component-header';\nimport { messages as paragonMessages } from '@edx/paragon';\n\nimport arMessages from './messages/ar.json';\nimport frMessages from './messages/fr.json';\nimport es419Messages from './messages/es_419.json';\nimport zhcnMessages from './messages/zh_CN.json';\nimport ptMessages from './messages/pt.json';\nimport itMessages from './messages/it.json';\nimport ukMessages from './messages/uk.json';\nimport deMessages from './messages/de.json';\nimport ruMessages from './messages/ru.json';\nimport hiMessages from './messages/hi.json';\nimport faIRMessages from './messages/fa_IR.json';\nimport frCAMessages from './messages/fr_CA.json';\nimport dedeCAMessages from './messages/de_DE.json';\nimport ititCAMessages from './messages/it_IT.json';\nimport ptptCAMessages from './messages/pt_PT.json';\nimport jajpMessages from './messages/ja-jp.json';\n// no need to import en messages-- they are in the defaultMessage field\n\nconst appMessages = {\n  ar: arMessages,\n  'es-419': es419Messages,\n  fr: frMessages,\n  'zh-cn': zhcnMessages,\n  pt: ptMessages,\n  it: itMessages,\n  de: deMessages,\n  hi: hiMessages,\n  'fa-ir': faIRMessages,\n  'fr-ca': frCAMessages,\n  ru: ruMessages,\n  uk: ukMessages,\n  'de-de': dedeCAMessages,\n  'it-it': ititCAMessages,\n  'pt-pt': ptptCAMessages,\n  'ja-jp': jajpMessages,\n};\n\nexport default [\n  paragonMessages,\n  appMessages,\n  footerMessages,\n  headerMessages,\n];\n","function daycmp(a, b) {\n  if (a.getFullYear() < b.getFullYear()) { return -1; }\n  if (a.getFullYear() > b.getFullYear()) { return 1; }\n  if (a.getMonth() < b.getMonth()) { return -1; }\n  if (a.getMonth() > b.getMonth()) { return 1; }\n  if (a.getDate() < b.getDate()) { return -1; }\n  if (a.getDate() > b.getDate()) { return 1; }\n  return 0;\n}\n\n// item is a date block returned from the API\nfunction isLearnerAssignment(item) {\n  return item.learnerHasAccess && item.dateType === 'assignment-due-date';\n}\n\nexport { daycmp, isLearnerAssignment };\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt } from '@fortawesome/free-regular-svg-icons';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { FormattedDate } from '@edx/frontend-platform/i18n';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useModel } from '../../generic/model-store';\nimport { isLearnerAssignment } from '../dates-tab/utils';\nimport './DateSummary.scss';\n\nconst DateSummary = ({\n  dateBlock,\n  userTimezone,\n}) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    org,\n  } = useModel('courseHomeMeta', courseId);\n\n  const linkedTitle = dateBlock.link && isLearnerAssignment(dateBlock);\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n\n  const logVerifiedUpgradeClick = () => {\n    sendTrackEvent('edx.bi.ecommerce.upsell_links_clicked', {\n      org_key: org,\n      courserun_key: courseId,\n      linkCategory: '(none)',\n      linkName: 'course_home_dates',\n      linkType: 'link',\n      pageName: 'course_home',\n    });\n  };\n\n  return (\n    <li className=\"p-0 mb-3 small text-dark-500\">\n      <div className=\"row\">\n        <FontAwesomeIcon icon={faCalendarAlt} className=\"ml-3 mt-1 mr-1\" fixedWidth />\n        <div className=\"ml-1 font-weight-bold\">\n          <FormattedDate\n            value={dateBlock.date}\n            day=\"numeric\"\n            month=\"short\"\n            weekday=\"short\"\n            year=\"numeric\"\n            {...timezoneFormatArgs}\n          />\n        </div>\n      </div>\n      <div className=\"row ml-4 pr-2\">\n        <div className=\"date-summary-text\">\n          {linkedTitle && (\n            <div className=\"font-weight-bold mt-2\">\n              <a href={dateBlock.link}>{dateBlock.title}</a>\n            </div>\n          )}\n          {!linkedTitle && (\n            <div className=\"font-weight-bold mt-2\">{dateBlock.title}</div>\n          )}\n        </div>\n        {dateBlock.description && (\n          <div className=\"date-summary-text mt-1\">{dateBlock.description}</div>\n        )}\n        {!linkedTitle && dateBlock.link && (\n          <a\n            href={dateBlock.link}\n            onClick={dateBlock.dateType === 'verified-upgrade-deadline' ? logVerifiedUpgradeClick : () => {}}\n            className=\"description-link\"\n          >\n            {dateBlock.linkText}\n          </a>\n        )}\n      </div>\n    </li>\n  );\n};\n\nDateSummary.propTypes = {\n  dateBlock: PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    dateType: PropTypes.string,\n    description: PropTypes.string,\n    link: PropTypes.string,\n    linkText: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    learnerHasAccess: PropTypes.bool,\n  }).isRequired,\n  userTimezone: PropTypes.string,\n};\n\nDateSummary.defaultProps = {\n  userTimezone: null,\n};\n\nexport default DateSummary;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport DateSummary from '../DateSummary';\nimport messages from '../messages';\nimport { useModel } from '../../../generic/model-store';\n\nconst CourseDates = ({\n  intl,\n}) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n  const {\n    datesWidget: {\n      courseDateBlocks,\n      datesTabLink,\n    },\n  } = useModel('outline', courseId);\n\n  if (courseDateBlocks.length === 0) {\n    return null;\n  }\n\n  return (\n    <section className=\"mb-4\">\n      <div id=\"courseHome-dates\">\n        <h2 className=\"h4\">{intl.formatMessage(messages.dates)}</h2>\n        <ol className=\"list-unstyled\">\n          {courseDateBlocks.map((courseDateBlock) => (\n            <DateSummary\n              key={courseDateBlock.title + courseDateBlock.date}\n              dateBlock={courseDateBlock}\n              userTimezone={userTimezone}\n            />\n          ))}\n        </ol>\n        <a className=\"font-weight-bold ml-4 pl-1 small\" href={datesTabLink}>\n          {intl.formatMessage(messages.allDates)}\n        </a>\n      </div>\n    </section>\n  );\n};\n\nCourseDates.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseDates);\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getConfig } from '@edx/frontend-platform';\n\nconst LmsHtmlFragment = ({\n  className,\n  html,\n  title,\n  ...rest\n}) => {\n  const wholePage = `\n    <html>\n      <head>\n        <base href=\"${getConfig().LMS_BASE_URL}\" target=\"_parent\">\n        <link rel=\"stylesheet\" href=\"/static/${getConfig().LEGACY_THEME_NAME ? `${getConfig().LEGACY_THEME_NAME}/` : ''}css/bootstrap/lms-main.css\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"${getConfig().BASE_URL}/static/LmsHtmlFragment.css\">\n      </head>\n      <body class=\"${className}\">${html}</body>\n      <script>\n        const resizer = new ResizeObserver(() => {\n          window.parent.postMessage({type: 'lmshtmlfragment.resize'}, '*');\n        });\n        resizer.observe(document.body);\n      </script>\n    </html>\n  `;\n\n  const iframe = useRef(null);\n  function resetIframeHeight() {\n    if (iframe?.current?.contentWindow?.document?.body) {\n      iframe.current.height = iframe.current.contentWindow.document.body.scrollHeight;\n    }\n  }\n\n  useEffect(() => {\n    function receiveMessage(event) {\n      const { type } = event.data;\n      if (type === 'lmshtmlfragment.resize') {\n        resetIframeHeight();\n      }\n    }\n    global.addEventListener('message', receiveMessage);\n  }, []);\n\n  return (\n    <iframe\n      className=\"w-100 border-0\"\n      onLoad={resetIframeHeight}\n      ref={iframe}\n      referrerPolicy=\"origin\"\n      scrolling=\"no\"\n      srcDoc={wholePage}\n      title={title}\n      {...rest}\n    />\n  );\n};\n\nLmsHtmlFragment.defaultProps = {\n  className: '',\n};\n\nLmsHtmlFragment.propTypes = {\n  className: PropTypes.string,\n  html: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default LmsHtmlFragment;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport LmsHtmlFragment from '../LmsHtmlFragment';\nimport messages from '../messages';\nimport { useModel } from '../../../generic/model-store';\n\nconst CourseHandouts = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    handoutsHtml,\n  } = useModel('outline', courseId);\n\n  if (!handoutsHtml) {\n    return null;\n  }\n\n  return (\n    <section className=\"mb-4\">\n      <h2 className=\"h4\">{intl.formatMessage(messages.handouts)}</h2>\n      <LmsHtmlFragment\n        className=\"small\"\n        html={handoutsHtml}\n        title={intl.formatMessage(messages.handouts)}\n      />\n    </section>\n  );\n};\n\nCourseHandouts.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseHandouts);\n","import React from 'react';\nimport { Button, Card } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { useSelector } from 'react-redux';\nimport { sendTrackingLogEvent } from '@edx/frontend-platform/analytics';\nimport messages from '../messages';\nimport { useModel } from '../../../generic/model-store';\n\nconst StartOrResumeCourseCard = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    org,\n  } = useModel('courseHomeMeta', courseId);\n\n  const eventProperties = {\n    org_key: org,\n    courserun_key: courseId,\n  };\n\n  const {\n    resumeCourse: {\n      hasVisitedCourse,\n      url: resumeCourseUrl,\n    },\n  } = useModel('outline', courseId);\n\n  if (!resumeCourseUrl) {\n    return null;\n  }\n\n  const logResumeCourseClick = () => {\n    sendTrackingLogEvent('edx.course.home.resume_course.clicked', {\n      ...eventProperties,\n      event_type: hasVisitedCourse ? 'resume' : 'start',\n      url: resumeCourseUrl,\n    });\n  };\n\n  return (\n    <Card className=\"mb-3 raised-card\" data-testid=\"start-resume-card\">\n      <Card.Header\n        title={hasVisitedCourse ? intl.formatMessage(messages.resumeBlurb) : intl.formatMessage(messages.startBlurb)}\n        actions={(\n          <Button\n            variant=\"brand\"\n            block\n            href={resumeCourseUrl}\n            onClick={() => logResumeCourseClick()}\n          >\n            {hasVisitedCourse ? intl.formatMessage(messages.resume) : intl.formatMessage(messages.start)}\n          </Button>\n        )}\n      />\n      {/* Footer is needed for internal vertical spacing to work out. If you can remove, be my guest */}\n      {/* eslint-disable-next-line react/jsx-no-useless-fragment */}\n      <Card.Footer><></></Card.Footer>\n    </Card>\n  );\n};\n\nStartOrResumeCourseCard.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(StartOrResumeCourseCard);\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgFlagBlack = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 24,\n  height: 24,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#000\",\n  d: \"M14.4 6 14 4H5v17h2v-7h5.6l.4 2h7V6h-5.6Z\"\n})));\nexport { SvgFlagBlack as ReactComponent };\nexport default __webpack_public_path__ + \"618c66f2320092cb2a787c07147f7146.svg\";","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgFlagOutline = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 15,\n  height: 17,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#002B2B\",\n  d: \"M9.4 2 9 0H0v17h2v-7h5.6l.4 2h7V2H9.4Zm3.6 8H9.64l-.4-2H2V2h5.36l.4 2H13v6Z\"\n})));\nexport { SvgFlagOutline as ReactComponent };\nexport default __webpack_public_path__ + \"5615c2010dc4523a5ca27285b35e4266.svg\";","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgFlagGray = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 15,\n  height: 17,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#002B2B\",\n  d: \"M9.4 2 9 0H0v17h2v-7h5.6l.4 2h7V2H9.4Zm3.6 8H9.64l-.4-2H2V2h5.36l.4 2H13v6Z\"\n})), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M9.66 9.987c-.002-.004-.095-.456-.206-1.004l-.202-.996-3.614-.008-3.615-.008V2.023l2.664.007 2.663.008.197.99.197.988h5.24v5.979h-1.66c-.914 0-1.663-.004-1.665-.008z\",\n  style: {\n    fill: \"gray\",\n    fillRule: \"evenodd\",\n    strokeWidth: 0.0150977\n  }\n}));\nexport { SvgFlagGray as ReactComponent };\nexport default __webpack_public_path__ + \"cb5894908f8fdcc54d5d94bed8c3b7c9.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst FlagButton = ({\n  buttonIcon,\n  title,\n  text,\n  handleSelect,\n  isSelected,\n}) => (\n  <button\n    type=\"button\"\n    className={classnames(\n      'flag-button row w-100 align-content-between m-1.5 py-3.5',\n      isSelected ? 'flag-button-selected' : '',\n    )}\n    aria-checked={isSelected}\n    role=\"radio\"\n    onClick={() => handleSelect()}\n    data-testid={`weekly-learning-goal-input-${title}`}\n  >\n    <div className=\"row w-100 m-0 justify-content-center pb-1\">\n      {buttonIcon}\n    </div>\n    <div className={classnames('row w-100 m-0 justify-content-center small text-gray-700 pb-1', isSelected ? 'font-weight-bold' : '')}>\n      {title}\n    </div>\n    <div className={classnames('row w-100 m-0 justify-content-center micro text-gray-500', isSelected ? 'font-weight-bold' : '')}>\n      {text}\n    </div>\n  </button>\n);\n\nFlagButton.propTypes = {\n  buttonIcon: PropTypes.element.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  isSelected: PropTypes.bool.isRequired,\n};\n\nexport default FlagButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n// These flag svgs are derivatives of the Flag icon from paragon\nimport { ReactComponent as FlagIntenseIcon } from './flag_black.svg';\nimport { ReactComponent as FlagCasualIcon } from './flag_outline.svg';\nimport { ReactComponent as FlagRegularIcon } from './flag_gray.svg';\nimport FlagButton from './FlagButton';\nimport messages from '../messages';\n\nconst LearningGoalButton = ({\n  level,\n  isSelected,\n  handleSelect,\n  intl,\n}) => {\n  const buttonDetails = {\n    casual: {\n      daysPerWeek: 1,\n      title: messages.casualGoalButtonTitle,\n      text: messages.casualGoalButtonText,\n      icon: <FlagCasualIcon />,\n    },\n    regular: {\n      daysPerWeek: 3,\n      title: messages.regularGoalButtonTitle,\n      text: messages.regularGoalButtonText,\n      icon: <FlagRegularIcon />,\n    },\n    intense: {\n      daysPerWeek: 5,\n      title: messages.intenseGoalButtonTitle,\n      text: messages.intenseGoalButtonText,\n      icon: <FlagIntenseIcon />,\n    },\n  };\n\n  const values = buttonDetails[level];\n\n  return (\n    <FlagButton\n      buttonIcon={values.icon}\n      title={intl.formatMessage(values.title)}\n      text={intl.formatMessage(values.text)}\n      handleSelect={() => handleSelect(values.daysPerWeek)}\n      isSelected={isSelected}\n    />\n  );\n};\n\nLearningGoalButton.propTypes = {\n  level: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(LearningGoalButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"xs\":\"0\",\"sm\":\"576px\",\"md\":\"768px\",\"lg\":\"992px\",\"xl\":\"1200px\",\"xxl\":\"1400px\"};","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Form, Card, Icon } from '@edx/paragon';\nimport { history } from '@edx/frontend-platform';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Email } from '@edx/paragon/icons';\nimport { useSelector } from 'react-redux';\nimport messages from '../messages';\nimport LearningGoalButton from './LearningGoalButton';\nimport { saveWeeklyLearningGoal } from '../../data';\nimport { useModel } from '../../../generic/model-store';\nimport './FlagButton.scss';\n\nconst WeeklyLearningGoalCard = ({\n  daysPerWeek,\n  subscribedToReminders,\n  intl,\n}) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    isMasquerading,\n    org,\n  } = useModel('courseHomeMeta', courseId);\n\n  const { administrator } = getAuthenticatedUser();\n\n  const [daysPerWeekGoal, setDaysPerWeekGoal] = useState(daysPerWeek);\n  // eslint-disable-next-line react/prop-types\n  const [isGetReminderSelected, setGetReminderSelected] = useState(subscribedToReminders);\n  const location = useLocation();\n\n  const handleSelect = (days, triggeredFromEmail = false) => {\n    // Set the subscription button if this is the first time selecting a goal\n    const selectReminders = daysPerWeekGoal === null ? true : isGetReminderSelected;\n    setGetReminderSelected(selectReminders);\n    setDaysPerWeekGoal(days);\n    if (!isMasquerading) { // don't save goal updates while masquerading\n      saveWeeklyLearningGoal(courseId, days, selectReminders);\n      sendTrackEvent('edx.ui.lms.goal.days-per-week.changed', {\n        org_key: org,\n        courserun_key: courseId,\n        is_staff: administrator,\n        num_days: days,\n        reminder_selected: selectReminders,\n      });\n      if (triggeredFromEmail) {\n        sendTrackEvent('enrollment.email.clicked.setgoal', {});\n      }\n    }\n  };\n\n  function handleSubscribeToReminders(event) {\n    const isGetReminderChecked = event.target.checked;\n    setGetReminderSelected(isGetReminderChecked);\n    if (!isMasquerading) { // don't save goal updates while masquerading\n      saveWeeklyLearningGoal(courseId, daysPerWeekGoal, isGetReminderChecked);\n      sendTrackEvent('edx.ui.lms.goal.reminder-selected.changed', {\n        org_key: org,\n        courserun_key: courseId,\n        is_staff: administrator,\n        num_days: daysPerWeekGoal,\n        reminder_selected: isGetReminderChecked,\n      });\n    }\n  }\n\n  useEffect(() => {\n    const currentParams = new URLSearchParams(location.search);\n    const weeklyGoal = Number(currentParams.get('weekly_goal'));\n    if ([1, 3, 5].includes(weeklyGoal)) {\n      handleSelect(weeklyGoal, true);\n\n      // Deleting the weekly_goal query param as it only needs to be set once\n      // whenever passed in query params.\n      currentParams.delete('weekly_goal');\n      history.replace({\n        search: currentParams.toString(),\n      });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.search]);\n\n  return (\n    <Card\n      id=\"courseHome-weeklyLearningGoal\"\n      className=\"row w-100 m-0 mb-3 raised-card\"\n      data-testid=\"weekly-learning-goal-card\"\n    >\n      <Card.Header\n        size=\"sm\"\n        title={(<div id=\"set-weekly-goal-header\">{intl.formatMessage(messages.setWeeklyGoal)}</div>)}\n        subtitle={intl.formatMessage(messages.setWeeklyGoalDetail)}\n      />\n      <Card.Section className=\"text-gray-700 small\">\n        <div\n          role=\"radiogroup\"\n          aria-labelledby=\"set-weekly-goal-header\"\n          className=\"flag-button-container m-0 p-0\"\n        >\n          <LearningGoalButton\n            level=\"casual\"\n            isSelected={daysPerWeekGoal === 1}\n            handleSelect={handleSelect}\n          />\n          <LearningGoalButton\n            level=\"regular\"\n            isSelected={daysPerWeekGoal === 3}\n            handleSelect={handleSelect}\n          />\n          <LearningGoalButton\n            level=\"intense\"\n            isSelected={daysPerWeekGoal === 5}\n            handleSelect={handleSelect}\n          />\n        </div>\n        <div className=\"d-flex pt-3\">\n          <Form.Switch\n            checked={isGetReminderSelected}\n            onChange={(event) => handleSubscribeToReminders(event)}\n            disabled={!daysPerWeekGoal}\n          >\n            <small>{intl.formatMessage(messages.setGoalReminder)}</small>\n          </Form.Switch>\n        </div>\n      </Card.Section>\n      {isGetReminderSelected && (\n        <Card.Section muted>\n          <div className=\"row w-100 m-0 small align-center\">\n            <div className=\"d-flex align-items-center pr-1\">\n              <Icon\n                className=\"text-primary-500\"\n                src={Email}\n              />\n            </div>\n            <div className=\"col\">\n              {intl.formatMessage(messages.goalReminderDetail)}\n            </div>\n          </div>\n        </Card.Section>\n      )}\n    </Card>\n  );\n};\n\nWeeklyLearningGoalCard.propTypes = {\n  daysPerWeek: PropTypes.number,\n  subscribedToReminders: PropTypes.bool,\n  intl: intlShape.isRequired,\n};\n\nWeeklyLearningGoalCard.defaultProps = {\n  daysPerWeek: null,\n  subscribedToReminders: false,\n};\nexport default injectIntl(WeeklyLearningGoalCard);\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst slice = createSlice({\n  name: 'tours',\n  initialState: {\n    showCoursewareTour: false,\n    showExistingUserCourseHomeTour: false,\n    showNewUserCourseHomeModal: false,\n    showNewUserCourseHomeTour: false,\n    toursEnabled: false,\n  },\n  reducers: {\n    disableCourseHomeTour: (state) => {\n      state.showNewUserCourseHomeModal = false;\n      state.showNewUserCourseHomeTour = false;\n      state.showExistingUserCourseHomeTour = false;\n    },\n    disableCoursewareTour: (state) => {\n      state.showCoursewareTour = false;\n    },\n    disableNewUserCourseHomeModal: (state) => {\n      state.showNewUserCourseHomeModal = false;\n    },\n    launchCourseHomeTour: (state) => {\n      if (state.showExistingUserCourseHomeTour) {\n        state.showExistingUserCourseHomeTour = false;\n      }\n\n      if (!state.showNewUserCourseHomeModal || !state.showNewUserCourseHomeTour) {\n        state.showNewUserCourseHomeTour = true;\n      }\n    },\n    setTourData: (state, { payload }) => {\n      const {\n        courseHomeTourStatus,\n        showCoursewareTour,\n        toursEnabled,\n      } = payload;\n      state.showCoursewareTour = showCoursewareTour;\n      state.showExistingUserCourseHomeTour = courseHomeTourStatus === 'show-existing-user-tour';\n      state.showNewUserCourseHomeModal = courseHomeTourStatus === 'show-new-user-tour';\n      state.toursEnabled = toursEnabled;\n    },\n  },\n});\n\nexport const {\n  disableCourseHomeTour,\n  disableCoursewareTour,\n  disableNewUserCourseHomeModal,\n  launchCourseHomeTour,\n  setTourData,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  beginTour: {\n    id: 'tours.button.beginTour',\n    defaultMessage: 'Begin tour',\n    description: 'A button used to start a tour of the website',\n  },\n  launchTour: {\n    id: 'tours.button.launchTour',\n    defaultMessage: 'Launch tour',\n    description: 'A button used to launch a tour of the website',\n  },\n  newUserModalBody: {\n    id: 'tours.newUserModal.body',\n    defaultMessage: 'Let’s take a quick tour of {siteName} so you can get the most out of your course.',\n  },\n  newUserModalTitleWelcome: {\n    id: 'tours.newUserModal.title.welcome',\n    defaultMessage: 'Welcome to your',\n    description: 'The beginning of the phrase \"Welcome to your edX course!\"',\n  },\n  skipForNow: {\n    id: 'tours.button.skipForNow',\n    defaultMessage: 'Skip for now',\n    description: 'A button used to dismiss the modal and skip the optional tour of the website',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button, Icon } from '@edx/paragon';\nimport { Compass } from '@edx/paragon/icons';\n\nimport { useModel } from '../../generic/model-store';\nimport { launchCourseHomeTour } from '../data/slice';\nimport messages from '../messages';\n\nconst LaunchCourseHomeTourButton = ({ intl, srOnly }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    org,\n  } = useModel('courseHomeMeta', courseId);\n\n  const {\n    toursEnabled,\n  } = useSelector(state => state.tours);\n\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    const { administrator } = getAuthenticatedUser();\n    sendTrackEvent('edx.ui.lms.launch_tour.clicked', {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n      tour_variant: 'course_home',\n    });\n\n    dispatch(launchCourseHomeTour());\n  };\n\n  return (\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    <>\n      {toursEnabled && (\n        <Button variant=\"link\" size=\"inline\" className={`p-0 ${srOnly && 'sr-only sr-only-focusable'}`} onClick={handleClick}>\n          {!srOnly && (\n            <Icon\n              src={Compass}\n              className=\"mr-2\"\n              style={{ height: '18px', width: '18px' }}\n            />\n          )}\n          {intl.formatMessage(messages.launchTour)}\n        </Button>\n      )}\n    </>\n  );\n};\n\nLaunchCourseHomeTourButton.defaultProps = {\n  srOnly: false,\n};\n\nLaunchCourseHomeTourButton.propTypes = {\n  intl: intlShape.isRequired,\n  srOnly: PropTypes.bool,\n};\n\nexport default injectIntl(LaunchCourseHomeTourButton);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { sendTrackingLogEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faBookmark, faCertificate, faInfo, faCalendar, faStar,\n} from '@fortawesome/free-solid-svg-icons';\nimport { faNewspaper } from '@fortawesome/free-regular-svg-icons';\n\nimport messages from '../messages';\nimport { useModel } from '../../../generic/model-store';\nimport LaunchCourseHomeTourButton from '../../../product-tours/newUserCourseHomeTour/LaunchCourseHomeTourButton';\n\nconst CourseTools = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const { org } = useModel('courseHomeMeta', courseId);\n  const {\n    courseTools,\n  } = useModel('outline', courseId);\n\n  if (courseTools.length === 0) {\n    return null;\n  }\n\n  const eventProperties = {\n    org_key: org,\n    courserun_key: courseId,\n  };\n\n  const logClick = (analyticsId) => {\n    const { administrator } = getAuthenticatedUser();\n    sendTrackingLogEvent('edx.course.tool.accessed', {\n      ...eventProperties,\n      course_id: courseId, // should only be courserun_key, but left as-is for historical reasons\n      is_staff: administrator,\n      tool_name: analyticsId,\n    });\n  };\n\n  const renderIcon = (iconClasses) => {\n    switch (iconClasses) {\n      case 'edx.bookmarks':\n        return faBookmark;\n      case 'edx.tool.verified_upgrade':\n        return faCertificate;\n      case 'edx.tool.financial_assistance':\n        return faInfo;\n      case 'edx.calendar-sync':\n        return faCalendar;\n      case 'edx.updates':\n        return faNewspaper;\n      case 'edx.reviews':\n        return faStar;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <section className=\"mb-4\">\n      <h2 className=\"h4\">{intl.formatMessage(messages.tools)}</h2>\n      <ul className=\"list-unstyled\">\n        {courseTools.map((courseTool) => (\n          <li key={courseTool.analyticsId} className=\"small\">\n            <a href={courseTool.url} onClick={() => logClick(courseTool.analyticsId)}>\n              <FontAwesomeIcon icon={renderIcon(courseTool.analyticsId)} className=\"mr-2\" fixedWidth />\n              {courseTool.title}\n            </a>\n          </li>\n        ))}\n        <li className=\"small\" id=\"courseHome-launchTourLink\">\n          <LaunchCourseHomeTourButton />\n        </li>\n      </ul>\n    </section>\n  );\n};\n\nCourseTools.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseTools);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  activities: {\n    id: 'learning.effortEstimation.activities',\n    defaultMessage: '{activityCount, plural, one {# activity} other {# activities}}',\n  },\n  minutesAbbreviated: {\n    id: 'learning.effortEstimation.minutesAbbreviated',\n    defaultMessage: '{minuteCount, plural, one {# min} other {# min}}',\n    description: 'Number of minutes in a casual, shorthand manner: 5 min',\n  },\n  minutesFull: {\n    id: 'learning.effortEstimation.minutesFull',\n    defaultMessage: '{minuteCount, plural, one {# minute} other {# minutes}}',\n    description: 'Number of minutes spelled out: 5 minutes',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\n\n// This component shows an effort estimate provided by the backend block data. Either time, activities, or both.\n\nconst EffortEstimate = (props) => {\n  const {\n    block: {\n      effortActivities,\n      effortTime,\n    },\n    className,\n    intl,\n  } = props;\n\n  const minuteCount = Math.ceil(effortTime / 60); // effortTime is in seconds\n  const minutesAbbreviated = intl.formatMessage(messages.minutesAbbreviated, { minuteCount });\n  const minutesFull = intl.formatMessage(messages.minutesFull, { minuteCount });\n  const minutes = (\n    <>\n      <span aria-hidden=\"true\">{minutesAbbreviated}</span>\n      <span className=\"sr-only\">{minutesFull}</span>\n    </>\n  );\n  const activities = intl.formatMessage(messages.activities, { activityCount: effortActivities });\n  let content = null;\n\n  if (effortTime && effortActivities) {\n    content = (\n      <FormattedMessage\n        id=\"learning.effortEstimation.combinedEstimate\"\n        defaultMessage=\"{minutes} + {activities}\"\n        description=\"You can likely leave this alone, unless you want to use a full width plus or similar change\"\n        values={{ activities, minutes }}\n      />\n    );\n  } else if (effortTime) {\n    content = minutes;\n  } else if (effortActivities) {\n    content = activities;\n  } else {\n    return null;\n  }\n\n  return (\n    <span\n      className={classNames('text-gray-500 text-monospace', className)}\n      style={{ fontSize: '0.8em' }}\n    >\n      {content}\n    </span>\n  );\n};\n\nEffortEstimate.defaultProps = {\n  className: null,\n};\n\nEffortEstimate.propTypes = {\n  block: PropTypes.shape({\n    effortActivities: PropTypes.number,\n    effortTime: PropTypes.number,\n  }).isRequired,\n  className: PropTypes.string,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(EffortEstimate);\n","import EffortEstimate from './EffortEstimate';\n\nexport default EffortEstimate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport {\n  FormattedMessage,\n  FormattedTime,\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { faCheckCircle as fasCheckCircle } from '@fortawesome/free-solid-svg-icons';\nimport { faCheckCircle as farCheckCircle } from '@fortawesome/free-regular-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport EffortEstimate from '../../shared/effort-estimate';\nimport { useModel } from '../../generic/model-store';\nimport messages from './messages';\n\nconst SequenceLink = ({\n  id,\n  intl,\n  courseId,\n  first,\n  sequence,\n}) => {\n  const {\n    complete,\n    description,\n    due,\n    showLink,\n    title,\n  } = sequence;\n  const {\n    userTimezone,\n  } = useModel('outline', courseId);\n\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n\n  const coursewareUrl = <Link to={`/course/${courseId}/${id}`}>{title}</Link>;\n  const displayTitle = showLink ? coursewareUrl : title;\n\n  const dueDateMessage = (\n    <FormattedMessage\n      id=\"learning.outline.sequence-due-date-set\"\n      defaultMessage=\"{description} due {assignmentDue}\"\n      description=\"Used below an assignment title\"\n      values={{\n        assignmentDue: (\n          <FormattedTime\n            key={`${id}-due`}\n            day=\"numeric\"\n            month=\"short\"\n            year=\"numeric\"\n            timeZoneName=\"short\"\n            value={due}\n            {...timezoneFormatArgs}\n          />\n        ),\n        description: description || '',\n      }}\n    />\n  );\n\n  const noDueDateMessage = (\n    <FormattedMessage\n      id=\"learning.outline.sequence-due-date-not-set\"\n      defaultMessage=\"{description}\"\n      description=\"Used below an assignment title\"\n      values={{\n        assignmentDue: (\n          <FormattedTime\n            key={`${id}-due`}\n            day=\"numeric\"\n            month=\"short\"\n            year=\"numeric\"\n            timeZoneName=\"short\"\n            value={due}\n            {...timezoneFormatArgs}\n          />\n        ),\n        description: description || '',\n      }}\n    />\n  );\n\n  return (\n    <li>\n      <div className={classNames('', { 'mt-2 pt-2 border-top border-light': !first })}>\n        <div className=\"row w-100 m-0\">\n          <div className=\"col-auto p-0\">\n            {complete ? (\n              <FontAwesomeIcon\n                icon={fasCheckCircle}\n                fixedWidth\n                className=\"float-left text-success mt-1\"\n                aria-hidden=\"true\"\n                title={intl.formatMessage(messages.completedAssignment)}\n              />\n            ) : (\n              <FontAwesomeIcon\n                icon={farCheckCircle}\n                fixedWidth\n                className=\"float-left text-gray-400 mt-1\"\n                aria-hidden=\"true\"\n                title={intl.formatMessage(messages.incompleteAssignment)}\n              />\n            )}\n          </div>\n          <div className=\"col-10 p-0 ml-3 text-break\">\n            <span className=\"align-middle\">{displayTitle}</span>\n            <span className=\"sr-only\">\n              , {intl.formatMessage(complete ? messages.completedAssignment : messages.incompleteAssignment)}\n            </span>\n            <EffortEstimate className=\"ml-3 align-middle\" block={sequence} />\n          </div>\n        </div>\n        <div className=\"row w-100 m-0 ml-3 pl-3\">\n          <small className=\"text-body pl-2\">\n            {due ? dueDateMessage : noDueDateMessage}\n          </small>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nSequenceLink.propTypes = {\n  id: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n  first: PropTypes.bool.isRequired,\n  sequence: PropTypes.shape().isRequired,\n};\n\nexport default injectIntl(SequenceLink);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Collapsible, IconButton } from '@edx/paragon';\nimport { faCheckCircle as fasCheckCircle, faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { faCheckCircle as farCheckCircle } from '@fortawesome/free-regular-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport SequenceLink from './SequenceLink';\nimport { useModel } from '../../generic/model-store';\n\nimport genericMessages from '../../generic/messages';\nimport messages from './messages';\n\nconst Section = ({\n  courseId,\n  defaultOpen,\n  expand,\n  intl,\n  section,\n}) => {\n  const {\n    complete,\n    sequenceIds,\n    title,\n  } = section;\n  const {\n    courseBlocks: {\n      sequences,\n    },\n  } = useModel('outline', courseId);\n\n  const [open, setOpen] = useState(defaultOpen);\n\n  useEffect(() => {\n    setOpen(expand);\n  }, [expand]);\n\n  useEffect(() => {\n    setOpen(defaultOpen);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const sectionTitle = (\n    <div className=\"row w-100 m-0\">\n      <div className=\"col-auto p-0\">\n        {complete ? (\n          <FontAwesomeIcon\n            icon={fasCheckCircle}\n            fixedWidth\n            className=\"float-left mt-1 text-success\"\n            aria-hidden=\"true\"\n            title={intl.formatMessage(messages.completedSection)}\n          />\n        ) : (\n          <FontAwesomeIcon\n            icon={farCheckCircle}\n            fixedWidth\n            className=\"float-left mt-1 text-gray-400\"\n            aria-hidden=\"true\"\n            title={intl.formatMessage(messages.incompleteSection)}\n          />\n        )}\n      </div>\n      <div className=\"col-10 ml-3 p-0 font-weight-bold text-dark-500\">\n        <span className=\"align-middle\">{title}</span>\n        <span className=\"sr-only\">\n          , {intl.formatMessage(complete ? messages.completedSection : messages.incompleteSection)}\n        </span>\n      </div>\n    </div>\n  );\n\n  return (\n    <li>\n      <Collapsible\n        className=\"mb-2\"\n        styling=\"card-lg\"\n        title={sectionTitle}\n        open={open}\n        onToggle={() => { setOpen(!open); }}\n        iconWhenClosed={(\n          <IconButton\n            alt={intl.formatMessage(messages.openSection)}\n            icon={faPlus}\n            onClick={() => { setOpen(true); }}\n            size=\"sm\"\n          />\n        )}\n        iconWhenOpen={(\n          <IconButton\n            alt={intl.formatMessage(genericMessages.close)}\n            icon={faMinus}\n            onClick={() => { setOpen(false); }}\n            size=\"sm\"\n          />\n        )}\n      >\n        <ol className=\"list-unstyled\">\n          {sequenceIds.map((sequenceId, index) => (\n            <SequenceLink\n              key={sequenceId}\n              id={sequenceId}\n              courseId={courseId}\n              sequence={sequences[sequenceId]}\n              first={index === 0}\n            />\n          ))}\n        </ol>\n      </Collapsible>\n    </li>\n  );\n};\n\nSection.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  defaultOpen: PropTypes.bool.isRequired,\n  expand: PropTypes.bool.isRequired,\n  intl: intlShape.isRequired,\n  section: PropTypes.shape().isRequired,\n};\n\nexport default injectIntl(Section);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  suggestedSchedule: {\n    id: 'datesBanner.suggestedSchedule',\n    defaultMessage: 'We’ve built a suggested schedule to help you stay on track. But don’t worry—it’s flexible so you'\n      + ' can learn at your own pace.',\n    description: 'Messaging that explain the gaol and the effect fo the suggested schedule',\n  },\n  upgradeToCompleteHeader: {\n    id: 'datesBanner.upgradeToCompleteGradedBanner.header',\n    defaultMessage: 'Upgrade to unlock',\n    description: 'Messaging that prompts users to upgrade their course status in order to access locked course content',\n  },\n  upgradeToCompleteBody: {\n    id: 'datesBanner.upgradeToCompleteGradedBanner.body',\n    defaultMessage: 'You are auditing this course, which means that you are unable to participate in graded'\n      + ' assignments. To complete graded assignments as part of this course, you can upgrade today.',\n    description: 'It explain the effect of upgrading the course',\n  },\n  upgradeToCompleteButton: {\n    id: 'datesBanner.upgradeToCompleteGradedBanner.button',\n    defaultMessage: 'Upgrade now',\n    description: 'Button that prompts users to upgrade their course status',\n  },\n  upgradeToShiftBody: {\n    id: 'datesBanner.upgradeToResetBanner.body',\n    defaultMessage: 'To keep yourself on track, you can update this schedule and shift the past due assignments into'\n      + ' the future. Don’t worry—you won’t lose any of the progress you’ve made when you shift your due dates.',\n    description: 'Text that explain the consequences of resetting dates when learner needs to upgrade to do so',\n  },\n  upgradeToShiftButton: {\n    id: 'datesBanner.upgradeToResetBanner.button',\n    defaultMessage: 'Upgrade to shift due dates',\n    description: 'Button that prompts users to upgrade their course status before they can shift their due dates into'\n      + ' the future',\n  },\n  missedDeadlines: {\n    id: 'datesBanner.resetDatesBanner.header',\n    defaultMessage: 'It looks like you missed some important deadlines based on our suggested schedule.',\n    description: 'Text shown when leaner missed assignment due date',\n  },\n  shiftDatesBody: {\n    id: 'datesBanner.resetDatesBanner.body',\n    defaultMessage: 'To keep yourself on track, you can update this schedule and shift the past due assignments into'\n      + ' the future. Don’t worry—you won’t lose any of the progress you’ve made when you shift your due dates.',\n    description: 'Text that explain the consequences of resetting dates',\n  },\n  shiftDatesButton: {\n    id: 'datesBanner.resetDatesBanner.button',\n    defaultMessage: 'Shift due dates',\n    description: 'Button that prompts users to move their due dates into the future',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Alert,\n  Button,\n  Row,\n  Col,\n} from '@edx/paragon';\n\nimport { resetDeadlines } from '../data';\nimport { useModel } from '../../generic/model-store';\nimport messages from './messages';\n\nconst ShiftDatesAlert = ({ fetch, intl, model }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    datesBannerInfo,\n    hasEnded,\n  } = useModel(model, courseId);\n\n  const {\n    missedDeadlines,\n    missedGatedContent,\n  } = datesBannerInfo;\n\n  const dispatch = useDispatch();\n\n  if (!missedDeadlines || missedGatedContent || hasEnded) {\n    return null;\n  }\n\n  return (\n    <Alert variant=\"warning\">\n      <Row className=\"w-100 m-0\">\n        <Col xs={12} md={9} className=\"small p-0 pr-md-2\">\n          <strong>{intl.formatMessage(messages.missedDeadlines)}</strong>\n          {' '}{intl.formatMessage(messages.shiftDatesBody)}\n        </Col>\n        <Col xs={12} md={3} className=\"align-self-center text-right mt-3 mt-md-0 p-0\">\n          <Button\n            variant=\"primary\"\n            size=\"sm\"\n            className=\"w-xs-100 w-md-auto\"\n            onClick={() => dispatch(resetDeadlines(courseId, model, fetch))}\n          >\n            {intl.formatMessage(messages.shiftDatesButton)}\n          </Button>\n        </Col>\n      </Row>\n    </Alert>\n  );\n};\n\nShiftDatesAlert.propTypes = {\n  fetch: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n  model: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(ShiftDatesAlert);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  srPrices: {\n    id: 'learning.offer.screenReaderPrices', // historic id\n    defaultMessage: 'Original price: {originalPrice}, discount price: {discountedPrice}',\n  },\n  srInlinePrices: {\n    id: 'learning.upgradeButton.screenReaderInlinePrices',\n    defaultMessage: 'Original price: {originalPrice}',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\n\nconst FormattedPricing = (props) => {\n  const {\n    inline,\n    intl,\n    offer,\n    verifiedMode,\n  } = props;\n\n  let currencySymbol;\n  if (verifiedMode) {\n    currencySymbol = verifiedMode.currencySymbol;\n  }\n\n  if (!offer) {\n    const {\n      price,\n    } = verifiedMode;\n    return `${currencySymbol}${price}`;\n  }\n\n  const {\n    discountedPrice,\n    originalPrice,\n  } = offer;\n\n  // The inline style is meant for being embedded in a sentence - it bolds the discount and leaves the original price\n  // as a parenthetical. The normal styling is more suited for a button, where the price and discount are side by side.\n  if (inline) {\n    return (\n      <>\n        <span className=\"font-weight-bold\">{discountedPrice}</span>\n        &nbsp;(\n        <span className=\"sr-only\">\n          {intl.formatMessage(messages.srInlinePrices, { originalPrice })}\n        </span>\n        <span aria-hidden=\"true\">\n          <del>{originalPrice}</del>\n        </span>\n        )\n      </>\n    );\n  }\n\n  return (\n    <>\n      <span className=\"sr-only\">\n        {intl.formatMessage(messages.srPrices, { discountedPrice, originalPrice })}\n      </span>\n      <span aria-hidden=\"true\">\n        <span>{discountedPrice}</span> (<del>{originalPrice}</del>)\n      </span>\n    </>\n  );\n};\n\nFormattedPricing.defaultProps = {\n  inline: false,\n  offer: null,\n  verifiedMode: null,\n};\n\nFormattedPricing.propTypes = {\n  inline: PropTypes.bool,\n  intl: intlShape.isRequired,\n  offer: PropTypes.shape({\n    discountedPrice: PropTypes.string.isRequired,\n    originalPrice: PropTypes.string.isRequired,\n    upgradeUrl: PropTypes.string.isRequired,\n  }),\n  verifiedMode: PropTypes.shape({\n    currencySymbol: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    upgradeUrl: PropTypes.string.isRequired,\n  }),\n};\n\nexport default injectIntl(FormattedPricing);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\n\nimport FormattedPricing from './FormattedPricing';\n\nconst UpgradeButton = (props) => {\n  const {\n    intl,\n    offer,\n    variant,\n    onClick,\n    verifiedMode,\n    ...rest\n  } = props;\n\n  // Prefer offer's url in case it is ever different (though it is not at time of this writing)\n  const url = offer ? offer.upgradeUrl : verifiedMode.upgradeUrl;\n\n  return (\n    <Button\n      variant={variant}\n      href={url}\n      onClick={onClick}\n      {...rest}\n    >\n      <div>\n        <FormattedMessage\n          id=\"learning.upgradeButton.buttonText\"\n          defaultMessage=\"Upgrade for {pricing}\"\n          values={{\n            pricing: (\n              <FormattedPricing\n                offer={offer}\n                verifiedMode={verifiedMode}\n              />\n            ),\n          }}\n        />\n      </div>\n    </Button>\n  );\n};\n\nUpgradeButton.defaultProps = {\n  offer: null,\n  onClick: null,\n  variant: 'primary',\n};\n\nUpgradeButton.propTypes = {\n  intl: intlShape.isRequired,\n  offer: PropTypes.shape({\n    upgradeUrl: PropTypes.string.isRequired,\n  }),\n  onClick: PropTypes.func,\n  verifiedMode: PropTypes.shape({\n    upgradeUrl: PropTypes.string.isRequired,\n  }).isRequired,\n  variant: PropTypes.string,\n};\n\nexport default injectIntl(UpgradeButton);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\n\nimport FormattedPricing from './FormattedPricing';\n\nconst UpgradeNowButton = (props) => {\n  const {\n    intl,\n    offer,\n    variant,\n    onClick,\n    verifiedMode,\n    ...rest\n  } = props;\n\n  // Prefer offer's url in case it is different (might hold a coupon code that the normal does not)\n  const url = offer ? offer.upgradeUrl : verifiedMode.upgradeUrl;\n\n  return (\n    <Button\n      variant={variant}\n      href={url}\n      onClick={onClick}\n      {...rest}\n    >\n      <FormattedMessage\n        id=\"learning.upgradeNowButton.buttonText\"\n        defaultMessage=\"Upgrade now for {pricing}\"\n        values={{\n          pricing: (\n            <FormattedPricing\n              offer={offer}\n              verifiedMode={verifiedMode}\n            />\n          ),\n        }}\n      />\n    </Button>\n  );\n};\n\nUpgradeNowButton.defaultProps = {\n  offer: null,\n  onClick: null,\n  variant: 'primary',\n};\n\nUpgradeNowButton.propTypes = {\n  intl: intlShape.isRequired,\n  offer: PropTypes.shape({\n    upgradeUrl: PropTypes.string.isRequired,\n  }),\n  onClick: PropTypes.func,\n  verifiedMode: PropTypes.shape({\n    upgradeUrl: PropTypes.string.isRequired,\n  }).isRequired,\n  variant: PropTypes.string,\n};\n\nexport default injectIntl(UpgradeNowButton);\n","import React from 'react';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { getConfig } from '@edx/frontend-platform';\n\nconst CheckmarkBullet = () => (\n  <span className=\"fa-li\"><FontAwesomeIcon icon={faCheck} /></span>\n);\n\n// Must be child of a <ul className=\"fa-ul\">\nexport const VerifiedCertBullet = () => {\n  const verifiedCertLink = (\n    <a className=\"inline-link-underline font-weight-bold\" rel=\"noopener noreferrer\" target=\"_blank\" href={`${getConfig().MARKETING_SITE_BASE_URL}/verified-certificate`}>\n      <FormattedMessage\n        id=\"learning.generic.upsell.verifiedCertBullet.verifiedCert\"\n        defaultMessage=\"verified certificate\"\n        description=\"Bolded words 'verified certificate', which is the name of credential the learner receives.\"\n      />\n    </a>\n  );\n  return (\n    <li className=\"upsell-bullet\">\n      <CheckmarkBullet />\n      <FormattedMessage\n        id=\"learning.generic.upsell.verifiedCertBullet\"\n        defaultMessage=\"Earn a {verifiedCertLink} of completion to showcase on your resumé\"\n        description=\"Bullet showcasing benefit of earned credential.\"\n        values={{ verifiedCertLink }}\n      />\n    </li>\n  );\n};\n\n// Must be child of a <ul className=\"fa-ul\">\nexport const UnlockGradedBullet = () => {\n  const gradedAssignmentsInBoldText = (\n    <span className=\"font-weight-bold\">\n      <FormattedMessage\n        id=\"learning.generic.upsell.unlockGradedBullet.gradedAssignments\"\n        defaultMessage=\"graded assignments\"\n        description=\"Bolded words 'graded assignments', which are the bolded portion of a bullet point highlighting that course content is unlocked when purchasing an upgrade. Graded assignments are any course content that is graded and are unlocked by upgrading to verified certificates.\"\n      />\n    </span>\n  );\n  return (\n    <li className=\"upsell-bullet\">\n      <CheckmarkBullet />\n      <FormattedMessage\n        id=\"learning.generic.upsell.unlockGradedBullet\"\n        defaultMessage=\"Unlock your access to all course activities, including {gradedAssignmentsInBoldText}\"\n        description=\"Bullet showcasing benefit of additional course material.\"\n        values={{ gradedAssignmentsInBoldText }}\n      />\n    </li>\n  );\n};\n\n// Must be child of a <ul className=\"fa-ul\">\nexport const FullAccessBullet = () => {\n  const fullAccessInBoldText = (\n    <span className=\"font-weight-bold\">\n      <FormattedMessage\n        id=\"learning.generic.upsell.fullAccessBullet.fullAccess\"\n        defaultMessage=\"Full access\"\n        description=\"Bolded phrase 'Full access', which is the bolded portion of a bullet point highlighting that access to course content will not have time limits.\"\n      />\n    </span>\n  );\n  return (\n    <li className=\"upsell-bullet\">\n      <CheckmarkBullet />\n      <FormattedMessage\n        id=\"learning.generic.upsell.fullAccessBullet\"\n        defaultMessage=\"{fullAccessInBoldText} to course content and materials, even after the course ends\"\n        description=\"Bullet showcasing upgrade lifts access durations.\"\n        values={{ fullAccessInBoldText }}\n      />\n    </li>\n  );\n};\n\n// Must be child of a <ul className=\"fa-ul\">\nexport const SupportMissionBullet = () => {\n  const missionInBoldText = (\n    <span className=\"font-weight-bold\">\n      <FormattedMessage\n        id=\"learning.generic.upsell.supportMissionBullet.mission\"\n        defaultMessage=\"mission\"\n        description=\"Bolded word 'mission', which is the bolded portion of a bullet point encouraging the learner to support the goals of the website.\"\n      />\n    </span>\n  );\n  return (\n    <li className=\"upsell-bullet\">\n      <CheckmarkBullet />\n      <FormattedMessage\n        id=\"learning.generic.upsell.supportMissionBullet\"\n        defaultMessage=\"Support our {missionInBoldText} at {siteName}\"\n        description=\"Bullet encouraging user to support edX's goals.\"\n        values={{ missionInBoldText, siteName: getConfig().SITE_NAME }}\n      />\n    </li>\n  );\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { sendTrackEvent, sendTrackingLogEvent } from '@edx/frontend-platform/analytics';\nimport { FormattedDate, FormattedMessage, injectIntl } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\nimport { setLocalStorage } from '../../data/localStorage';\nimport { UpgradeButton } from '../upgrade-button';\nimport {\n  VerifiedCertBullet,\n  UnlockGradedBullet,\n  FullAccessBullet,\n  SupportMissionBullet,\n} from '../upsell-bullets/UpsellBullets';\n\nconst UpsellNoFBECardContent = () => (\n  <ul className=\"fa-ul upgrade-notification-ul pt-0\">\n    <VerifiedCertBullet />\n    <SupportMissionBullet />\n  </ul>\n);\n\nconst UpsellFBEFarAwayCardContent = () => (\n  <ul className=\"fa-ul upgrade-notification-ul\">\n    <VerifiedCertBullet />\n    <UnlockGradedBullet />\n    <FullAccessBullet />\n    <SupportMissionBullet />\n  </ul>\n);\n\nconst UpsellFBESoonCardContent = ({ accessExpirationDate, timezoneFormatArgs }) => {\n  const includingAnyProgress = (\n    <span className=\"font-weight-bold\">\n      <FormattedMessage\n        id=\"learning.generic.upgradeNotification.expirationAccessLoss.progress\"\n        defaultMessage=\"including any progress\"\n      />\n    </span>\n  );\n\n  const date = (\n    <FormattedDate\n      key=\"accessDate\"\n      day=\"numeric\"\n      month=\"long\"\n      value={new Date(accessExpirationDate)}\n      {...timezoneFormatArgs}\n    />\n  );\n\n  const benefitsOfUpgrading = (\n    <a className=\"inline-link-underline font-weight-bold\" rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://support.edx.org/hc/en-us/articles/360013426573-What-are-the-differences-between-audit-free-and-verified-paid-courses-\">\n      <FormattedMessage\n        id=\"learning.generic.upgradeNotification.expirationVerifiedCert.benefits\"\n        defaultMessage=\"benefits of upgrading\"\n      />\n    </a>\n  );\n\n  return (\n    <div className=\"upgrade-notification-text\">\n      <p>\n        <FormattedMessage\n          id=\"learning.generic.upgradeNotification.expirationAccessLoss\"\n          defaultMessage=\"You will lose all access to this course, {includingAnyProgress}, on {date}.\"\n          values={{\n            includingAnyProgress,\n            date,\n          }}\n        />\n      </p>\n      <p>\n        <FormattedMessage\n          id=\"learning.generic.upgradeNotification.expirationVerifiedCert\"\n          defaultMessage=\"Upgrading your course enables you to pursue a verified certificate and unlocks numerous features. Learn more about the {benefitsOfUpgrading}.\"\n          values={{ benefitsOfUpgrading }}\n        />\n      </p>\n    </div>\n  );\n};\n\nUpsellFBESoonCardContent.propTypes = {\n  accessExpirationDate: PropTypes.PropTypes.instanceOf(Date).isRequired,\n  timezoneFormatArgs: PropTypes.shape({\n    timeZone: PropTypes.string,\n  }),\n};\n\nUpsellFBESoonCardContent.defaultProps = {\n  timezoneFormatArgs: {},\n};\n\nconst PastExpirationCardContent = () => (\n  <div className=\"upgrade-notification-text\">\n    <p>\n      <FormattedMessage\n        id=\"learning.generic.upgradeNotification.pastExpiration.content\"\n        defaultMessage=\"The upgrade deadline for this course passed. To upgrade, enroll in the next available session.\"\n      />\n    </p>\n  </div>\n);\n\nconst ExpirationCountdown = ({\n  courseId, hoursToExpiration, setupgradeNotificationCurrentState, type,\n}) => {\n  let expirationText;\n  if (hoursToExpiration >= 24) { // More than 1 day left\n    // setupgradeNotificationCurrentState is available in NotificationTray (not course home)\n    if (setupgradeNotificationCurrentState) {\n      if (type === 'access') {\n        setupgradeNotificationCurrentState('accessDaysLeft');\n        setLocalStorage(`upgradeNotificationCurrentState.${courseId}`, 'accessDaysLeft');\n      }\n      if (type === 'offer') {\n        setupgradeNotificationCurrentState('FPDdaysLeft');\n        setLocalStorage(`upgradeNotificationCurrentState.${courseId}`, 'FPDdaysLeft');\n      }\n    }\n    expirationText = (\n      <FormattedMessage\n        id=\"learning.generic.upgradeNotification.expirationDays\"\n        defaultMessage={`{dayCount, number} {dayCount, plural, \n          one {day}\n          other {days}} left`}\n        values={{\n          dayCount: (Math.floor(hoursToExpiration / 24)),\n        }}\n      />\n    );\n  } else if (hoursToExpiration >= 1) { // More than 1 hour left\n    // setupgradeNotificationCurrentState is available in NotificationTray (not course home)\n    if (setupgradeNotificationCurrentState) {\n      if (type === 'access') {\n        setupgradeNotificationCurrentState('accessHoursLeft');\n        setLocalStorage(`upgradeNotificationCurrentState.${courseId}`, 'accessHoursLeft');\n      }\n      if (type === 'offer') {\n        setupgradeNotificationCurrentState('FPDHoursLeft');\n        setLocalStorage(`upgradeNotificationCurrentState.${courseId}`, 'FPDHoursLeft');\n      }\n    }\n    expirationText = (\n      <FormattedMessage\n        id=\"learning.generic.upgradeNotification.expirationHours\"\n        defaultMessage={`{hourCount, number} {hourCount, plural,\n          one {hour}\n          other {hours}} left`}\n        values={{\n          hourCount: (hoursToExpiration),\n        }}\n      />\n    );\n  } else { // Less than 1 hour\n    // setupgradeNotificationCurrentState is available in NotificationTray (not course home)\n    if (setupgradeNotificationCurrentState) {\n      if (type === 'access') {\n        setupgradeNotificationCurrentState('accessLastHour');\n        setLocalStorage(`upgradeNotificationCurrentState.${courseId}`, 'accessLastHour');\n      }\n      if (type === 'offer') {\n        setupgradeNotificationCurrentState('FPDLastHour');\n        setLocalStorage(`upgradeNotificationCurrentState.${courseId}`, 'FPDLastHour');\n      }\n    }\n    expirationText = (\n      <FormattedMessage\n        id=\"learning.generic.upgradeNotification.expirationMinutes\"\n        defaultMessage=\"Less than 1 hour left\"\n      />\n    );\n  }\n  return (<div className=\"upsell-warning\">{expirationText}</div>);\n};\n\nExpirationCountdown.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  hoursToExpiration: PropTypes.number.isRequired,\n  setupgradeNotificationCurrentState: PropTypes.func,\n  type: PropTypes.string,\n};\nExpirationCountdown.defaultProps = {\n  setupgradeNotificationCurrentState: null,\n  type: null,\n};\n\nconst AccessExpirationDateBanner = ({\n  courseId, accessExpirationDate, timezoneFormatArgs, setupgradeNotificationCurrentState,\n}) => {\n  if (setupgradeNotificationCurrentState) {\n    setupgradeNotificationCurrentState('accessDateView');\n    setLocalStorage(`upgradeNotificationCurrentState.${courseId}`, 'accessDateView');\n  }\n  return (\n    <div className=\"upsell-warning-light\">\n      <FormattedMessage\n        id=\"learning.generic.upgradeNotification.expiration\"\n        defaultMessage=\"Course access will expire {date}\"\n        values={{\n          date: (\n            <FormattedDate\n              key=\"accessExpireDate\"\n              day=\"numeric\"\n              month=\"long\"\n              value={accessExpirationDate}\n              {...timezoneFormatArgs}\n            />\n          ),\n        }}\n      />\n    </div>\n  );\n};\n\nAccessExpirationDateBanner.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  accessExpirationDate: PropTypes.PropTypes.instanceOf(Date).isRequired,\n  timezoneFormatArgs: PropTypes.shape({\n    timeZone: PropTypes.string,\n  }),\n  setupgradeNotificationCurrentState: PropTypes.func,\n};\n\nAccessExpirationDateBanner.defaultProps = {\n  timezoneFormatArgs: {},\n  setupgradeNotificationCurrentState: null,\n};\n\nconst PastExpirationDateBanner = ({\n  courseId, accessExpirationDate, timezoneFormatArgs, setupgradeNotificationCurrentState,\n}) => {\n  if (setupgradeNotificationCurrentState) {\n    setupgradeNotificationCurrentState('PastExpirationDate');\n    setLocalStorage(`upgradeNotificationCurrentState.${courseId}`, 'PastExpirationDate');\n  }\n  return (\n    <div className=\"upsell-warning\">\n      <FormattedMessage\n        id=\"learning.generic.upgradeNotification.pastExpiration.banner\"\n        defaultMessage=\"Upgrade deadline passed on {date}\"\n        values={{\n          date: (\n            <FormattedDate\n              key=\"accessExpireDate\"\n              day=\"numeric\"\n              month=\"long\"\n              value={accessExpirationDate}\n              {...timezoneFormatArgs}\n            />\n          ),\n        }}\n      />\n    </div>\n  );\n};\n\nPastExpirationDateBanner.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  accessExpirationDate: PropTypes.PropTypes.instanceOf(Date).isRequired,\n  timezoneFormatArgs: PropTypes.shape({\n    timeZone: PropTypes.string,\n  }),\n  setupgradeNotificationCurrentState: PropTypes.func,\n};\n\nPastExpirationDateBanner.defaultProps = {\n  timezoneFormatArgs: {},\n  setupgradeNotificationCurrentState: null,\n};\n\nconst UpgradeNotification = ({\n  accessExpiration,\n  contentTypeGatingEnabled,\n  marketingUrl,\n  courseId,\n  offer,\n  org,\n  setupgradeNotificationCurrentState,\n  shouldDisplayBorder,\n  timeOffsetMillis,\n  upsellPageName,\n  userTimezone,\n  verifiedMode,\n}) => {\n  const dateNow = Date.now();\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n  const correctedTime = new Date(dateNow + timeOffsetMillis);\n  const accessExpirationDate = accessExpiration ? new Date(accessExpiration.expirationDate) : null;\n  const pastExpirationDeadline = accessExpiration ? new Date(dateNow) > accessExpirationDate : false;\n\n  const eventProperties = {\n    org_key: org,\n    courserun_key: courseId,\n  };\n\n  const promotionEventProperties = {\n    creative: 'sidebarupsell',\n    name: 'In-Course Verification Prompt',\n    position: 'sidebar-message',\n    promotion_id: 'courseware_verified_certificate_upsell',\n    ...eventProperties,\n  };\n\n  useEffect(() => {\n    sendTrackingLogEvent('edx.bi.course.upgrade.sidebarupsell.displayed', eventProperties);\n    sendTrackEvent('Promotion Viewed', promotionEventProperties);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!verifiedMode) {\n    return null;\n  }\n\n  const logClick = () => {\n    sendTrackingLogEvent('edx.bi.course.upgrade.sidebarupsell.clicked', eventProperties);\n    sendTrackingLogEvent('edx.course.enrollment.upgrade.clicked', {\n      ...eventProperties,\n      location: 'sidebar-message',\n    });\n    sendTrackEvent('Promotion Clicked', promotionEventProperties);\n    sendTrackEvent('edx.bi.ecommerce.upsell_links_clicked', {\n      ...eventProperties,\n      linkCategory: 'green_upgrade',\n      linkName: `${upsellPageName}_green`,\n      linkType: 'button',\n      pageName: upsellPageName,\n    });\n  };\n\n  const logClickPastExpiration = () => {\n    sendTrackEvent('edx.bi.ecommerce.upgrade_notification.past_expiration.button_clicked', {\n      ...eventProperties,\n      linkCategory: 'upgrade_notification',\n      linkName: `${upsellPageName}_course_details`,\n      linkType: 'button',\n      pageName: upsellPageName,\n    });\n  };\n\n  /*\n  There are 5 parts that change in the upgrade card:\n    upgradeNotificationHeaderText\n    expirationBanner\n    upsellMessage\n    callToActionButton\n    offerCode\n  */\n  let upgradeNotificationHeaderText;\n  let expirationBanner;\n  let upsellMessage;\n  let callToActionButton;\n  let offerCode;\n\n  if (!!accessExpiration && !!contentTypeGatingEnabled) {\n    const hoursToAccessExpiration = Math.floor((accessExpirationDate - correctedTime) / 1000 / 60 / 60);\n\n    if (hoursToAccessExpiration >= (7 * 24)) {\n      if (offer) { // countdown to the first purchase discount if there is one\n        const hoursToDiscountExpiration = Math.floor((new Date(offer.expirationDate) - correctedTime) / 1000 / 60 / 60);\n        upgradeNotificationHeaderText = (\n          <FormattedMessage\n            id=\"learning.generic.upgradeNotification.firstTimeLearnerDiscount\"\n            defaultMessage=\"{percentage}% First-Time Learner Discount\"\n            values={{\n              percentage: (offer.percentage),\n            }}\n          />\n        );\n        expirationBanner = (\n          <ExpirationCountdown\n            courseId={courseId}\n            hoursToExpiration={hoursToDiscountExpiration}\n            setupgradeNotificationCurrentState={setupgradeNotificationCurrentState}\n            type=\"offer\"\n          />\n        );\n      } else {\n        upgradeNotificationHeaderText = (\n          <FormattedMessage\n            id=\"learning.generic.upgradeNotification.accessExpiration\"\n            defaultMessage=\"Upgrade your course today\"\n          />\n        );\n        expirationBanner = (\n          <AccessExpirationDateBanner\n            courseId={courseId}\n            accessExpirationDate={accessExpirationDate}\n            timezoneFormatArgs={timezoneFormatArgs}\n            setupgradeNotificationCurrentState={setupgradeNotificationCurrentState}\n          />\n        );\n      }\n      upsellMessage = <UpsellFBEFarAwayCardContent />;\n    } else if (hoursToAccessExpiration < (7 * 24) && hoursToAccessExpiration >= 0) {\n      // more urgent messaging if there's less than 7 days left to access expiration\n      upgradeNotificationHeaderText = (\n        <FormattedMessage\n          id=\"learning.generic.upgradeNotification.accessExpirationUrgent\"\n          defaultMessage=\"Course Access Expiration\"\n        />\n      );\n      expirationBanner = (\n        <ExpirationCountdown\n          courseId={courseId}\n          hoursToExpiration={hoursToAccessExpiration}\n          setupgradeNotificationCurrentState={setupgradeNotificationCurrentState}\n          type=\"access\"\n        />\n      );\n      upsellMessage = (\n        <UpsellFBESoonCardContent\n          accessExpirationDate={accessExpirationDate}\n          timezoneFormatArgs={timezoneFormatArgs}\n        />\n      );\n    } else { // access expiration deadline has passed\n      upgradeNotificationHeaderText = (\n        <FormattedMessage\n          id=\"learning.generic.upgradeNotification.accessExpirationPast\"\n          defaultMessage=\"Course Access Expiration\"\n        />\n      );\n      expirationBanner = (\n        <PastExpirationDateBanner\n          courseId={courseId}\n          accessExpirationDate={accessExpirationDate}\n          timezoneFormatArgs={timezoneFormatArgs}\n          setupgradeNotificationCurrentState={setupgradeNotificationCurrentState}\n        />\n      );\n      upsellMessage = (\n        <PastExpirationCardContent />\n      );\n    }\n  } else { // FBE is turned off\n    upgradeNotificationHeaderText = (\n      <FormattedMessage\n        id=\"learning.generic.upgradeNotification.pursueAverifiedCertificate\"\n        defaultMessage=\"Pursue a verified certificate\"\n      />\n    );\n    upsellMessage = (<UpsellNoFBECardContent />);\n  }\n\n  if (pastExpirationDeadline) {\n    callToActionButton = (\n      <Button\n        variant=\"primary\"\n        onClick={logClickPastExpiration}\n        href={marketingUrl}\n        block\n      >\n        View Course Details\n      </Button>\n    );\n  } else {\n    callToActionButton = (\n      <UpgradeButton\n        offer={offer}\n        onClick={logClick}\n        verifiedMode={verifiedMode}\n        block\n      />\n    );\n  }\n\n  if (offer) { // if there's a first purchase discount, message the code at the bottom\n    offerCode = (\n      <div className=\"text-center discount-info\">\n        <FormattedMessage\n          id=\"learning.generic.upgradeNotification.code\"\n          defaultMessage=\"Use code {code} at checkout\"\n          values={{\n            code: (<span className=\"font-weight-bold\">{offer.code}</span>),\n          }}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <section className={classNames('upgrade-notification small', { 'card mb-4': shouldDisplayBorder })}>\n      <div id=\"courseHome-upgradeNotification\">\n        <h2 className=\"h5 upgrade-notification-header\" id=\"outline-sidebar-upgrade-header\">\n          {upgradeNotificationHeaderText}\n        </h2>\n        {expirationBanner}\n        <div className=\"upgrade-notification-message\">\n          {upsellMessage}\n        </div>\n        <div className=\"upgrade-notification-button\">\n          {callToActionButton}\n        </div>\n        {offerCode}\n      </div>\n    </section>\n  );\n};\n\nUpgradeNotification.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  org: PropTypes.string.isRequired,\n  accessExpiration: PropTypes.shape({\n    expirationDate: PropTypes.string,\n  }),\n  contentTypeGatingEnabled: PropTypes.bool,\n  marketingUrl: PropTypes.string,\n  offer: PropTypes.shape({\n    expirationDate: PropTypes.string,\n    percentage: PropTypes.number,\n    code: PropTypes.string,\n  }),\n  shouldDisplayBorder: PropTypes.bool,\n  setupgradeNotificationCurrentState: PropTypes.func,\n  timeOffsetMillis: PropTypes.number,\n  upsellPageName: PropTypes.string.isRequired,\n  userTimezone: PropTypes.string,\n  verifiedMode: PropTypes.shape({\n    currencySymbol: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    upgradeUrl: PropTypes.string.isRequired,\n  }),\n};\n\nUpgradeNotification.defaultProps = {\n  accessExpiration: null,\n  contentTypeGatingEnabled: false,\n  marketingUrl: null,\n  offer: null,\n  setupgradeNotificationCurrentState: null,\n  shouldDisplayBorder: null,\n  timeOffsetMillis: 0,\n  userTimezone: null,\n  verifiedMode: null,\n};\n\nexport default injectIntl(UpgradeNotification);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Alert,\n  Button,\n  Row,\n  Col,\n} from '@edx/paragon';\n\nimport { useModel } from '../../generic/model-store';\nimport messages from './messages';\n\nconst UpgradeToShiftDatesAlert = ({ intl, logUpgradeLinkClick, model }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    datesBannerInfo,\n    hasEnded,\n  } = useModel(model, courseId);\n\n  const {\n    contentTypeGatingEnabled,\n    missedDeadlines,\n    missedGatedContent,\n    verifiedUpgradeLink,\n  } = datesBannerInfo;\n\n  if (!(contentTypeGatingEnabled && missedDeadlines && missedGatedContent && verifiedUpgradeLink) || hasEnded) {\n    return null;\n  }\n\n  return (\n    <Alert className=\"bg-light-200\">\n      <Row className=\"w-100 m-0\">\n        <Col xs={12} md={9} className=\"small p-0 pr-md-2\">\n          <strong>{intl.formatMessage(messages.missedDeadlines)}</strong>\n          {' '}{intl.formatMessage(messages.upgradeToShiftBody)}\n        </Col>\n        <Col xs={12} md={3} className=\"align-self-center text-right mt-3 mt-md-0 p-0\">\n          <Button\n            variant=\"brand\"\n            size=\"sm\"\n            className=\"w-xs-100 w-md-auto\"\n            onClick={() => {\n              logUpgradeLinkClick();\n              global.location.replace(verifiedUpgradeLink);\n            }}\n          >\n            {intl.formatMessage(messages.upgradeToShiftButton)}\n          </Button>\n        </Col>\n      </Row>\n    </Alert>\n  );\n};\n\nUpgradeToShiftDatesAlert.propTypes = {\n  intl: intlShape.isRequired,\n  logUpgradeLinkClick: PropTypes.func,\n  model: PropTypes.string.isRequired,\n};\n\nUpgradeToShiftDatesAlert.defaultProps = {\n  logUpgradeLinkClick: () => {},\n};\n\nexport default injectIntl(UpgradeToShiftDatesAlert);\n","import React, { useMemo } from 'react';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { useAlert } from '../../../../generic/user-messages';\nimport { useModel } from '../../../../generic/model-store';\n\nimport { CERT_STATUS_TYPE } from './CertificateStatusAlert';\n\nconst CertificateStatusAlert = React.lazy(() => import('./CertificateStatusAlert'));\n\nfunction verifyCertStatusType(status) {\n  switch (status) {\n    case CERT_STATUS_TYPE.DOWNLOADABLE:\n    case CERT_STATUS_TYPE.EARNED_NOT_AVAILABLE:\n    case CERT_STATUS_TYPE.REQUESTING:\n    case CERT_STATUS_TYPE.UNVERIFIED:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction useCertificateStatusAlert(courseId) {\n  const VERIFIED_MODES = {\n    PROFESSIONAL: 'professional',\n    VERIFIED: 'verified',\n    NO_ID_PROFESSIONAL_MODE: 'no-id-professional',\n    CREDIT_MODE: 'credit',\n    MASTERS: 'masters',\n    EXECUTIVE_EDUCATION: 'executive-education',\n  };\n\n  const {\n    isEnrolled,\n    org,\n    tabs,\n  } = useModel('courseHomeMeta', courseId);\n\n  const {\n    datesWidget: {\n      courseDateBlocks,\n    },\n    certData,\n    hasEnded,\n    userHasPassingGrade,\n    userTimezone,\n    enrollmentMode,\n  } = useModel('outline', courseId);\n\n  const {\n    certStatus,\n    certWebViewUrl,\n    certificateAvailableDate,\n  } = certData || {};\n  const endBlock = courseDateBlocks.find(b => b.dateType === 'course-end-date');\n  const isVerifiedEnrollmentMode = (\n    enrollmentMode !== null\n    && enrollmentMode !== undefined\n    && !!Object.values(VERIFIED_MODES).find(mode => mode === enrollmentMode)\n  );\n  let certURL = '';\n  if (certWebViewUrl) {\n    certURL = `${getConfig().LMS_BASE_URL}${certWebViewUrl}`;\n  }\n  const hasAlertingCertStatus = verifyCertStatusType(certStatus);\n\n  // Only show if:\n  // - there is a known cert status that we want provide status on.\n  // - Or the course has ended and the learner does not have a passing grade.\n  const isVisible = isEnrolled && hasAlertingCertStatus;\n  const notPassingCourseEnded = (\n    isEnrolled\n    && isVerifiedEnrollmentMode\n    && !hasAlertingCertStatus\n    && hasEnded\n    && !userHasPassingGrade\n  );\n  const payload = useMemo(() => ({\n    certificateAvailableDate,\n    certURL,\n    certStatus,\n    courseId,\n    courseEndDate: endBlock && endBlock.date,\n    userTimezone,\n    org,\n    notPassingCourseEnded,\n    tabs,\n  }), [certStatus, certURL, certificateAvailableDate, courseId,\n    endBlock, notPassingCourseEnded, org, tabs, userTimezone]);\n\n  useAlert(isVisible || notPassingCourseEnded, {\n    code: 'clientCertificateStatusAlert',\n    payload,\n    topic: 'outline-course-alerts',\n  });\n\n  return {\n    clientCertificateStatusAlert: CertificateStatusAlert,\n  };\n}\n\nexport default useCertificateStatusAlert;\n","/* eslint-disable import/prefer-default-export */\nimport React, { useMemo } from 'react';\nimport { useAlert } from '../../../../generic/user-messages';\nimport { useModel } from '../../../../generic/model-store';\n\nconst CourseEndAlert = React.lazy(() => import('./CourseEndAlert'));\n\n// period of time (in ms) before end of course during which we alert\nconst WARNING_PERIOD_MS = 14 * 24 * 60 * 60 * 1000; // 14 days\n\nexport function useCourseEndAlert(courseId) {\n  const {\n    isEnrolled,\n  } = useModel('courseHomeMeta', courseId);\n  const {\n    datesWidget: {\n      courseDateBlocks,\n    },\n    userTimezone,\n  } = useModel('outline', courseId);\n\n  const endBlock = courseDateBlocks.find(b => b.dateType === 'course-end-date');\n  const endDate = endBlock ? new Date(endBlock.date) : null;\n  const delta = endBlock ? endDate - new Date() : 0;\n  const isVisible = isEnrolled && endBlock && delta > 0 && delta < WARNING_PERIOD_MS;\n  const payload = useMemo(() => ({\n    description: endBlock && endBlock.description,\n    endDate: endBlock && endBlock.date,\n    userTimezone,\n  }), [endBlock, userTimezone]);\n\n  useAlert(isVisible, {\n    code: 'clientCourseEndAlert',\n    payload,\n    topic: 'outline-course-alerts',\n  });\n\n  return {\n    clientCourseEndAlert: CourseEndAlert,\n  };\n}\n","import React, { useMemo } from 'react';\nimport { useAlert } from '../../generic/user-messages';\nimport { useModel } from '../../generic/model-store';\n\nconst CourseStartAlert = React.lazy(() => import('./CourseStartAlert'));\nconst CourseStartMasqueradeBanner = React.lazy(() => import('./CourseStartMasqueradeBanner'));\n\nfunction IsStartDateInFuture(courseId) {\n  const {\n    start,\n  } = useModel('courseHomeMeta', courseId);\n\n  const today = new Date();\n  const startDate = new Date(start);\n  return startDate > today;\n}\n\nfunction useCourseStartAlert(courseId) {\n  const {\n    isEnrolled,\n  } = useModel('courseHomeMeta', courseId);\n\n  const isVisible = isEnrolled && IsStartDateInFuture(courseId);\n\n  const payload = useMemo(() => ({\n    courseId,\n  }), [courseId]);\n\n  useAlert(isVisible, {\n    code: 'clientCourseStartAlert',\n    payload,\n    topic: 'outline-course-alerts',\n  });\n\n  return {\n    clientCourseStartAlert: CourseStartAlert,\n  };\n}\n\nexport function useCourseStartMasqueradeBanner(courseId, tab) {\n  const {\n    isMasquerading,\n  } = useModel('courseHomeMeta', courseId);\n\n  const isVisible = isMasquerading && tab === 'progress' && IsStartDateInFuture(courseId);\n\n  const payload = useMemo(() => ({\n    courseId,\n  }), [courseId]);\n\n  useAlert(isVisible, {\n    code: 'clientCourseStartMasqueradeBanner',\n    payload,\n    topic: 'instructor-toolbar-alerts',\n  });\n\n  return {\n    clientCourseStartMasqueradeBanner: CourseStartMasqueradeBanner,\n  };\n}\n\nexport default useCourseStartAlert;\n","/* eslint-disable import/prefer-default-export */\nimport React, { useContext, useMemo } from 'react';\nimport { AppContext } from '@edx/frontend-platform/react';\nimport { ALERT_TYPES, useAlert } from '../../../../generic/user-messages';\nimport { useModel } from '../../../../generic/model-store';\n\nconst PrivateCourseAlert = React.lazy(() => import('./PrivateCourseAlert'));\n\nexport function usePrivateCourseAlert(courseId) {\n  const { authenticatedUser } = useContext(AppContext);\n  const course = useModel('courseHomeMeta', courseId);\n  const outline = useModel('outline', courseId);\n  const enrolledUser = course && course.isEnrolled !== undefined && course.isEnrolled;\n  const privateOutline = outline && outline.courseBlocks && !outline.courseBlocks.courses;\n  /**\n   * This alert should render if the user is not enrolled AND\n   *    1. the user is anonymous AND the outline is private, OR\n   *    2. the user is authenticated.\n   * */\n  const isVisible = !enrolledUser && (privateOutline || authenticatedUser !== null);\n  const payload = useMemo(() => ({\n    anonymousUser: authenticatedUser === null,\n    canEnroll: outline && outline.enrollAlert ? outline.enrollAlert.canEnroll : false,\n    courseId,\n  }), [authenticatedUser, courseId, outline]);\n\n  useAlert(isVisible, {\n    code: 'clientPrivateCourseAlert',\n    dismissible: false,\n    payload,\n    topic: 'outline-private-alerts',\n    type: ALERT_TYPES.WELCOME,\n  });\n\n  return { clientPrivateCourseAlert: PrivateCourseAlert };\n}\n","import React, { useMemo } from 'react';\n\nimport { useAlert } from '../../../../generic/user-messages';\nimport { useModel } from '../../../../generic/model-store';\n\nconst ScheduledContentAlert = React.lazy(() => import('./ScheduledCotentAlert'));\n\nconst useScheduledContentAlert = (courseId) => {\n  const {\n    courseBlocks: {\n      courses,\n    },\n    datesWidget: {\n      datesTabLink,\n    },\n  } = useModel('outline', courseId);\n\n  const hasScheduledContent = (\n    !!courses\n    && !!Object.values(courses).find(course => course.hasScheduledContent === true)\n  );\n  const { isEnrolled } = useModel('courseHomeMeta', courseId);\n  const payload = useMemo(() => ({\n    datesTabLink,\n  }), [datesTabLink]);\n  useAlert(hasScheduledContent && isEnrolled, {\n    code: 'ScheduledContentAlert',\n    payload,\n    topic: 'outline-course-alerts',\n  });\n\n  return { ScheduledContentAlert };\n};\n\nexport default useScheduledContentAlert;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Alert, Button, TransitionReplace } from '@edx/paragon';\nimport truncate from 'truncate-html';\n\nimport { useDispatch } from 'react-redux';\nimport LmsHtmlFragment from '../LmsHtmlFragment';\nimport messages from '../messages';\nimport { useModel } from '../../../generic/model-store';\nimport { dismissWelcomeMessage } from '../../data/thunks';\n\nconst WelcomeMessage = ({ courseId, intl }) => {\n  const {\n    welcomeMessageHtml,\n  } = useModel('outline', courseId);\n\n  const [display, setDisplay] = useState(true);\n\n  const shortWelcomeMessageHtml = truncate(welcomeMessageHtml, 100, { byWords: true, keepWhitespaces: true });\n  const messageCanBeShortened = shortWelcomeMessageHtml.length < welcomeMessageHtml.length;\n  const [showShortMessage, setShowShortMessage] = useState(messageCanBeShortened);\n  const dispatch = useDispatch();\n\n  if (!welcomeMessageHtml) {\n    return null;\n  }\n\n  return (\n    <Alert\n      data-testid=\"alert-container-welcome\"\n      variant=\"light\"\n      stacked\n      dismissible\n      show={display}\n      onClose={() => {\n        setDisplay(false);\n        dispatch(dismissWelcomeMessage(courseId));\n      }}\n      className=\"raised-card\"\n      actions={messageCanBeShortened ? [\n        <Button\n          onClick={() => setShowShortMessage(!showShortMessage)}\n          variant=\"outline-primary\"\n        >\n          {showShortMessage ? intl.formatMessage(messages.welcomeMessageShowMoreButton)\n            : intl.formatMessage(messages.welcomeMessageShowLessButton)}\n        </Button>,\n      ] : []}\n    >\n      <TransitionReplace className=\"mb-3\" enterDuration={400} exitDuration={200}>\n        {showShortMessage ? (\n          <LmsHtmlFragment\n            className=\"inline-link\"\n            data-testid=\"short-welcome-message-iframe\"\n            key=\"short-html\"\n            html={shortWelcomeMessageHtml}\n            title={intl.formatMessage(messages.welcomeMessage)}\n          />\n        ) : (\n          <LmsHtmlFragment\n            className=\"inline-link\"\n            data-testid=\"long-welcome-message-iframe\"\n            key=\"full-html\"\n            html={welcomeMessageHtml}\n            title={intl.formatMessage(messages.welcomeMessage)}\n          />\n        )}\n      </TransitionReplace>\n    </Alert>\n  );\n};\n\nWelcomeMessage.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(WelcomeMessage);\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport camelCase from 'lodash.camelcase';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\n\nimport messages from '../messages';\nimport { getProctoringInfoData } from '../../data/api';\nimport { fetchProctoringInfoResolved } from '../../data/slice';\nimport { useModel } from '../../../generic/model-store';\n\nconst ProctoringInfoPanel = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    username,\n  } = useModel('courseHomeMeta', courseId);\n  const dispatch = useDispatch();\n\n  const [link, setLink] = useState('');\n  const [onboardingPastDue, setOnboardingPastDue] = useState(false);\n  const [showInfoPanel, setShowInfoPanel] = useState(false);\n  const [status, setStatus] = useState('');\n  const [readableStatus, setReadableStatus] = useState('');\n  const [releaseDate, setReleaseDate] = useState(null);\n\n  const readableStatuses = {\n    notStarted: 'notStarted',\n    started: 'started',\n    submitted: 'submitted',\n    verified: 'verified',\n    rejected: 'rejected',\n    error: 'error',\n    otherCourseApproved: 'otherCourseApproved',\n    expiringSoon: 'expiringSoon',\n    expired: 'expired',\n  };\n\n  function getReadableStatusClass(examStatus) {\n    let readableClass = '';\n    if (['created', 'download_software_clicked', 'ready_to_start'].includes(examStatus) || !examStatus) {\n      readableClass = readableStatuses.notStarted;\n    } else if (['started', 'ready_to_submit'].includes(examStatus)) {\n      readableClass = readableStatuses.started;\n    } else if (['second_review_required', 'submitted'].includes(examStatus)) {\n      readableClass = readableStatuses.submitted;\n    } else {\n      const examStatusCamelCase = camelCase(examStatus);\n      if (examStatusCamelCase in readableStatuses) {\n        readableClass = readableStatuses[examStatusCamelCase];\n      }\n    }\n    return readableClass;\n  }\n\n  function isCurrentlySubmitted(examStatus) {\n    const SUBMITTED_STATES = ['submitted', 'second_review_required'];\n    return SUBMITTED_STATES.includes(examStatus);\n  }\n\n  function isSubmissionRequired(examStatus) {\n    const OK_STATES = [readableStatuses.submitted, readableStatuses.verified];\n    return !OK_STATES.includes(examStatus);\n  }\n\n  function isNotYetReleased(examReleaseDate) {\n    if (!examReleaseDate) {\n      return false;\n    }\n    const now = new Date();\n    return now < examReleaseDate;\n  }\n\n  function getBorderClass() {\n    let borderClass = '';\n    if ([readableStatuses.submitted, readableStatuses.expiringSoon].includes(readableStatus)) {\n      borderClass = 'proctoring-onboarding-submitted';\n    } else if ([readableStatuses.verified, readableStatuses.otherCourseApproved].includes(readableStatus)) {\n      borderClass = 'proctoring-onboarding-success';\n    }\n    return borderClass;\n  }\n\n  function isExpired(dateString) {\n    // Returns true if the expiration date has passed\n    const today = new Date();\n    const expirationDateObject = new Date(dateString);\n    return today >= expirationDateObject.getTime();\n  }\n\n  function isExpiringSoon(dateString) {\n    // Returns true if the expiration date is within 28 days\n    const twentyeightDays = 28 * 24 * 60 * 60 * 1000;\n    const today = new Date();\n    const expirationDateObject = new Date(dateString);\n    return today > expirationDateObject.getTime() - twentyeightDays;\n  }\n\n  useEffect(() => {\n    getProctoringInfoData(courseId, username)\n      .then(\n        response => {\n          if (response) {\n            if (Object.keys(response).length > 0) {\n              setShowInfoPanel(true);\n            }\n\n            setStatus(response.onboarding_status);\n            setLink(response.onboarding_link);\n            const expirationDate = response.expiration_date;\n            if (expirationDate && isExpired(expirationDate)) {\n              setReadableStatus(getReadableStatusClass('expired'));\n            } else if (expirationDate && isExpiringSoon(expirationDate)) {\n              setReadableStatus(getReadableStatusClass('expiringSoon'));\n            } else {\n              setReadableStatus(getReadableStatusClass(response.onboarding_status));\n            }\n            setReleaseDate(new Date(response.onboarding_release_date));\n            setOnboardingPastDue(response.onboarding_past_due);\n          }\n        },\n      )\n      .catch(() => {\n        /* Do nothing. API throws 404 when class does not have proctoring */\n      })\n      .finally(() => {\n        dispatch(fetchProctoringInfoResolved());\n      });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let onboardingExamButton = null;\n\n  if (isNotYetReleased(releaseDate)) {\n    onboardingExamButton = (\n      <Button variant=\"secondary\" block disabled aria-disabled=\"true\">\n        {intl.formatMessage(\n          messages.proctoringOnboardingButtonNotOpen,\n          {\n            releaseDate: intl.formatDate(releaseDate, {\n              day: 'numeric',\n              month: 'short',\n              year: 'numeric',\n            }),\n          },\n        )}\n      </Button>\n    );\n  } else if (onboardingPastDue) {\n    onboardingExamButton = (\n      <Button variant=\"secondary\" block disabled aria-disabled=\"true\">\n        {intl.formatMessage(messages.proctoringOnboardingButtonPastDue)}\n      </Button>\n    );\n  } else if (!isNotYetReleased(releaseDate)) {\n    if (readableStatus === readableStatuses.otherCourseApproved) {\n      onboardingExamButton = (\n        <Button variant=\"primary\" block href={link}>\n          {intl.formatMessage(messages.proctoringOnboardingPracticeButton)}\n        </Button>\n      );\n    } else if (readableStatus !== readableStatuses.otherCourseApproved) {\n      onboardingExamButton = (\n        <Button variant=\"primary\" block href={link}>\n          {intl.formatMessage(messages.proctoringOnboardingButton)}\n        </Button>\n      );\n    }\n  }\n\n  return (\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    <>\n      { showInfoPanel && (\n        <section className={`mb-4 p-3 outline-sidebar-proctoring-panel ${getBorderClass()}`}>\n          <h2 className=\"h4\" id=\"outline-sidebar-upgrade-header\">{intl.formatMessage(messages.proctoringInfoPanel)}</h2>\n          <div>\n            {readableStatus && (\n              <>\n                <p className=\"h6\">\n                  {intl.formatMessage(messages.proctoringCurrentStatus)} {intl.formatMessage(messages[`${readableStatus}ProctoringStatus`])}\n                </p>\n                <p>\n                  {intl.formatMessage(messages[`${readableStatus}ProctoringMessage`])}\n                </p>\n                <p>\n                  {readableStatus === readableStatuses.otherCourseApproved && intl.formatMessage(messages[`${readableStatus}ProctoringDetail`])}\n                </p>\n              </>\n            )}\n            {![readableStatuses.verified, readableStatuses.otherCourseApproved].includes(readableStatus) && (\n              <>\n                <p>\n                  {!isCurrentlySubmitted(status) && (\n                    intl.formatMessage(messages.proctoringPanelGeneralInfo)\n                  )}\n                  {isCurrentlySubmitted(status) && (\n                    intl.formatMessage(messages.proctoringPanelGeneralInfoSubmitted)\n                  )}\n                </p>\n                <p>{intl.formatMessage(messages.proctoringPanelGeneralTime)}</p>\n              </>\n            )}\n            {isSubmissionRequired(readableStatus) && (\n              onboardingExamButton\n            )}\n            <Button variant=\"outline-primary\" block href=\"https://support.edx.org/hc/en-us/sections/115004169247-Taking-Timed-and-Proctored-Exams\">\n              {intl.formatMessage(messages.proctoringReviewRequirementsButton)}\n            </Button>\n          </div>\n        </section>\n      )}\n    </>\n  );\n};\n\nProctoringInfoPanel.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ProctoringInfoPanel);\n","import { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient, getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { getTimeOffsetMillis } from '../../course-home/data/api';\nimport { appendBrowserTimezoneToUrl } from '../../utils';\n\nexport function normalizeLearningSequencesData(learningSequencesData) {\n  const models = {\n    courses: {},\n    sections: {},\n    sequences: {},\n  };\n\n  const now = new Date();\n  function isReleased(block) {\n    // We check whether the backend marks this as accessible because staff users are granted access anyway.\n    // Note that sections don't have the `accessible` field and will just be checking `effective_start`.\n    return block.accessible || !block.effective_start || now >= Date.parse(block.effective_start);\n  }\n\n  // Sequences\n  Object.entries(learningSequencesData.outline.sequences).forEach(([seqId, sequence]) => {\n    if (!isReleased(sequence)) {\n      return; // Don't let the learner see unreleased sequences\n    }\n\n    models.sequences[seqId] = {\n      id: seqId,\n      title: sequence.title,\n    };\n  });\n\n  // Sections\n  learningSequencesData.outline.sections.forEach(section => {\n    // Filter out any ignored sequences (e.g. unreleased sequences)\n    const availableSequenceIds = section.sequence_ids.filter(seqId => seqId in models.sequences);\n\n    // If we are unreleased and already stripped out all our children, just don't show us at all.\n    // (We check both release date and children because children will exist for an unreleased section even for staff,\n    // so we still want to show this section.)\n    if (!isReleased(section) && availableSequenceIds.length === 0) {\n      return;\n    }\n\n    models.sections[section.id] = {\n      id: section.id,\n      title: section.title,\n      sequenceIds: availableSequenceIds,\n      courseId: learningSequencesData.course_key,\n    };\n\n    // Add back-references to this section for all child sequences.\n    availableSequenceIds.forEach(childSeqId => {\n      models.sequences[childSeqId].sectionId = section.id;\n    });\n  });\n\n  // Course\n  models.courses[learningSequencesData.course_key] = {\n    id: learningSequencesData.course_key,\n    title: learningSequencesData.title,\n    sectionIds: Object.entries(models.sections).map(([sectionId]) => sectionId),\n\n    // Scan through all the sequences and look for ones that aren't released yet.\n    hasScheduledContent: Object.values(learningSequencesData.outline.sequences).some(seq => !isReleased(seq)),\n  };\n\n  return models;\n}\n\n// Do not add further calls to this API - we don't like making use of the modulestore if we can help it\nexport async function getSequenceForUnitDeprecated(courseId, unitId) {\n  const authenticatedUser = getAuthenticatedUser();\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/courses/v2/blocks/`);\n  url.searchParams.append('course_id', courseId);\n  url.searchParams.append('username', authenticatedUser ? authenticatedUser.username : '');\n  url.searchParams.append('depth', 3);\n  url.searchParams.append('requested_fields', 'children,discussions_url');\n\n  const { data } = await getAuthenticatedHttpClient().get(url.href, {});\n  const parent = Object.values(data.blocks).find(block => block.type === 'sequential' && block.children.includes(unitId));\n  return parent?.id;\n}\n\nexport async function getLearningSequencesOutline(courseId) {\n  const outlineUrl = new URL(`${getConfig().LMS_BASE_URL}/api/learning_sequences/v1/course_outline/${courseId}`);\n  const { data } = await getAuthenticatedHttpClient().get(outlineUrl.href, {});\n  return normalizeLearningSequencesData(data);\n}\n\nfunction normalizeMetadata(metadata) {\n  const requestTime = Date.now();\n  const responseTime = requestTime;\n  const { data, headers } = metadata;\n  return {\n    accessExpiration: camelCaseObject(data.access_expiration),\n    canShowUpgradeSock: data.can_show_upgrade_sock,\n    contentTypeGatingEnabled: data.content_type_gating_enabled,\n    courseGoals: camelCaseObject(data.course_goals),\n    id: data.id,\n    title: data.name,\n    offer: camelCaseObject(data.offer),\n    enrollmentStart: data.enrollment_start,\n    enrollmentEnd: data.enrollment_end,\n    end: data.end,\n    start: data.start,\n    enrollmentMode: data.enrollment.mode,\n    isEnrolled: data.enrollment.is_active,\n    license: data.license,\n    userTimezone: data.user_timezone,\n    showCalculator: data.show_calculator,\n    notes: camelCaseObject(data.notes),\n    marketingUrl: data.marketing_url,\n    celebrations: camelCaseObject(data.celebrations),\n    userHasPassingGrade: data.user_has_passing_grade,\n    courseExitPageIsActive: data.course_exit_page_is_active,\n    certificateData: camelCaseObject(data.certificate_data),\n    entranceExamData: camelCaseObject(data.entrance_exam_data),\n    timeOffsetMillis: getTimeOffsetMillis(headers && headers.date, requestTime, responseTime),\n    verifyIdentityUrl: data.verify_identity_url,\n    verificationStatus: data.verification_status,\n    linkedinAddToProfileUrl: data.linkedin_add_to_profile_url,\n    relatedPrograms: camelCaseObject(data.related_programs),\n    userNeedsIntegritySignature: data.user_needs_integrity_signature,\n    canAccessProctoredExams: data.can_access_proctored_exams,\n    learningAssistantEnabled: data.learning_assistant_enabled,\n  };\n}\n\nexport async function getCourseMetadata(courseId) {\n  let url = `${getConfig().LMS_BASE_URL}/api/courseware/course/${courseId}`;\n  url = appendBrowserTimezoneToUrl(url);\n  const metadata = await getAuthenticatedHttpClient().get(url);\n  return normalizeMetadata(metadata);\n}\n\nfunction normalizeSequenceMetadata(sequence) {\n  return {\n    sequence: {\n      id: sequence.item_id,\n      blockType: sequence.tag,\n      unitIds: sequence.items.map(unit => unit.id),\n      bannerText: sequence.banner_text,\n      format: sequence.format,\n      title: sequence.display_name,\n      /*\n      Example structure of gated_content when prerequisites exist:\n      {\n        prereq_id: 'id of the prereq section',\n        prereq_url: 'unused by this frontend',\n        prereq_section_name: 'Name of the prerequisite section',\n        gated: true,\n        gated_section_name: 'Name of this gated section',\n      */\n      gatedContent: camelCaseObject(sequence.gated_content),\n      isTimeLimited: sequence.is_time_limited,\n      isProctored: sequence.is_proctored,\n      isHiddenAfterDue: sequence.is_hidden_after_due,\n      // Position comes back from the server 1-indexed. Adjust here.\n      activeUnitIndex: sequence.position ? sequence.position - 1 : 0,\n      saveUnitPosition: sequence.save_position,\n      showCompletion: sequence.show_completion,\n      allowProctoringOptOut: sequence.allow_proctoring_opt_out,\n    },\n    units: sequence.items.map(unit => ({\n      id: unit.id,\n      sequenceId: sequence.item_id,\n      bookmarked: unit.bookmarked,\n      complete: unit.complete,\n      title: unit.page_title,\n      contentType: unit.type,\n      graded: unit.graded,\n      containsContentTypeGatedContent: unit.contains_content_type_gated_content,\n    })),\n  };\n}\n\nexport async function getSequenceMetadata(sequenceId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getConfig().LMS_BASE_URL}/api/courseware/sequence/${sequenceId}`, {});\n\n  return normalizeSequenceMetadata(data);\n}\n\nconst getSequenceHandlerUrl = (courseId, sequenceId) => `${getConfig().LMS_BASE_URL}/courses/${courseId}/xblock/${sequenceId}/handler`;\n\nexport async function getBlockCompletion(courseId, sequenceId, usageKey) {\n  const { data } = await getAuthenticatedHttpClient().post(\n    `${getSequenceHandlerUrl(courseId, sequenceId)}/get_completion`,\n    { usage_key: usageKey },\n  );\n  return data.complete === true;\n}\n\nexport async function postSequencePosition(courseId, sequenceId, activeUnitIndex) {\n  const { data } = await getAuthenticatedHttpClient().post(\n    `${getSequenceHandlerUrl(courseId, sequenceId)}/goto_position`,\n    // Position is 1-indexed on the server and 0-indexed in this app. Adjust here.\n    { position: activeUnitIndex + 1 },\n  );\n  return data;\n}\n\nexport async function getResumeBlock(courseId) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/courseware/resume/${courseId}`);\n  const { data } = await getAuthenticatedHttpClient().get(url.href, {});\n  return camelCaseObject(data);\n}\n\nexport async function postIntegritySignature(courseId) {\n  const { data } = await getAuthenticatedHttpClient().post(`${getConfig().LMS_BASE_URL}/api/agreements/v1/integrity_signature/${courseId}`, {});\n  return camelCaseObject(data);\n}\n\nexport async function sendActivationEmail() {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/send_account_activation_email`);\n  const { data } = await getAuthenticatedHttpClient().post(url.href, {});\n  return data;\n}\n\nexport async function getCourseDiscussionConfig(courseId) {\n  const url = `${getConfig().LMS_BASE_URL}/api/discussion/v1/courses/${courseId}`;\n  const { data } = await getAuthenticatedHttpClient().get(url);\n  return data;\n}\n\nexport async function getCourseTopics(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getConfig().LMS_BASE_URL}/api/discussion/v2/course_topics/${courseId}`);\n  return camelCaseObject(data);\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nexport const LOADING = 'loading';\nexport const LOADED = 'loaded';\nexport const FAILED = 'failed';\nexport const DENIED = 'denied';\n\nconst slice = createSlice({\n  name: 'courseware',\n  initialState: {\n    courseStatus: 'loading',\n    courseId: null,\n    sequenceStatus: 'loading',\n    sequenceId: null,\n    sequenceMightBeUnit: false,\n  },\n  reducers: {\n    fetchCourseRequest: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.courseStatus = LOADING;\n    },\n    fetchCourseSuccess: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.courseStatus = LOADED;\n    },\n    fetchCourseFailure: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.courseStatus = FAILED;\n    },\n    fetchCourseDenied: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.courseStatus = DENIED;\n    },\n    fetchSequenceRequest: (state, { payload }) => {\n      state.sequenceId = payload.sequenceId;\n      state.sequenceStatus = LOADING;\n      state.sequenceMightBeUnit = false;\n    },\n    fetchSequenceSuccess: (state, { payload }) => {\n      state.sequenceId = payload.sequenceId;\n      state.sequenceStatus = LOADED;\n      state.sequenceMightBeUnit = false;\n    },\n    fetchSequenceFailure: (state, { payload }) => {\n      state.sequenceId = payload.sequenceId;\n      state.sequenceStatus = FAILED;\n      state.sequenceMightBeUnit = payload.sequenceMightBeUnit || false;\n    },\n  },\n});\n\nexport const {\n  fetchCourseRequest,\n  fetchCourseSuccess,\n  fetchCourseFailure,\n  fetchCourseDenied,\n  fetchSequenceRequest,\n  fetchSequenceSuccess,\n  fetchSequenceFailure,\n  fetchCourseRecommendationsRequest,\n  fetchCourseRecommendationsSuccess,\n  fetchCourseRecommendationsFailure,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","import { logError, logInfo } from '@edx/frontend-platform/logging';\nimport { getCourseHomeCourseMetadata } from '../../course-home/data/api';\nimport {\n  addModel, addModelsMap, updateModel, updateModels, updateModelsMap,\n} from '../../generic/model-store';\nimport {\n  getBlockCompletion,\n  getCourseDiscussionConfig,\n  getCourseMetadata,\n  getCourseTopics,\n  getLearningSequencesOutline,\n  getSequenceMetadata,\n  postIntegritySignature,\n  postSequencePosition,\n} from './api';\nimport {\n  fetchCourseDenied,\n  fetchCourseFailure,\n  fetchCourseRequest,\n  fetchCourseSuccess,\n  fetchSequenceFailure,\n  fetchSequenceRequest,\n  fetchSequenceSuccess,\n} from './slice';\n\nexport function fetchCourse(courseId) {\n  return async (dispatch) => {\n    dispatch(fetchCourseRequest({ courseId }));\n    Promise.allSettled([\n      getCourseMetadata(courseId),\n      getLearningSequencesOutline(courseId),\n      getCourseHomeCourseMetadata(courseId, 'courseware'),\n    ]).then(([\n      courseMetadataResult,\n      learningSequencesOutlineResult,\n      courseHomeMetadataResult]) => {\n      if (courseMetadataResult.status === 'fulfilled') {\n        dispatch(addModel({\n          modelType: 'coursewareMeta',\n          model: courseMetadataResult.value,\n        }));\n      }\n\n      if (courseHomeMetadataResult.status === 'fulfilled') {\n        dispatch(addModel({\n          modelType: 'courseHomeMeta',\n          model: {\n            id: courseId,\n            ...courseHomeMetadataResult.value,\n          },\n        }));\n      }\n\n      if (learningSequencesOutlineResult.status === 'fulfilled') {\n        const {\n          courses, sections, sequences,\n        } = learningSequencesOutlineResult.value;\n\n        // This updates the course with a sectionIds array from the Learning Sequence data.\n        dispatch(updateModelsMap({\n          modelType: 'coursewareMeta',\n          modelsMap: courses,\n        }));\n        dispatch(addModelsMap({\n          modelType: 'sections',\n          modelsMap: sections,\n        }));\n        // We update for sequences because the sequence metadata may have come back first.\n        dispatch(updateModelsMap({\n          modelType: 'sequences',\n          modelsMap: sequences,\n        }));\n      }\n\n      const fetchedMetadata = courseMetadataResult.status === 'fulfilled';\n      const fetchedCourseHomeMetadata = courseHomeMetadataResult.status === 'fulfilled';\n      const fetchedOutline = learningSequencesOutlineResult.status === 'fulfilled';\n\n      // Log errors for each request if needed. Outline failures may occur\n      // even if the course metadata request is successful\n      if (!fetchedOutline) {\n        const { response } = learningSequencesOutlineResult.reason;\n        if (response && response.status === 403) {\n          // 403 responses are normal - they happen when the learner is logged out.\n          // We'll redirect them in a moment to the outline tab by calling fetchCourseDenied() below.\n          logInfo(learningSequencesOutlineResult.reason);\n        } else {\n          logError(learningSequencesOutlineResult.reason);\n        }\n      }\n      if (!fetchedMetadata) {\n        logError(courseMetadataResult.reason);\n      }\n      if (!fetchedCourseHomeMetadata) {\n        logError(courseHomeMetadataResult.reason);\n      }\n      if (fetchedMetadata && fetchedCourseHomeMetadata) {\n        if (courseHomeMetadataResult.value.courseAccess.hasAccess && fetchedOutline) {\n          // User has access\n          dispatch(fetchCourseSuccess({ courseId }));\n          return;\n        }\n        // User either doesn't have access or only has partial access\n        // (can't access course blocks)\n        dispatch(fetchCourseDenied({ courseId }));\n        return;\n      }\n\n      // Definitely an error happening\n      dispatch(fetchCourseFailure({ courseId }));\n    });\n  };\n}\n\nexport function fetchSequence(sequenceId) {\n  return async (dispatch) => {\n    dispatch(fetchSequenceRequest({ sequenceId }));\n    try {\n      const { sequence, units } = await getSequenceMetadata(sequenceId);\n      if (sequence.blockType !== 'sequential') {\n        // Some other block types (particularly 'chapter') can be returned\n        // by this API. We want to error in that case, since downstream\n        // courseware code is written to render Sequences of Units.\n        logError(\n          `Requested sequence '${sequenceId}' `\n          + `has block type '${sequence.blockType}'; expected block type 'sequential'.`,\n        );\n        dispatch(fetchSequenceFailure({ sequenceId }));\n      } else {\n        dispatch(updateModel({\n          modelType: 'sequences',\n          model: sequence,\n        }));\n        dispatch(updateModels({\n          modelType: 'units',\n          models: units,\n        }));\n        dispatch(fetchSequenceSuccess({ sequenceId }));\n      }\n    } catch (error) {\n      // Some errors are expected - for example, CoursewareContainer may request sequence metadata for a unit and rely\n      // on the request failing to notice that it actually does have a unit (mostly so it doesn't have to know anything\n      // about the opaque key structure). In such cases, the backend gives us a 422.\n      const sequenceMightBeUnit = error?.response?.status === 422;\n      if (!sequenceMightBeUnit) {\n        logError(error);\n      }\n      dispatch(fetchSequenceFailure({ sequenceId, sequenceMightBeUnit }));\n    }\n  };\n}\n\nexport function checkBlockCompletion(courseId, sequenceId, unitId) {\n  return async (dispatch, getState) => {\n    const { models } = getState();\n    if (models.units[unitId].complete) {\n      return {}; // do nothing. Things don't get uncompleted after they are completed.\n    }\n\n    try {\n      const isComplete = await getBlockCompletion(courseId, sequenceId, unitId);\n      dispatch(updateModel({\n        modelType: 'units',\n        model: {\n          id: unitId,\n          complete: isComplete,\n        },\n      }));\n      return isComplete;\n    } catch (error) {\n      logError(error);\n    }\n    return {};\n  };\n}\n\nexport function saveSequencePosition(courseId, sequenceId, activeUnitIndex) {\n  return async (dispatch, getState) => {\n    const { models } = getState();\n    const initialActiveUnitIndex = models.sequences[sequenceId].activeUnitIndex;\n    // Optimistically update the position.\n    dispatch(updateModel({\n      modelType: 'sequences',\n      model: {\n        id: sequenceId,\n        activeUnitIndex,\n      },\n    }));\n    try {\n      await postSequencePosition(courseId, sequenceId, activeUnitIndex);\n      // Update again under the assumption that the above call succeeded, since it doesn't return a\n      // meaningful response.\n      dispatch(updateModel({\n        modelType: 'sequences',\n        model: {\n          id: sequenceId,\n          activeUnitIndex,\n        },\n      }));\n    } catch (error) {\n      logError(error);\n      dispatch(updateModel({\n        modelType: 'sequences',\n        model: {\n          id: sequenceId,\n          activeUnitIndex: initialActiveUnitIndex,\n        },\n      }));\n    }\n  };\n}\n\nexport function saveIntegritySignature(courseId, isMasquerading) {\n  return async (dispatch) => {\n    try {\n      // If the request is made by a staff user masquerading as a specific learner,\n      // don't actually create a signature for them on the backend,\n      // only the modal dialog will be dismissed\n      if (!isMasquerading) {\n        await postIntegritySignature(courseId);\n      }\n      dispatch(updateModel({\n        modelType: 'coursewareMeta',\n        model: {\n          id: courseId,\n          userNeedsIntegritySignature: false,\n        },\n      }));\n    } catch (error) {\n      logError(error);\n    }\n  };\n}\n\nexport function getCourseDiscussionTopics(courseId) {\n  return async (dispatch) => {\n    try {\n      const config = await getCourseDiscussionConfig(courseId);\n      // Only load topics for the openedx provider, the legacy provider uses\n      // the xblock\n      if (config.provider === 'openedx') {\n        const topics = await getCourseTopics(courseId);\n        dispatch(updateModels({\n          modelType: 'discussionTopics',\n          models: topics.filter(topic => topic.usageKey),\n          idField: 'usageKey',\n        }));\n      }\n    } catch (error) {\n      logError(error);\n    }\n  };\n}\n","/* eslint-disable import/prefer-default-export */\nexport function sequenceIdsSelector(state) {\n  if (state.courseware.courseStatus !== 'loaded') {\n    return [];\n  }\n  const { sectionIds = [] } = state.models.coursewareMeta[state.courseware.courseId];\n\n  const sequenceIds = sectionIds\n    .flatMap(sectionId => state.models.sections[sectionId].sequenceIds);\n\n  return sequenceIds;\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  accountActivationAlertTitle: {\n    id: 'account-activation.alert.title',\n    defaultMessage: 'Activate your account so you can log back in',\n    description: 'Title for account activation alert which is shown after the registration',\n  },\n});\n\nexport default messages;\n","import React, { useState } from 'react';\nimport Cookies from 'js-cookie';\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport {\n  AlertModal,\n  Button,\n  Spinner,\n  Icon,\n} from '@edx/paragon';\nimport { Check, ArrowForward } from '@edx/paragon/icons';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { sendActivationEmail } from '../../courseware/data';\nimport messages from './messages';\n\nconst AccountActivationAlert = ({\n  intl,\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [showSpinner, setShowSpinner] = useState(false);\n  const [showCheck, setShowCheck] = useState(false);\n  const handleOnClick = () => {\n    setShowSpinner(true);\n    setShowCheck(false);\n    sendActivationEmail().then(() => {\n      setShowSpinner(false);\n      setShowCheck(true);\n    });\n  };\n\n  const showAccountActivationAlert = Cookies.get('show-account-activation-popup');\n  if (showAccountActivationAlert !== undefined) {\n    Cookies.remove('show-account-activation-popup', { path: '/', domain: process.env.SESSION_COOKIE_DOMAIN });\n    // extra check to make sure cookie was removed before updating the state. Updating the state without removal\n    // of cookie would make it infinite rendering\n    if (Cookies.get('show-account-activation-popup') === undefined) {\n      setShowModal(true);\n    }\n  }\n\n  const button = (\n    <Button\n      variant=\"primary\"\n      className=\"\"\n      onClick={() => setShowModal(false)}\n    >\n      <FormattedMessage\n        id=\"account-activation.alert.button\"\n        defaultMessage=\"Continue to {siteName}\"\n        description=\"account activation alert continue button\"\n        values={{\n          siteName: getConfig().SITE_NAME,\n        }}\n      />\n      <Icon src={ArrowForward} className=\"ml-1 d-inline-block align-bottom\" />\n    </Button>\n  );\n\n  const children = () => {\n    let bodyContent;\n    const message = (\n      <FormattedMessage\n        id=\"account-activation.alert.message\"\n        defaultMessage=\"We sent an email to {boldEmail} with a link to activate your account. Can’t find it? Check your spam folder or\n        {sendEmailTag}.\"\n        description=\"Message for account activation alert which is shown after the registration\"\n        values={{\n          boldEmail: <b>{getAuthenticatedUser() && getAuthenticatedUser().email}</b>,\n          sendEmailTag: (\n          // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a href=\"#\" role=\"button\" onClick={handleOnClick}>\n              <FormattedMessage\n                id=\"account-activation.resend.link\"\n                defaultMessage=\"resend the email\"\n                description=\"Message for resend link in account activation alert which is shown after the registration\"\n              />\n            </a>\n          ),\n        }}\n      />\n    );\n    bodyContent = (\n      <div>\n        {message}\n      </div>\n    );\n\n    if (!showCheck && showSpinner) {\n      bodyContent = (\n        <div>\n          {message}\n          <Spinner\n            animation=\"border\"\n            variant=\"secondary\"\n            style={{ height: '1.5rem', width: '1.5rem' }}\n          />\n        </div>\n      );\n    }\n\n    if (showCheck && !showSpinner) {\n      bodyContent = (\n        <div>\n          {message}\n          <Icon\n            src={Check}\n            style={{ height: '1.7rem', width: '1.25rem' }}\n            className=\"text-success-500 d-inline-block position-fixed\"\n          />\n        </div>\n      );\n    }\n    return bodyContent;\n  };\n\n  return (\n    <AlertModal\n      isOpen={showModal}\n      title={intl.formatMessage(messages.accountActivationAlertTitle)}\n      footerNode={button}\n      onClose={() => ({})}\n    >\n      {children()}\n    </AlertModal>\n  );\n};\n\nAccountActivationAlert.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(AccountActivationAlert);\n","import React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\nimport { AlertList } from '../../generic/user-messages';\n\nimport CourseDates from './widgets/CourseDates';\nimport CourseHandouts from './widgets/CourseHandouts';\nimport StartOrResumeCourseCard from './widgets/StartOrResumeCourseCard';\nimport WeeklyLearningGoalCard from './widgets/WeeklyLearningGoalCard';\nimport CourseTools from './widgets/CourseTools';\nimport { fetchOutlineTab } from '../data';\nimport messages from './messages';\nimport Section from './Section';\nimport ShiftDatesAlert from '../suggested-schedule-messaging/ShiftDatesAlert';\nimport UpgradeNotification from '../../generic/upgrade-notification/UpgradeNotification';\nimport UpgradeToShiftDatesAlert from '../suggested-schedule-messaging/UpgradeToShiftDatesAlert';\nimport useCertificateAvailableAlert from './alerts/certificate-status-alert';\nimport useCourseEndAlert from './alerts/course-end-alert';\nimport useCourseStartAlert from '../../alerts/course-start-alert';\nimport usePrivateCourseAlert from './alerts/private-course-alert';\nimport useScheduledContentAlert from './alerts/scheduled-content-alert';\nimport { useModel } from '../../generic/model-store';\nimport WelcomeMessage from './widgets/WelcomeMessage';\nimport ProctoringInfoPanel from './widgets/ProctoringInfoPanel';\nimport AccountActivationAlert from '../../alerts/logistration-alert/AccountActivationAlert';\n\nconst OutlineTab = ({ intl }) => {\n  const {\n    courseId,\n    proctoringPanelStatus,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    isSelfPaced,\n    org,\n    title,\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n\n  const {\n    accessExpiration,\n    courseBlocks: {\n      courses,\n      sections,\n    },\n    courseGoals: {\n      selectedGoal,\n      weeklyLearningGoalEnabled,\n    } = {},\n    datesBannerInfo,\n    datesWidget: {\n      courseDateBlocks,\n    },\n    enableProctoredExams,\n    offer,\n    timeOffsetMillis,\n    verifiedMode,\n  } = useModel('outline', courseId);\n\n  const {\n    marketingUrl,\n  } = useModel('coursewareMeta', courseId);\n\n  const [expandAll, setExpandAll] = useState(false);\n  const navigate = useNavigate();\n\n  const eventProperties = {\n    org_key: org,\n    courserun_key: courseId,\n  };\n\n  // Below the course title alerts (appearing in the order listed here)\n  const courseStartAlert = useCourseStartAlert(courseId);\n  const courseEndAlert = useCourseEndAlert(courseId);\n  const certificateAvailableAlert = useCertificateAvailableAlert(courseId);\n  const privateCourseAlert = usePrivateCourseAlert(courseId);\n  const scheduledContentAlert = useScheduledContentAlert(courseId);\n\n  const rootCourseId = courses && Object.keys(courses)[0];\n\n  const hasDeadlines = courseDateBlocks && courseDateBlocks.some(x => x.dateType === 'assignment-due-date');\n\n  const logUpgradeToShiftDatesLinkClick = () => {\n    sendTrackEvent('edx.bi.ecommerce.upsell_links_clicked', {\n      ...eventProperties,\n      linkCategory: 'personalized_learner_schedules',\n      linkName: 'course_home_upgrade_shift_dates',\n      linkType: 'button',\n      pageName: 'course_home',\n    });\n  };\n\n  const isEnterpriseUser = () => {\n    const authenticatedUser = getAuthenticatedUser();\n    const userRoleNames = authenticatedUser ? authenticatedUser.roles.map(role => role.split(':')[0]) : [];\n\n    return userRoleNames.includes('enterprise_learner');\n  };\n\n  /** show post enrolment survey to only B2C learners */\n  const learnerType = isEnterpriseUser() ? 'enterprise_learner' : 'b2c_learner';\n\n  const location = useLocation();\n\n  useEffect(() => {\n    const currentParams = new URLSearchParams(location.search);\n    const startCourse = currentParams.get('start_course');\n    if (startCourse === '1') {\n      sendTrackEvent('enrollment.email.clicked.startcourse', {});\n\n      // Deleting the course_start query param as it only needs to be set once\n      // whenever passed in query params.\n      currentParams.delete('start_course');\n      navigate({\n        pathname: location.pathname,\n        search: `?${currentParams.toString()}`,\n        replace: true,\n      });\n    }\n  }, [location.search]);\n\n  return (\n    <>\n      <div data-learner-type={learnerType} className=\"row w-100 mx-0 my-3 justify-content-between\">\n        <div className=\"col-12 col-sm-auto p-0\">\n          <div role=\"heading\" aria-level=\"1\" className=\"h2\">{title}</div>\n        </div>\n      </div>\n      <div className=\"row course-outline-tab\">\n        <AccountActivationAlert />\n        <div className=\"col-12\">\n          <AlertList\n            topic=\"outline-private-alerts\"\n            customAlerts={{\n              ...privateCourseAlert,\n            }}\n          />\n        </div>\n        <div className=\"col col-12 col-md-8\">\n          <AlertList\n            topic=\"outline-course-alerts\"\n            className=\"mb-3\"\n            customAlerts={{\n              ...certificateAvailableAlert,\n              ...courseEndAlert,\n              ...courseStartAlert,\n              ...scheduledContentAlert,\n            }}\n          />\n          {isSelfPaced && hasDeadlines && (\n            <>\n              <ShiftDatesAlert model=\"outline\" fetch={fetchOutlineTab} />\n              <UpgradeToShiftDatesAlert model=\"outline\" logUpgradeLinkClick={logUpgradeToShiftDatesLinkClick} />\n            </>\n          )}\n          <StartOrResumeCourseCard />\n          <WelcomeMessage courseId={courseId} />\n          {rootCourseId && (\n            <>\n              <div className=\"row w-100 m-0 mb-3 justify-content-end\">\n                <div className=\"col-12 col-md-auto p-0\">\n                  <Button variant=\"outline-primary\" block onClick={() => { setExpandAll(!expandAll); }}>\n                    {expandAll ? intl.formatMessage(messages.collapseAll) : intl.formatMessage(messages.expandAll)}\n                  </Button>\n                </div>\n              </div>\n              <ol id=\"courseHome-outline\" className=\"list-unstyled\">\n                {courses[rootCourseId].sectionIds.map((sectionId) => (\n                  <Section\n                    key={sectionId}\n                    courseId={courseId}\n                    defaultOpen={sections[sectionId].resumeBlock}\n                    expand={expandAll}\n                    section={sections[sectionId]}\n                  />\n                ))}\n              </ol>\n            </>\n          )}\n        </div>\n        {rootCourseId && (\n          <div className=\"col col-12 col-md-4\">\n            <ProctoringInfoPanel />\n            { /** Defer showing the goal widget until the ProctoringInfoPanel has resolved or has been determined as\n             disabled to avoid components bouncing around too much as screen is rendered */ }\n            {(!enableProctoredExams || proctoringPanelStatus === 'loaded') && weeklyLearningGoalEnabled && (\n              <WeeklyLearningGoalCard\n                daysPerWeek={selectedGoal && 'daysPerWeek' in selectedGoal ? selectedGoal.daysPerWeek : null}\n                subscribedToReminders={selectedGoal && 'subscribedToReminders' in selectedGoal ? selectedGoal.subscribedToReminders : false}\n              />\n            )}\n            <CourseTools />\n            <UpgradeNotification\n              offer={offer}\n              verifiedMode={verifiedMode}\n              accessExpiration={accessExpiration}\n              contentTypeGatingEnabled={datesBannerInfo.contentTypeGatingEnabled}\n              marketingUrl={marketingUrl}\n              upsellPageName=\"course_home\"\n              userTimezone={userTimezone}\n              shouldDisplayBorder\n              timeOffsetMillis={timeOffsetMillis}\n              courseId={courseId}\n              org={org}\n            />\n            <CourseDates />\n            <CourseHandouts />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nOutlineTab.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(OutlineTab);\n","export default __webpack_public_path__ + \"d8d2ddd02a2781719fd303dc4b868ac0.gif\";","export default __webpack_public_path__ + \"8ecb9b1c7d41d7196375abdc97a53b4b.gif\";","export default __webpack_public_path__ + \"d0cc1158a1b3bd75bb785cd0d6e306c1.png\";","export default __webpack_public_path__ + \"50e380db78f1d321fe1ce5bacea07644.png\";","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  applyForCredit: {\n    id: 'courseExit.programs.applyForCredit',\n    defaultMessage: 'Apply for credit',\n    description: 'Button for the learner to apply for course credit',\n  },\n  certificateHeaderDownloadable: {\n    id: 'courseCelebration.certificateHeader.downloadable',\n    defaultMessage: 'Your certificate is available!',\n    description: 'Text displayed when course certificate is ready to be downloaded',\n  },\n  certificateHeaderNotAvailable: {\n    id: 'courseCelebration.certificateHeader.notAvailable',\n    defaultMessage: 'Your grade and certificate status will be available soon.',\n    description: 'Header displayed when course certificate is not yet available to be viewed',\n  },\n  certificateNotAvailableBodyAccessCert: {\n    id: 'courseCelebration.certificateBody.notAvailable.accessCertificate',\n    defaultMessage: 'If you have earned a passing grade, your certificate will be automatically issued.',\n    description: 'Text displayed when course certificate is not yet available to be viewed',\n  },\n  certificateNotAvailableEndDateBody: {\n    id: 'courseCelebration.certificateBody.notAvailable.endDate',\n    defaultMessage: 'Final grades and any earned certificates are scheduled to be available after {endDate}.',\n    description: 'Shown for learners who have finished a course before grades and certificates are available.',\n  },\n  certificateHeaderUnverified: {\n    id: 'courseCelebration.certificateHeader.unverified',\n    defaultMessage: 'You must complete verification to receive your certificate.',\n    description: 'Text displayed when a user has not verified their identity and cannot view their course certificate',\n  },\n  certificateHeaderRequestable: {\n    id: 'courseCelebration.certificateHeader.requestable',\n    defaultMessage: 'Congratulations, you qualified for a certificate!',\n    description: 'Text displayed when a user has completed the course and can request a certificate',\n  },\n  certificateHeaderUpgradable: {\n    id: 'courseCelebration.certificateHeader.upgradable',\n    defaultMessage: 'Upgrade to pursue a verified certificate',\n    description: 'Header when learner finished or pass the course but need to upgrade to get a certificate',\n  },\n  certificateImage: {\n    id: 'courseCelebration.certificateImage',\n    defaultMessage: 'Sample certificate',\n    description: 'Alt text used to describe an image of a certificate',\n  },\n  completedCourseHeader: {\n    id: 'courseCelebration.completedCourseHeader',\n    defaultMessage: 'You have completed your course.',\n    description: 'Header text for course exit section',\n  },\n  congratulationsHeader: {\n    id: 'courseCelebration.congratulationsHeader',\n    defaultMessage: 'Congratulations!',\n    description: 'Greeting learner for finishing the course',\n  },\n  congratulationsImage: {\n    id: 'courseCelebration.congratulationsImage',\n    defaultMessage: 'Four people raising their hands in celebration',\n    description: 'Alt text used to describe celebratory image',\n  },\n  courseInProgressDescription: {\n    id: 'courseExit.courseInProgressDescription',\n    defaultMessage: 'It looks like there is more content in this course that will be released in the future. Look out for email updates or check back on your course for when this content will be available.',\n    description: 'Shown to learner when they finish all available assignments, but not the whole course',\n  },\n  courseInProgressHeader: {\n    id: 'courseExit.courseInProgressHeader',\n    defaultMessage: 'More content is coming soon!',\n    description: 'Header when the status of the course not all of (contents or assignments) available yet',\n  },\n  dashboardLink: {\n    id: 'courseExit.dashboardLink',\n    defaultMessage: 'Dashboard',\n    description: 'Link to user’s dashboard',\n  },\n  endOfCourseDescription: {\n    id: 'courseExit.endOfCourseDescription',\n    defaultMessage: 'Unfortunately, you are not currently eligible for a certificate. You need to receive a passing grade to be eligible for a certificate.',\n    description: 'Shown to learner when they did not pass the course',\n  },\n  endOfCourseHeader: {\n    id: 'courseExit.endOfCourseHeader',\n    defaultMessage: 'You’ve reached the end of the course!',\n  },\n  endOfCourseTitle: {\n    id: 'courseExit.endOfCourseTitle',\n    defaultMessage: 'End of Course',\n  },\n  idVerificationSupportLink: {\n    id: 'courseExit.idVerificationSupportLink',\n    defaultMessage: 'Learn more about ID verification',\n    description: 'Link to an article about identity verification',\n  },\n  linkedinAddToProfileButton: {\n    id: 'courseCelebration.linkedinAddToProfileButton',\n    defaultMessage: 'Add to LinkedIn profile',\n    description: 'Button to add certificate information to the user’s LinkedIn profile',\n  },\n  microBachelorsLearnMore: {\n    id: 'courseExit.programs.microBachelors.learnMore',\n    defaultMessage: 'Learn more about how your MicroBachelors credential can be applied for credit.',\n  },\n  microMastersLearnMore: {\n    id: 'courseExit.programs.microMasters.learnMore',\n    defaultMessage: 'Learn more about the process of applying MicroMasters certificates to Master’s degrees.',\n  },\n  microMastersMessage: {\n    id: 'courseExit.programs.microMasters.mastersMessage',\n    defaultMessage: 'If you’re interested in using your MicroMasters certificate towards a Master’s program, you can get started today!',\n  },\n  nextButtonComplete: {\n    id: 'learn.sequence.navigation.complete.button', // for historical reasons\n    defaultMessage: 'Complete the course',\n    description: 'This text is shown on the button which usually links to the next unit or assignment in course sequence, however when it is the last unit. The button will link to course exit page',\n  },\n  nextButtonEnd: {\n    id: 'courseExit.nextButton.endOfCourse',\n    defaultMessage: 'Next (end of course)',\n    description: 'This shown for the button which links to the next unit, when learner did not pass the course',\n  },\n  profileLink: {\n    id: 'courseExit.profileLink',\n    defaultMessage: 'Profile',\n    description: 'Link to user’s profile',\n  },\n  programsLastCourseHeader: {\n    id: 'courseExit.programs.lastCourse',\n    defaultMessage: 'You have completed the last course in {title}!',\n    description: 'This shown to learner when the course they completed is the last one of a program, the program might be mircomaster, or microbachelors...etc',\n  },\n  requestCertificateBodyText: {\n    id: 'courseCelebration.requestCertificateBodyText',\n    defaultMessage: 'In order to access your certificate, request it below.',\n    description: 'Shown when learner need to request the certifcate',\n  },\n  requestCertificateButton: {\n    id: 'courseCelebration.requestCertificateButton',\n    defaultMessage: 'Request certificate',\n    description: 'Button to request the course certificate',\n  },\n  searchOurCatalogLink: {\n    id: 'courseExit.searchOurCatalogLink',\n    defaultMessage: 'Search our catalog',\n    description: 'First part of a sentence that continues afterward',\n  },\n  shareMessage: {\n    id: 'courseCelebration.shareMessage',\n    defaultMessage: 'Share your success on social media or email.',\n    description: 'Recommending an action when learner pass the course',\n  },\n  socialMessage: {\n    id: 'courseExit.social.shareCompletionMessage',\n    defaultMessage: 'I just completed {title} with {platform}!',\n    description: 'Shown when sharing course progress on a social network',\n  },\n  upgradeButton: {\n    id: 'courseExit.upgradeButton',\n    defaultMessage: 'Upgrade now',\n  },\n  upgradeLink: {\n    id: 'courseExit.upgradeLink',\n    defaultMessage: 'upgrade now',\n  },\n  verificationPending: {\n    id: 'courseCelebration.verificationPending',\n    defaultMessage: 'Your ID verification is pending and your certificate will be available once approved.',\n    description: 'Shown when the status of verification is pending',\n  },\n  verifiedCertificateSupportLink: {\n    id: 'courseExit.verifiedCertificateSupportLink',\n    defaultMessage: 'Learn more about verified certificates',\n    description: 'Anchor text for link that redirect to external help page about verified certificates',\n  },\n  verifyIdentityButton: {\n    id: 'courseCelebration.verifyIdentityButton',\n    defaultMessage: 'Verify ID now',\n    description: 'Button to verify the identify of the user',\n  },\n  viewCertificateButton: {\n    id: 'courseCelebration.viewCertificateButton',\n    defaultMessage: 'View my certificate',\n    description: 'Button to view the course certificate',\n  },\n  viewCourseScheduleButton: {\n    id: 'courseExit.viewCourseScheduleButton',\n    defaultMessage: 'View course schedule',\n    description: 'Button to view the course schedule',\n  },\n  viewCoursesButton: {\n    id: 'courseExit.viewCoursesButton',\n    defaultMessage: 'View my courses',\n    description: 'Button to redirect user to their course dashboard',\n  },\n  viewGradesButton: {\n    id: 'courseExit.viewGradesButton',\n    defaultMessage: 'View grades',\n  },\n\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Alert, Button, Hyperlink } from '@edx/paragon';\nimport certImage from '../../../generic/assets/edX_certificate.png';\nimport messages from './messages';\n\n/**\n * Note for Open edX developers:\n * There are pieces of this component that are hard-coded and specific to edX that may not apply to your organization.\n * This includes mentions of our edX program types (MicroMasters, MicroBachelors, Professional Certificate, and\n * XSeries), along with their respective support article URLs and image variable names.\n *\n * Currently, this component will not render unless the learner's completed course has a related program of one of the\n * four aforementioned types. This will not impact the parent components (i.e. CourseCelebration will render normally).\n */\n\nconst programTypes = ['microbachelors', 'micromasters', 'professional-certificate', 'xseries'];\n\nconst ProgramCompletion = ({\n  intl,\n  progress,\n  title,\n  type,\n  url,\n}) => {\n  if (!programTypes.includes(type) || progress.notStarted !== 0 || progress.inProgress !== 0) {\n    return null;\n  }\n\n  const programLink = (\n    <Hyperlink\n      style={{ textDecoration: 'underline' }}\n      destination={url}\n      className=\"text-reset\"\n    >\n      {intl.formatMessage(messages.dashboardLink)}\n    </Hyperlink>\n  );\n\n  return (\n    <Alert variant=\"primary\" className=\"my-3\" data-testid=\"program-completion\">\n      <div className=\"d-flex\">\n        <div className=\"col order-1 order-md-0 pl-0 pr-0 pr-md-5\">\n          <div className=\"h4\">{intl.formatMessage(messages.programsLastCourseHeader, { title })}</div>\n          <p>\n            <FormattedMessage\n              id=\"courseExit.programCompletion.dashboardMessage\"\n              defaultMessage=\"To view your certificate status, check the Programs section of your {programLink}.\"\n              values={{ programLink }}\n              description=\"Text that precedes link to program page\"\n            />\n          </p>\n          {type === 'microbachelors' && (\n            <>\n              <p>\n                <Hyperlink\n                  style={{ textDecoration: 'underline' }}\n                  destination={`${getConfig().SUPPORT_URL}/hc/en-us/articles/360004623154`}\n                  className=\"text-reset\"\n                >\n                  {intl.formatMessage(messages.microBachelorsLearnMore)}\n                </Hyperlink>\n              </p>\n              <Button variant=\"primary\" className=\"mb-2 mb-sm-0\" href={`${getConfig().CREDENTIALS_BASE_URL}/records`}>\n                {intl.formatMessage(messages.applyForCredit)}\n              </Button>\n            </>\n          )}\n          {type === 'micromasters' && (\n            <p>\n              {intl.formatMessage(messages.microMastersMessage)}\n              {' '}\n              <Hyperlink\n                style={{ textDecoration: 'underline' }}\n                destination={`${getConfig().SUPPORT_URL}/hc/en-us/articles/360010346853-Does-a-Micromasters-certificate-count-towards-the-online-Master-s-degree-`}\n                className=\"text-reset\"\n              >\n                {intl.formatMessage(messages.microMastersLearnMore)}\n              </Hyperlink>\n            </p>\n          )}\n        </div>\n        <div className=\"col-12 order-0 col-md-3 order-md-1 w-100 mb-3 p-0 text-center\">\n          <img\n            src={certImage}\n            alt={`${intl.formatMessage(messages.certificateImage)}`}\n            className=\"w-100\"\n            style={{ maxWidth: '13rem' }}\n            data-testid={type}\n          />\n        </div>\n      </div>\n    </Alert>\n  );\n};\n\nProgramCompletion.propTypes = {\n  intl: intlShape.isRequired,\n  progress: PropTypes.shape({\n    completed: PropTypes.number.isRequired,\n    inProgress: PropTypes.number.isRequired,\n    notStarted: PropTypes.number.isRequired,\n  }).isRequired,\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(ProgramCompletion);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Footnote = ({ icon, text }) => (\n  <div className=\"row w-100 mx-0 my-4 justify-content-center\">\n    <p className=\"text-gray-700\">\n      <FontAwesomeIcon icon={icon} style={{ width: '20px' }} />&nbsp;\n      {text}\n    </p>\n  </div>\n);\n\nFootnote.propTypes = {\n  icon: PropTypes.shape({}).isRequired,\n  text: PropTypes.node.isRequired,\n};\n\nexport default Footnote;\n","import { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\n\nimport messages from './messages';\nimport { useModel } from '../../../generic/model-store';\n\nconst COURSE_EXIT_MODES = {\n  disabled: 0,\n  celebration: 1,\n  nonPassing: 2,\n  inProgress: 3,\n};\n\n// These are taken from the edx-platform `get_cert_data` function found in lms/courseware/views/views.py\nconst CELEBRATION_STATUSES = [\n  'audit_passing',\n  'downloadable',\n  'earned_but_not_available',\n  'honor_passing',\n  'requesting',\n  'unverified',\n];\nconst NON_CERTIFICATE_STATUSES = [ // no certificate will be given, though a valid certificateData block is provided\n  'audit_passing',\n  'honor_passing', // provided when honor is configured to not give a certificate\n];\n\nfunction getCourseExitMode(\n  certificateData,\n  hasScheduledContent,\n  isEnrolled,\n  userHasPassingGrade,\n  courseExitPageIsActive = null,\n  canImmediatelyViewCertificate = false,\n) {\n  const authenticatedUser = getAuthenticatedUser();\n\n  if (courseExitPageIsActive === false || !authenticatedUser || !isEnrolled) {\n    return COURSE_EXIT_MODES.disabled;\n  }\n\n  // Set defaults for our status-calculated variables, used when no certificateData is provided.\n  // This happens when `get_cert_data` in edx-platform returns None, which it does if we are\n  // in a certificate-earning mode, but the certificate is not available (maybe they didn't pass\n  // or course is not set up for certificates or something). Audit users will always have a\n  // certificateData sent over.\n  let isCelebratoryStatus = true;\n  let isEligibleForCertificate = true;\n\n  if (certificateData) {\n    const { certStatus } = certificateData;\n    isCelebratoryStatus = CELEBRATION_STATUSES.indexOf(certStatus) !== -1;\n    isEligibleForCertificate = NON_CERTIFICATE_STATUSES.indexOf(certStatus) === -1;\n  }\n\n  if (hasScheduledContent && !userHasPassingGrade) {\n    return COURSE_EXIT_MODES.inProgress;\n  }\n  if (isEligibleForCertificate && !userHasPassingGrade && canImmediatelyViewCertificate) {\n    return COURSE_EXIT_MODES.nonPassing;\n  }\n  if (isCelebratoryStatus) {\n    return COURSE_EXIT_MODES.celebration;\n  }\n  return COURSE_EXIT_MODES.disabled;\n}\n\n// Returns null in order to render the default navigation text\nfunction GetCourseExitNavigation(courseId, intl) {\n  const {\n    certificateData,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n    courseExitPageIsActive,\n  } = useModel('coursewareMeta', courseId);\n  const { canViewCertificate } = useModel('courseHomeMeta', courseId);\n  const exitMode = getCourseExitMode(\n    certificateData,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n    courseExitPageIsActive,\n    canViewCertificate,\n  );\n  const exitActive = exitMode !== COURSE_EXIT_MODES.disabled;\n\n  let exitText;\n  switch (exitMode) {\n    case COURSE_EXIT_MODES.celebration:\n      exitText = intl.formatMessage(messages.nextButtonComplete);\n      break;\n    case COURSE_EXIT_MODES.nonPassing:\n      exitText = intl.formatMessage(messages.nextButtonEnd);\n      break;\n    default:\n      exitText = null;\n  }\n  return { exitActive, exitText };\n}\n\n// Meant to be used as part of a button's onClick handler.\n// For convenience, you can pass a falsy event and it will be ignored.\nconst logClick = (org, courseId, administrator, event, extraProperties) => {\n  if (!event) {\n    return;\n  }\n\n  sendTrackEvent(`edx.ui.lms.course_exit.${event}.clicked`, {\n    org_key: org,\n    courserun_key: courseId,\n    is_staff: administrator,\n    ...extraProperties,\n  });\n};\n\n// Use like the following to call this only once on initial page load:\n// useEffect(() => logVisit(org, courseId, administrator, variant), [org, courseId, administrator, variant]);\n// For convenience, you can pass a falsy variant and it will be ignored.\nconst logVisit = (org, courseId, administrator, variant) => {\n  if (!variant) {\n    return;\n  }\n\n  sendTrackEvent('edx.ui.lms.course_exit.visited', {\n    org_key: org,\n    courserun_key: courseId,\n    is_staff: administrator,\n    variant,\n  });\n};\n\nexport {\n  COURSE_EXIT_MODES,\n  getCourseExitMode,\n  GetCourseExitNavigation,\n  logClick,\n  logVisit,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport {\n  FormattedMessage, injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { Hyperlink } from '@edx/paragon';\nimport { faCalendarAlt } from '@fortawesome/free-regular-svg-icons';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { useModel } from '../../../generic/model-store';\n\nimport Footnote from './Footnote';\nimport messages from './messages';\nimport { logClick } from './utils';\n\nconst DashboardFootnote = ({ intl, variant }) => {\n  const { courseId } = useSelector(state => state.courseware);\n  const { org } = useModel('courseHomeMeta', courseId);\n  const { administrator } = getAuthenticatedUser();\n\n  const dashboardLink = (\n    <Hyperlink\n      style={{ textDecoration: 'underline' }}\n      destination={`${getConfig().LMS_BASE_URL}/dashboard`}\n      className=\"text-reset\"\n      onClick={() => logClick(org, courseId, administrator, 'dashboard_footnote', { variant })}\n    >\n      {intl.formatMessage(messages.dashboardLink)}\n    </Hyperlink>\n  );\n\n  return (\n    <Footnote\n      icon={faCalendarAlt}\n      text={(\n        <FormattedMessage\n          id=\"courseCelebration.dashboardInfo\" // for historical reasons\n          defaultMessage=\"You can access this course and its materials on your {dashboardLink}.\"\n          description=\"Text that precedes link to learner's dashboard\"\n          values={{ dashboardLink }}\n        />\n      )}\n    />\n  );\n};\n\nDashboardFootnote.propTypes = {\n  intl: intlShape.isRequired,\n  variant: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(DashboardFootnote);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport {\n  FormattedDate, FormattedMessage, injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { Hyperlink } from '@edx/paragon';\nimport { faCalendarAlt } from '@fortawesome/free-regular-svg-icons';\n\nimport Footnote from './Footnote';\nimport { logClick } from './utils';\nimport messages from './messages';\nimport { useModel } from '../../../generic/model-store';\n\nconst UpgradeFootnote = ({ deadline, href, intl }) => {\n  const { courseId } = useSelector(state => state.courseware);\n  const { org } = useModel('courseHomeMeta', courseId);\n  const { administrator } = getAuthenticatedUser();\n\n  const upgradeLink = (\n    <Hyperlink\n      style={{ textDecoration: 'underline' }}\n      destination={href}\n      className=\"text-reset\"\n      onClick={() => logClick(org, courseId, administrator, 'upgrade_footnote')}\n    >\n      {intl.formatMessage(messages.upgradeLink)}\n    </Hyperlink>\n  );\n\n  const expirationDate = (\n    <FormattedDate\n      day=\"numeric\"\n      month=\"long\"\n      year=\"numeric\"\n      value={deadline}\n    />\n  );\n\n  return (\n    <Footnote\n      icon={faCalendarAlt}\n      text={(\n        <FormattedMessage\n          id=\"courseExit.upgradeFootnote\"\n          defaultMessage=\"Access to this course and its materials are available on your dashboard until {expirationDate}. To extend access, {upgradeLink}.\"\n          values={{\n            expirationDate,\n            upgradeLink,\n          }}\n          description=\"Message body to tell learner until when the materiel will be available, and to suggest to upgrade\"\n        />\n      )}\n    />\n  );\n};\n\nUpgradeFootnote.propTypes = {\n  deadline: PropTypes.instanceOf(Date).isRequired,\n  href: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(UpgradeFootnote);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  defaultEmailBody: {\n    id: 'learning.celebration.emailBody',\n    defaultMessage: 'What are you spending your time learning?',\n    description: 'Body when sharing course progress via email',\n  },\n  shareEmail: {\n    id: 'learning.social.shareEmail',\n    defaultMessage: 'Share your progress via email.',\n    description: 'Text email share button',\n  },\n  shareService: {\n    id: 'learning.social.shareService',\n    defaultMessage: 'Share your progress on {service}.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  EmailIcon,\n  EmailShareButton,\n  FacebookIcon,\n  FacebookShareButton,\n  LinkedinIcon,\n  LinkedinShareButton,\n  TwitterIcon,\n  TwitterShareButton,\n} from 'react-share';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\nimport { useModel } from '../../generic/model-store';\n\nconst SocialIcons = ({\n  analyticsId,\n  className,\n  courseId,\n  emailBody,\n  emailSubject,\n  hashtags,\n  intl,\n  socialMessage,\n}) => {\n  const { marketingUrl } = useModel('coursewareMeta', courseId);\n\n  const {\n    org,\n    title,\n  } = useModel('courseHomeMeta', courseId);\n\n  if (!marketingUrl) {\n    return null;\n  }\n\n  const twitterUrl = getConfig().TWITTER_URL;\n  const twitterAccount = twitterUrl && twitterUrl.substring(twitterUrl.lastIndexOf('/') + 1);\n\n  const logClick = (service) => {\n    if (!analyticsId) {\n      return;\n    }\n\n    const { administrator } = getAuthenticatedUser();\n    sendTrackEvent(analyticsId, {\n      org_key: org,\n      courserun_key: courseId,\n      course_id: courseId, // should only be courserun_key, but left as-is for historical reasons\n      is_staff: administrator,\n      service,\n    });\n  };\n\n  const socialUtmCampaign = getConfig().SOCIAL_UTM_MILESTONE_CAMPAIGN\n    ? `utm_campaign=${getConfig().SOCIAL_UTM_MILESTONE_CAMPAIGN}&` : '';\n  const socialUtmMarketingUrl = `${marketingUrl}?${socialUtmCampaign}utm_medium=social`;\n\n  return (\n    <div className={`social-icons ${className}`}>\n      <LinkedinShareButton\n        beforeOnClick={() => logClick('linkedin')}\n        url={`${socialUtmMarketingUrl}&utm_source=linkedin`}\n      >\n        <LinkedinIcon round size={32} />\n        <span className=\"sr-only\">{intl.formatMessage(messages.shareService, { service: 'LinkedIn' })}</span>\n      </LinkedinShareButton>\n      {twitterAccount && (\n        <TwitterShareButton\n          beforeOnClick={() => logClick('twitter')}\n          className=\"ml-2\"\n          hashtags={hashtags}\n          title={socialMessage ? intl.formatMessage(socialMessage, { platform: `@${twitterAccount}`, title }) : ''}\n          url={`${socialUtmMarketingUrl}&utm_source=twitter`}\n        >\n          <TwitterIcon round size={32} />\n          <span className=\"sr-only\">{intl.formatMessage(messages.shareService, { service: 'Twitter' })}</span>\n        </TwitterShareButton>\n      )}\n      <FacebookShareButton\n        beforeOnClick={() => logClick('facebook')}\n        className=\"ml-2\"\n        quote={socialMessage ? intl.formatMessage(socialMessage, { platform: getConfig().SITE_NAME, title }) : ''}\n        url={`${socialUtmMarketingUrl}&utm_source=facebook`}\n      >\n        <FacebookIcon round size={32} />\n        <span className=\"sr-only\">{intl.formatMessage(messages.shareService, { service: 'Facebook' })}</span>\n      </FacebookShareButton>\n      <EmailShareButton\n        beforeOnClick={() => logClick('email')}\n        body={emailBody ? `${intl.formatMessage(emailBody)}\\n\\n` : ''}\n        className=\"ml-2\"\n        subject={emailSubject ? intl.formatMessage(emailSubject, { platform: getConfig().SITE_NAME, title }) : ''}\n        url={`${marketingUrl}?${socialUtmCampaign}utm_medium=email&utm_source=email`}\n      >\n        <EmailIcon round size={32} />\n        <span className=\"sr-only\">{intl.formatMessage(messages.shareEmail)}</span>\n      </EmailShareButton>\n    </div>\n  );\n};\n\nSocialIcons.defaultProps = {\n  analyticsId: '',\n  className: '',\n  emailBody: messages.defaultEmailBody,\n  emailSubject: null,\n  hashtags: [getConfig().TWITTER_HASHTAG],\n  socialMessage: null,\n};\n\nSocialIcons.propTypes = {\n  analyticsId: PropTypes.string,\n  className: PropTypes.string,\n  courseId: PropTypes.string.isRequired,\n  emailBody: PropTypes.shape({}),\n  emailSubject: PropTypes.shape({}),\n  hashtags: PropTypes.arrayOf(PropTypes.string),\n  intl: intlShape.isRequired,\n  socialMessage: PropTypes.shape({}),\n};\n\nexport default injectIntl(SocialIcons);\n","import React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { getConfig } from '@edx/frontend-platform';\nimport { Hyperlink } from '@edx/paragon';\n\nimport messages from '../courseware/course/course-exit/messages';\n\nconst IntlDashboardLink = ({ intl }) => (\n  <Hyperlink\n    variant=\"muted\"\n    isInline\n    destination={`${getConfig().LMS_BASE_URL}/dashboard`}\n  >\n    {intl.formatMessage(messages.dashboardLink)}\n  </Hyperlink>\n);\n\nIntlDashboardLink.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nconst IntlIdVerificationSupportLink = ({ intl }) => {\n  if (!getConfig().SUPPORT_URL_ID_VERIFICATION) {\n    return null;\n  }\n  return (\n    <Hyperlink\n      variant=\"muted\"\n      isInline\n      destination={getConfig().SUPPORT_URL_ID_VERIFICATION}\n    >\n      {intl.formatMessage(messages.idVerificationSupportLink)}\n    </Hyperlink>\n  );\n};\n\nIntlIdVerificationSupportLink.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nconst IntlProfileLink = ({ intl }) => {\n  const { username } = getAuthenticatedUser();\n\n  return (\n    <Hyperlink\n      variant=\"muted\"\n      isInline\n      destination={`${getConfig().LMS_BASE_URL}/u/${username}`}\n    >\n      {intl.formatMessage(messages.profileLink)}\n    </Hyperlink>\n  );\n};\n\nIntlProfileLink.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nconst DashboardLink = injectIntl(IntlDashboardLink);\nconst IdVerificationSupportLink = injectIntl(IntlIdVerificationSupportLink);\nconst ProfileLink = injectIntl(IntlProfileLink);\n\nexport { DashboardLink, IdVerificationSupportLink, ProfileLink };\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nexport const LOADING = 'loading';\nexport const LOADED = 'loaded';\nexport const FAILED = 'failed';\n\nconst slice = createSlice({\n  courseId: null,\n  name: 'recommendations',\n  initialState: {\n    recommendationsStatus: LOADING,\n  },\n  reducers: {\n    fetchCourseRecommendationsRequest: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.recommendationsStatus = LOADING;\n    },\n    fetchCourseRecommendationsSuccess: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.recommendationsStatus = LOADED;\n    },\n    fetchCourseRecommendationsFailure: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.recommendationsStatus = FAILED;\n    },\n  },\n});\n\nexport const {\n  fetchCourseRecommendationsRequest,\n  fetchCourseRecommendationsSuccess,\n  fetchCourseRecommendationsFailure,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport {\n  FormattedMessage, injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { Hyperlink } from '@edx/paragon';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { useModel } from '../../../generic/model-store';\n\nimport messages from './messages';\nimport { logClick } from './utils';\n\nconst CatalogSuggestion = ({ intl, variant }) => {\n  const { courseId } = useSelector(state => state.courseware);\n  const { org } = useModel('courseHomeMeta', courseId);\n  const { administrator } = getAuthenticatedUser();\n\n  const searchOurCatalogLink = (\n    <Hyperlink\n      style={{ textDecoration: 'underline' }}\n      destination={getConfig().SEARCH_CATALOG_URL}\n      className=\"text-reset\"\n      onClick={() => logClick(org, courseId, administrator, 'catalog_search', { variant })}\n    >\n      {intl.formatMessage(messages.searchOurCatalogLink)}\n    </Hyperlink>\n  );\n\n  return (\n    <div className=\"row w-100 mx-0 my-2 justify-content-center\" data-testid=\"catalog-suggestion\">\n      <div className=\"col col-md-8 p-4 bg-info-100 text-center\">\n        <FontAwesomeIcon icon={faSearch} style={{ width: '20px' }} />&nbsp;\n        <FormattedMessage\n          id=\"courseExit.catalogSearchSuggestion\"\n          defaultMessage=\"Looking to learn more? {searchOurCatalogLink} to find more courses and programs to explore.\"\n          values={{ searchOurCatalogLink }}\n          description=\"Suggesting to learner to explore other course. Shown when they finish the course\"\n        />\n      </div>\n    </div>\n  );\n};\n\nCatalogSuggestion.propTypes = {\n  intl: intlShape.isRequired,\n  variant: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(CatalogSuggestion);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Spinner } from '@edx/paragon';\n\nexport default class PageLoading extends Component {\n  renderSrMessage() {\n    if (!this.props.srMessage) {\n      return null;\n    }\n\n    return (\n      <span className=\"sr-only\">\n        {this.props.srMessage}\n      </span>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div\n          className=\"d-flex justify-content-center align-items-center flex-column\"\n          style={{\n            height: '50vh',\n          }}\n        >\n          <Spinner animation=\"border\" variant=\"primary\" screenReaderText={this.renderSrMessage()} />\n        </div>\n      </div>\n    );\n  }\n}\n\nPageLoading.propTypes = {\n  srMessage: PropTypes.node.isRequired,\n};\n","/* eslint-disable react/jsx-no-useless-fragment */\nimport React, { useEffect } from 'react';\nimport { getConfig } from '@edx/frontend-platform';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport {\n  FormattedMessage, injectIntl, intlShape, defineMessages,\n} from '@edx/frontend-platform/i18n';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Hyperlink, DataTable, CardView, Card,\n} from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport truncate from 'truncate-html';\nimport { useModel } from '../../../generic/model-store';\nimport fetchCourseRecommendations from './data/thunks';\nimport { FAILED, LOADED, LOADING } from './data/slice';\nimport CatalogSuggestion from './CatalogSuggestion';\nimport PageLoading from '../../../generic/PageLoading';\nimport { logClick } from './utils';\n\nconst messages = defineMessages({\n  recommendationsHeading: {\n    id: 'courseCelebration.recommendations.heading',\n    description: 'Header for recommendations section of course celebration',\n    defaultMessage: 'Keep building your skills with these courses!',\n  },\n  recommendationsCourseFooter: {\n    id: 'courseCelebration.recommendations.label', // not very descriptive, but is historical\n    description: 'Label on a discovery-card that lets a user know that it is a course card',\n    defaultMessage: 'Course',\n  },\n  listJoin: {\n    id: 'courseCelebration.recommendations.formatting.list_join',\n    description: 'Joining mark or word for a list of items, use the {sp} placeholder to include space before the joining word',\n    // eslint-disable-next-line prefer-template\n    defaultMessage: ('{style, select, '\n      + 'punctuation {, } ' // HACK: select keys must match ListStyles, above, but must be statically coded for extract\n      + 'conjunction { {sp}and } ' // HACK: interpolating a space character to get a leading-space here\n      + 'other { }}'),\n  },\n  browseCatalog: {\n    id: 'courseCelebration.recommendations.browse_catalog',\n    description: 'Link to course catalog in course celebration',\n    defaultMessage: 'Explore more courses',\n  },\n  loadingRecommendations: {\n    id: 'courseCelebration.recommendations.loading_recommendations',\n    description: 'Screen-reader text for the loading screen for recommendations',\n    defaultMessage: 'Loading recommendations',\n  },\n});\n\nconst ListStyles = {\n  punctuation: 'punctuation',\n  conjunction: 'conjunction',\n};\n\nconst CourseCard = ({\n  original: {\n    title,\n    image,\n    owners,\n    marketingUrl,\n    onClick,\n  },\n  intl,\n}) => {\n  const formatList = (items, style) => (\n    items.join(intl.formatMessage(\n      messages.listJoin,\n      { style, sp: ' ' }, // HACK: there isn't a way to escape a leading space in the format, so pass one in\n    ))\n  );\n\n  const formattedOwners = formatList(\n    owners.map(owner => owner.key),\n    ListStyles.punctuation,\n    intl,\n  );\n\n  const subtitle = (\n    <FormattedMessage\n      id=\"courseCelebration.recommendations.card.schools.label\"\n      description=\"Screenreader label for the Schools and Partners running the course.\"\n      defaultMessage=\"Schools and Partners\"\n    >{text => (\n      <>\n        <span className=\"sr-only\">{text}: </span>\n        {truncate(formattedOwners, 40, { reserveLastWord: -1 })}\n      </>\n    )}\n    </FormattedMessage>\n  );\n\n  return (\n    <div\n      role=\"group\"\n      aria-label={title}\n    >\n      <Hyperlink\n        destination={marketingUrl}\n        className=\"text-decoration-none\"\n        onClick={onClick}\n      >\n        <Card isClickable style={{ width: '21rem', height: '100%' }}>\n          <Card.ImageCap src={image.src} />\n          <Card.Header title={truncate(title, 70, { reserveLastWord: -1 })} subtitle={subtitle} size=\"sm\" />\n          {/* Section is needed for internal vertical spacing to work out. If you can remove, be my guest */}\n          <Card.Section> <></> </Card.Section>\n          <Card.Footer textElement={intl.formatMessage(messages.recommendationsCourseFooter)}><></></Card.Footer>\n        </Card>\n      </Hyperlink>\n    </div>\n  );\n};\n\nCourseCard.propTypes = {\n  original: PropTypes.shape({\n    marketingUrl: PropTypes.string,\n    title: PropTypes.string,\n    image: PropTypes.shape({\n      src: PropTypes.string,\n    }),\n    owners: PropTypes.arrayOf(PropTypes.shape({\n      key: PropTypes.string,\n    })),\n    onClick: PropTypes.func,\n  }).isRequired,\n  intl: intlShape.isRequired,\n};\n\nconst IntlCard = injectIntl(CourseCard);\n\nconst CourseRecommendations = ({ intl, variant }) => {\n  const { courseId, recommendationsStatus } = useSelector(state => ({ ...state.recommendations, ...state.courseware }));\n  const { recommendations } = useModel('coursewareMeta', courseId);\n  const { org, number } = useModel('courseHomeMeta', courseId);\n  const dispatch = useDispatch();\n\n  const courseKey = `${org}+${number}`;\n  const { administrator } = getAuthenticatedUser();\n\n  useEffect(() => {\n    dispatch(fetchCourseRecommendations(courseKey, courseId));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  const recommendationsLength = recommendations ? recommendations.length : 0;\n\n  if (recommendationsStatus && recommendationsStatus !== LOADING) {\n    sendTrackEvent('edx.ui.lms.course_exit.recommendations.viewed', {\n      course_key: courseKey,\n      recommendations_status: recommendationsStatus,\n      recommendations_length: recommendationsLength,\n    });\n  }\n\n  if (recommendationsStatus === FAILED || (recommendationsStatus === LOADED && recommendationsLength < 2)) {\n    return (<CatalogSuggestion variant={variant} />);\n  }\n\n  if (recommendationsStatus === LOADING) {\n    return <PageLoading srMessage={intl.formatMessage(messages.loadingRecommendations)} />;\n  }\n\n  const onCardClick = (url) => (e) => {\n    e.preventDefault();\n    logClick(org, courseId, administrator, 'recommendation_discovery_card');\n    setTimeout(() => {\n      window.location.href = url;\n    }, (200));\n  };\n\n  const recommendationData = recommendations.map((recommendation) => (\n    { ...recommendation, onClick: onCardClick(recommendation.marketingUrl) }\n  ));\n\n  return (\n    <div className=\"course-recommendations d-flex flex-column align-items-center\" data-testid=\"course-recommendations\">\n      <h2 className=\"text-center mb-3\">{intl.formatMessage(messages.recommendationsHeading)}</h2>\n      <div className=\"mb-2 mt-3\">\n        <DataTable\n          isPaginated\n          itemCount={recommendationsLength}\n          data={recommendationData}\n          columns={[{ Header: 'Title', accessor: 'title' }]}\n          initialState={{\n            pageSize: 3,\n            pageIndex: 0,\n          }}\n        >\n          <CardView CardComponent={IntlCard} />\n        </DataTable>\n      </div>\n      <Hyperlink\n        style={{ textDecoration: 'underline' }}\n        destination={getConfig().SEARCH_CATALOG_URL}\n        className=\"text-center\"\n      >\n        {intl.formatMessage(messages.browseCatalog)}\n      </Hyperlink>\n    </div>\n  );\n};\n\nCourseRecommendations.propTypes = {\n  intl: intlShape.isRequired,\n  variant: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(CourseRecommendations);\n","import { logError } from '@edx/frontend-platform/logging';\n\nimport {\n  fetchCourseRecommendationsFailure,\n  fetchCourseRecommendationsRequest,\n  fetchCourseRecommendationsSuccess,\n} from './slice';\nimport {\n  getCourseRecommendations,\n  postUnsubscribeFromGoalReminders,\n} from './api';\nimport { updateModel } from '../../../../generic/model-store';\n\nexport default function fetchCourseRecommendations(courseKey, courseId) {\n  return async (dispatch) => {\n    dispatch(fetchCourseRecommendationsRequest({ courseId }));\n    try {\n      const recommendations = await getCourseRecommendations(courseKey);\n      dispatch(updateModel({\n        modelType: 'coursewareMeta',\n        model: {\n          id: courseId,\n          recommendations,\n        },\n      }));\n      dispatch(fetchCourseRecommendationsSuccess({ courseId }));\n    } catch (error) {\n      logError(error);\n      dispatch(fetchCourseRecommendationsFailure({ courseId }));\n    }\n  };\n}\n\nexport async function unsubscribeFromGoalReminders(courseId, daysPerWeek, subscribedToReminders) {\n  return postUnsubscribeFromGoalReminders(courseId, daysPerWeek, subscribedToReminders);\n}\n","import { getConfig, camelCaseObject } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nfunction filterRecommendationsList(\n  {\n    data: {\n      uuid,\n      recommendations,\n    },\n  },\n  {\n    data: enrollments,\n  },\n) {\n  const enrollmentRunIds = enrollments.map(({\n    courseDetails: {\n      courseId,\n    },\n  }) => courseId);\n\n  return recommendations.filter(({ uuid: recUuid, courseRunKeys }) => (\n    recUuid !== uuid && courseRunKeys.every((key) => !enrollmentRunIds.includes(key))\n  ));\n}\n\nexport async function getCourseRecommendations(courseKey) {\n  const discoveryApiUrl = getConfig().DISCOVERY_API_BASE_URL;\n  if (!discoveryApiUrl) {\n    return [];\n  }\n  const recommendationsUrl = new URL(`${discoveryApiUrl}/api/v1/course_recommendations/${courseKey}?exclude_utm=true`);\n  const enrollmentsUrl = new URL(`${getConfig().LMS_BASE_URL}/api/enrollment/v1/enrollment`);\n  const [recommendationsResponse, enrollmentsResponse] = await Promise.all([\n    getAuthenticatedHttpClient().get(recommendationsUrl),\n    getAuthenticatedHttpClient().get(enrollmentsUrl),\n  ]);\n  return filterRecommendationsList(camelCaseObject(recommendationsResponse), camelCaseObject(enrollmentsResponse));\n}\n\nexport async function postUnsubscribeFromGoalReminders(courseId) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_home/save_course_goal`);\n  return getAuthenticatedHttpClient().post(url.href, {\n    course_id: courseId,\n    subscribed_to_reminders: false,\n  });\n}\n","import React, { useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedinIn } from '@fortawesome/free-brands-svg-icons';\n\nimport {\n  FormattedDate, FormattedMessage, injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Alert,\n  breakpoints,\n  Button,\n  Hyperlink,\n  useWindowSize,\n} from '@edx/paragon';\nimport { CheckCircle } from '@edx/paragon/icons';\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\n\nimport CelebrationMobile from './assets/celebration_456x328.gif';\nimport CelebrationDesktop from './assets/celebration_750x540.gif';\nimport certificate from '../../../generic/assets/edX_certificate.png';\nimport certificateLocked from '../../../generic/assets/edX_locked_certificate.png';\nimport { FormattedPricing } from '../../../generic/upgrade-button';\nimport messages from './messages';\nimport { useModel } from '../../../generic/model-store';\nimport { requestCert } from '../../../course-home/data/thunks';\nimport ProgramCompletion from './ProgramCompletion';\nimport DashboardFootnote from './DashboardFootnote';\nimport UpgradeFootnote from './UpgradeFootnote';\nimport SocialIcons from '../../social-share/SocialIcons';\nimport { logClick, logVisit } from './utils';\nimport { DashboardLink, IdVerificationSupportLink, ProfileLink } from '../../../shared/links';\nimport CourseRecommendations from './CourseRecommendations';\n\nconst LINKEDIN_BLUE = '#2867B2';\n\nconst CourseCelebration = ({ intl }) => {\n  const wideScreen = useWindowSize().width >= breakpoints.medium.minWidth;\n  const { courseId } = useSelector(state => state.courseware);\n  const dispatch = useDispatch();\n  const {\n    certificateData,\n    end,\n    linkedinAddToProfileUrl,\n    marketingUrl,\n    offer,\n    relatedPrograms,\n    title,\n    verifyIdentityUrl,\n    verificationStatus,\n  } = useModel('coursewareMeta', courseId);\n\n  const {\n    org,\n    verifiedMode,\n    canViewCertificate,\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n\n  const {\n    certStatus,\n    certWebViewUrl,\n    certificateAvailableDate,\n  } = certificateData || {};\n\n  const { administrator } = getAuthenticatedUser();\n\n  const dashboardLink = <DashboardLink />;\n  const idVerificationSupportLink = <IdVerificationSupportLink />;\n  const profileLink = <ProfileLink />;\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n\n  let buttonPrefix = null;\n  let buttonLocation;\n  let buttonText;\n  let buttonVariant = 'outline-primary';\n  let buttonEvent = null;\n  let buttonSuffix = null;\n  let certificateImage = certificate;\n  let footnote;\n  let message;\n  let certHeader;\n  let visitEvent = 'celebration_generic';\n  // These cases are taken from the edx-platform `get_cert_data` function found in lms/courseware/views/views.py\n  switch (certStatus) {\n    case 'downloadable':\n      certHeader = intl.formatMessage(messages.certificateHeaderDownloadable);\n      message = (\n        <p>\n          <FormattedMessage\n            id=\"courseCelebration.certificateBody.available\"\n            defaultMessage=\"\n              Showcase your accomplishment on LinkedIn or your resumé today.\n              You can download your certificate now and access it any time from your\n              {dashboardLink} and {profileLink}.\"\n            values={{ dashboardLink, profileLink }}\n            description=\"Recommending an action for learner when course certificate is available\"\n          />\n        </p>\n      );\n      if (certWebViewUrl) {\n        buttonLocation = `${getConfig().LMS_BASE_URL}${certWebViewUrl}`;\n        buttonText = intl.formatMessage(messages.viewCertificateButton);\n      }\n      if (linkedinAddToProfileUrl) {\n        buttonPrefix = (\n          <Button\n            className=\"mr-3\"\n            href={linkedinAddToProfileUrl}\n            onClick={() => logClick(org, courseId, administrator, 'linkedin_add_to_profile')}\n            style={{ backgroundColor: LINKEDIN_BLUE, border: 'none' }}\n          >\n            <FontAwesomeIcon icon={faLinkedinIn} className=\"mr-3\" />\n            {`${intl.formatMessage(messages.linkedinAddToProfileButton)}`}\n          </Button>\n        );\n      }\n      buttonEvent = 'view_cert';\n      visitEvent = 'celebration_with_cert';\n      footnote = <DashboardFootnote variant={visitEvent} />;\n      break;\n    case 'earned_but_not_available': {\n      const endDate = <FormattedDate value={end} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n      const certAvailableDate = <FormattedDate value={certificateAvailableDate} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n      certHeader = intl.formatMessage(messages.certificateHeaderNotAvailable);\n      message = (\n        <>\n          <p>\n            <FormattedMessage\n              id=\"courseCelebration.certificateBody.notAvailable.endDate.v2\"\n              defaultMessage=\"This course ends on {endDate}. Final grades and any earned certificates are\n              scheduled to be available after {certAvailableDate}.\"\n              values={{ endDate, certAvailableDate }}\n              description=\"This shown for leaner when they are eligible for certifcate but it't not available yet, it could because leaners just finished the course quickly!\"\n            />\n          </p>\n          <p>\n            {intl.formatMessage(messages.certificateNotAvailableBodyAccessCert)}\n          </p>\n        </>\n      );\n      visitEvent = 'celebration_with_unavailable_cert';\n      footnote = <DashboardFootnote variant={visitEvent} />;\n      break;\n    }\n    case 'requesting':\n      // The requesting status needs a different button because it does a POST instead of a GET.\n      // So we don't set buttonLocation and instead define a custom button as a buttonPrefix.\n      buttonEvent = 'request_cert';\n      buttonPrefix = (\n        <Button\n          variant={buttonVariant}\n          onClick={() => {\n            logClick(org, courseId, administrator, buttonEvent);\n            dispatch(requestCert(courseId));\n          }}\n        >\n          {intl.formatMessage(messages.requestCertificateButton)}\n        </Button>\n      );\n      certHeader = intl.formatMessage(messages.certificateHeaderRequestable);\n      message = (<p>{intl.formatMessage(messages.requestCertificateBodyText)}</p>);\n      visitEvent = 'celebration_with_requestable_cert';\n      footnote = <DashboardFootnote variant={visitEvent} />;\n      break;\n    case 'unverified':\n      certHeader = intl.formatMessage(messages.certificateHeaderUnverified);\n      visitEvent = 'celebration_unverified';\n      footnote = <DashboardFootnote variant={visitEvent} />;\n      if (verificationStatus === 'pending') {\n        message = (<p>{intl.formatMessage(messages.verificationPending)}</p>);\n      } else {\n        buttonText = intl.formatMessage(messages.verifyIdentityButton);\n        buttonEvent = 'verify_id';\n        buttonLocation = verifyIdentityUrl;\n        // todo: check for idVerificationSupportLink null\n        message = (\n          <p>\n            <FormattedMessage\n              id=\"courseCelebration.certificateBody.unverified\"\n              defaultMessage=\"In order to generate a certificate, you must complete ID verification.\n                {idVerificationSupportLink} now.\"\n              values={{ idVerificationSupportLink }}\n              description=\"Its shown when learner are not verified thus it recommends going over the verification process\"\n            />\n          </p>\n        );\n      }\n      break;\n    case 'audit_passing':\n    case 'honor_passing':\n      if (verifiedMode) {\n        certHeader = intl.formatMessage(messages.certificateHeaderUpgradable);\n        message = (\n          <p>\n            <FormattedMessage\n              id=\"courseCelebration.certificateBody.upgradable\"\n              defaultMessage=\"It’s not too late to upgrade. For {price} you will unlock access to all graded\n                assignments in this course. Upon completion, you will receive a verified certificate which is a\n                valuable credential to improve your job prospects and advance your career, or highlight your\n                certificate in school applications.\"\n              values={{ price: <FormattedPricing inline offer={offer} verifiedMode={verifiedMode} /> }}\n              description=\"Body text when the learner needs to upgrade to earn a certifcate and they have passed the course\"\n            />\n            <br />\n            {getConfig().SUPPORT_URL_VERIFIED_CERTIFICATE && (\n              <Hyperlink\n                className=\"text-gray-700\"\n                style={{ textDecoration: 'underline' }}\n                destination={getConfig().SUPPORT_URL_VERIFIED_CERTIFICATE}\n              >\n                {intl.formatMessage(messages.verifiedCertificateSupportLink)}\n              </Hyperlink>\n            )}\n          </p>\n        );\n        buttonText = intl.formatMessage(messages.upgradeButton);\n        buttonEvent = 'upgrade';\n        buttonLocation = verifiedMode.upgradeUrl;\n        buttonVariant = 'primary';\n        if (offer) {\n          buttonSuffix = (\n            <span className=\"ml-2 align-middle\">\n              <FormattedMessage\n                id=\"courseCelebration.upgradeDiscountCodePrompt\"\n                defaultMessage=\"Use code {code} at checkout for {percent}% off!\"\n                values={{\n                  code: (<b>{offer.code}</b>),\n                  percent: offer.percentage,\n                }}\n                description=\"Shown if learner can use a discount code when they upgrade the course\"\n              />\n            </span>\n          );\n        }\n        certificateImage = certificateLocked;\n        visitEvent = 'celebration_upgrade';\n        if (verifiedMode.accessExpirationDate) {\n          footnote = <UpgradeFootnote deadline={verifiedMode.accessExpirationDate} href={verifiedMode.upgradeUrl} />;\n        } else {\n          footnote = <DashboardFootnote variant={visitEvent} />;\n        }\n      } else {\n        visitEvent = 'celebration_audit_no_upgrade';\n      }\n      break;\n    default:\n      if (!canViewCertificate) {\n        //  We reuse the cert event here. Since this default state is so\n        //  Similar to the earned_not_available state, this event name should be fine\n        //  to cover the same cases.\n        visitEvent = 'celebration_with_unavailable_cert';\n        certHeader = intl.formatMessage(messages.certificateHeaderNotAvailable);\n        const endDate = intl.formatDate(end, {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric',\n          ...timezoneFormatArgs,\n        });\n        message = (\n          <>\n            <p>\n              {intl.formatMessage(messages.certificateNotAvailableEndDateBody, { endDate })}\n            </p>\n            <p>\n              {intl.formatMessage(messages.certificateNotAvailableBodyAccessCert)}\n            </p>\n          </>\n        );\n      }\n      break;\n  }\n\n  useEffect(() => logVisit(org, courseId, administrator, visitEvent), [org, courseId, administrator, visitEvent]);\n\n  return (\n    <>\n      <Helmet>\n        <title>{`${intl.formatMessage(messages.congratulationsHeader)} | ${title} | ${getConfig().SITE_NAME}`}</title>\n      </Helmet>\n      <div className=\"row w-100 mx-0 mb-4 px-5 py-4 border border-light\">\n        <div className=\"col-12 p-0 h2 text-center\">\n          {intl.formatMessage(messages.congratulationsHeader)}\n        </div>\n        <div className=\"col-12 p-0 font-weight-normal lead text-center\">\n          {intl.formatMessage(messages.completedCourseHeader)}\n          {marketingUrl && ` ${intl.formatMessage(messages.shareMessage)}`}\n          <SocialIcons\n            analyticsId=\"edx.ui.lms.course_exit.social_share.clicked\"\n            className=\"mt-2\"\n            courseId={courseId}\n            emailSubject={messages.socialMessage}\n            socialMessage={messages.socialMessage}\n          />\n        </div>\n        <div className=\"col-12 mt-3 mb-4 px-0 px-md-5 text-center\">\n          {!wideScreen && (\n            <img\n              src={CelebrationMobile}\n              alt={`${intl.formatMessage(messages.congratulationsImage)}`}\n              className=\"img-fluid\"\n            />\n          )}\n          {wideScreen && (\n            <img\n              src={CelebrationDesktop}\n              alt={`${intl.formatMessage(messages.congratulationsImage)}`}\n              className=\"img-fluid\"\n              style={{ width: '36rem' }}\n            />\n          )}\n        </div>\n        <div className=\"col-12 px-0 px-md-5\">\n          {certHeader && (\n          <Alert variant=\"success\" icon={CheckCircle}>\n            <div className=\"row w-100 m-0\">\n              <div className=\"col order-1 order-md-0 pl-0 pr-0 pr-md-5\">\n                <div className=\"h4\">{certHeader}</div>\n                {message}\n                <div className=\"mt-2\">\n                  {buttonPrefix}\n                  {buttonLocation && (\n                    <Button\n                      variant={buttonVariant}\n                      href={buttonLocation}\n                      className=\"w-xs-100 w-md-auto\"\n                      onClick={() => logClick(org, courseId, administrator, buttonEvent)}\n                    >\n                      {buttonText}\n                    </Button>\n                  )}\n                  {buttonSuffix}\n                </div>\n              </div>\n              {certStatus !== 'unverified' && (\n                <div className=\"col-12 order-0 col-md-3 order-md-1 w-100 mb-3 p-0 text-center\">\n                  <img\n                    src={certificateImage}\n                    alt={`${intl.formatMessage(messages.certificateImage)}`}\n                    className=\"w-100\"\n                    style={{ maxWidth: '13rem' }}\n                  />\n                </div>\n              )}\n            </div>\n          </Alert>\n          )}\n          {relatedPrograms && relatedPrograms.map(program => (\n            <ProgramCompletion\n              key={program.uuid}\n              progress={program.progress}\n              title={program.title}\n              type={program.slug}\n              url={program.url}\n            />\n          ))}\n          {footnote}\n          <CourseRecommendations variant={visitEvent} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nCourseCelebration.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseCelebration);\n","import React, { useEffect } from 'react';\n\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Helmet } from 'react-helmet';\nimport { useSelector } from 'react-redux';\nimport { Alert, Button } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { useModel } from '../../../generic/model-store';\n\nimport CatalogSuggestion from './CatalogSuggestion';\nimport DashboardFootnote from './DashboardFootnote';\nimport messages from './messages';\nimport { logClick, logVisit } from './utils';\n\nconst CourseInProgress = ({ intl }) => {\n  const { courseId } = useSelector(state => state.courseware);\n  const {\n    org,\n    tabs,\n    title,\n  } = useModel('courseHomeMeta', courseId);\n  const { administrator } = getAuthenticatedUser();\n\n  // Get dates tab link for 'view course schedule' button\n  const datesTab = tabs.find(tab => tab.slug === 'dates');\n  const datesTabLink = datesTab && datesTab.url;\n\n  useEffect(() => logVisit(org, courseId, administrator, 'in_progress'), [org, courseId, administrator]);\n\n  return (\n    <>\n      <Helmet>\n        <title>{`${intl.formatMessage(messages.endOfCourseTitle)} | ${title} | ${getConfig().SITE_NAME}`}</title>\n      </Helmet>\n      <div className=\"row w-100 mx-0 mb-4 px-5 py-4 border border-light justify-content-center\">\n        <div className=\"col-12 p-0 h2 text-center\">\n          { intl.formatMessage(messages.courseInProgressHeader) }\n        </div>\n        <Alert variant=\"primary\" className=\"mt-4\">\n          <div className=\"row w-100 m-0 align-items-start\">\n            <div className=\"col-md p-0\">{ intl.formatMessage(messages.courseInProgressDescription) }</div>\n            {datesTabLink && (\n              <Button\n                variant=\"primary\"\n                className=\"mt-3 my-md-0 mb-1 ml-md-5 w-xs-100 w-md-auto\"\n                href={datesTabLink}\n                onClick={() => logClick(org, courseId, administrator, 'view_dates_tab')}\n              >\n                {intl.formatMessage(messages.viewCourseScheduleButton)}\n              </Button>\n            )}\n          </div>\n        </Alert>\n        <DashboardFootnote variant=\"in_progress\" />\n        <CatalogSuggestion variant=\"in_progress\" />\n      </div>\n    </>\n  );\n};\n\nCourseInProgress.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseInProgress);\n","import React, { useEffect } from 'react';\n\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Helmet } from 'react-helmet';\nimport { useSelector } from 'react-redux';\nimport { Alert, Button } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { useModel } from '../../../generic/model-store';\n\nimport CatalogSuggestion from './CatalogSuggestion';\nimport DashboardFootnote from './DashboardFootnote';\nimport messages from './messages';\nimport { logClick, logVisit } from './utils';\n\nconst CourseNonPassing = ({ intl }) => {\n  const { courseId } = useSelector(state => state.courseware);\n  const {\n    org,\n    tabs,\n    title,\n  } = useModel('courseHomeMeta', courseId);\n  const { administrator } = getAuthenticatedUser();\n\n  // Get progress tab link for 'view grades' button\n  const progressTab = tabs.find(tab => tab.slug === 'progress');\n  const progressLink = progressTab && progressTab.url;\n\n  useEffect(() => logVisit(org, courseId, administrator, 'nonpassing'), [org, courseId, administrator]);\n\n  return (\n    <>\n      <Helmet>\n        <title>{`${intl.formatMessage(messages.endOfCourseTitle)} | ${title} | ${getConfig().SITE_NAME}`}</title>\n      </Helmet>\n      <div className=\"row w-100 mx-0 mb-4 px-5 py-4 border border-light justify-content-center\">\n        <div className=\"col-12 p-0 h2 text-center\">\n          { intl.formatMessage(messages.endOfCourseHeader) }\n        </div>\n        <Alert variant=\"primary\" className=\"col col-lg-10 mt-4\">\n          <div className=\"row w-100 m-0 align-items-start\">\n            <div className=\"flex-grow-1 col-sm p-0\">{ intl.formatMessage(messages.endOfCourseDescription) }</div>\n            {progressLink && (\n              <Button\n                variant=\"primary\"\n                className=\"flex-shrink-0 mt-3 mt-sm-0 mb-1 mb-sm-0 ml-sm-5\"\n                href={progressLink}\n                onClick={() => logClick(org, courseId, administrator, 'view_grades')}\n              >\n                {intl.formatMessage(messages.viewGradesButton)}\n              </Button>\n            )}\n          </div>\n        </Alert>\n        <DashboardFootnote variant=\"nonpassing\" />\n        <CatalogSuggestion variant=\"nonpassing\" />\n      </div>\n    </>\n  );\n};\n\nCourseNonPassing.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseNonPassing);\n","import React, { useEffect } from 'react';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\nimport { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport CourseCelebration from './CourseCelebration';\nimport CourseInProgress from './CourseInProgress';\nimport CourseNonPassing from './CourseNonPassing';\nimport { COURSE_EXIT_MODES, getCourseExitMode } from './utils';\nimport messages from './messages';\nimport { unsubscribeFromGoalReminders } from './data/thunks';\n\nimport { useModel } from '../../../generic/model-store';\n\nconst CourseExit = ({ intl }) => {\n  const { courseId } = useSelector(state => state.courseware);\n  const {\n    certificateData,\n    courseExitPageIsActive,\n    courseGoals,\n    enrollmentMode,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n  } = useModel('coursewareMeta', courseId);\n\n  const {\n    isMasquerading,\n    canViewCertificate,\n  } = useModel('courseHomeMeta', courseId);\n\n  const mode = getCourseExitMode(\n    certificateData,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n    courseExitPageIsActive,\n    canViewCertificate,\n  );\n\n  // Audit users cannot fully complete a course, so we will\n  // unsubscribe them from goal reminders once they reach the course exit page\n  // to avoid spamming them with goal reminder emails\n  if (courseGoals && enrollmentMode === 'audit' && !isMasquerading) {\n    useEffect(() => {\n      unsubscribeFromGoalReminders(courseId);\n    }, []);\n  }\n\n  let body = null;\n  if (mode === COURSE_EXIT_MODES.nonPassing) {\n    body = (<CourseNonPassing />);\n  } else if (mode === COURSE_EXIT_MODES.inProgress) {\n    body = (<CourseInProgress />);\n  } else if (mode === COURSE_EXIT_MODES.celebration) {\n    body = (<CourseCelebration />);\n  } else {\n    return (<Navigate to={`/course/${courseId}`} replace />);\n  }\n\n  return (\n    <>\n      <div className=\"row w-100 mt-2 mb-4 justify-content-end\">\n        <Button\n          variant=\"outline-primary\"\n          href={`${getConfig().LMS_BASE_URL}/dashboard`}\n        >\n          {intl.formatMessage(messages.viewCoursesButton)}\n        </Button>\n      </div>\n      {body}\n    </>\n  );\n};\n\nCourseExit.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseExit);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  failure: {\n    id: 'learning.loading.failure',\n    defaultMessage: 'There was an error loading this course.',\n    description: 'Can be because internet connection or any technical other reason',\n  },\n  loading: {\n    id: 'learning.loading',\n    defaultMessage: 'Loading course page…',\n    description: 'When content of the course is still loading...etc',\n  },\n});\n\nexport default messages;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  courseMaterial: {\n    id: 'learn.navigation.course.tabs.label',\n    defaultMessage: 'Course Material',\n    description: 'The accessible label for course tabs navigation',\n  },\n});\n\nexport default messages;\n","import { useLayoutEffect, useRef, useState } from 'react';\nimport { useWindowSize } from '@edx/paragon';\n\nconst invisibleStyle = {\n  position: 'absolute',\n  left: 0,\n  pointerEvents: 'none',\n  visibility: 'hidden',\n};\n\n/**\n * This hook will find the index of the last child of a containing element\n * that fits within its bounding rectangle. This is done by summing the widths\n * of the children until they exceed the width of the container.\n *\n * The hook returns an array containing:\n * [indexOfLastVisibleChild, containerElementRef, invisibleStyle, overflowElementRef]\n *\n * indexOfLastVisibleChild - the index of the last visible child\n * containerElementRef - a ref to be added to the containing html node\n * invisibleStyle - a set of styles to be applied to child of the containing node\n *    if it needs to be hidden. These styles remove the element visually, from\n *    screen readers, and from normal layout flow. But, importantly, these styles\n *    preserve the width of the element, so that future width calculations will\n *    still be accurate.\n * overflowElementRef - a ref to be added to an html node inside the container\n *    that is likely to be used to contain a \"More\" type dropdown or other\n *    mechanism to reveal hidden children. The width of this element is always\n *    included when determining which children will fit or not. Usage of this ref\n *    is optional.\n */\nexport default function useIndexOfLastVisibleChild() {\n  const containerElementRef = useRef(null);\n  const overflowElementRef = useRef(null);\n  const containingRectRef = useRef({});\n  const [indexOfLastVisibleChild, setIndexOfLastVisibleChild] = useState(-1);\n  const windowSize = useWindowSize();\n\n  useLayoutEffect(() => {\n    const containingRect = containerElementRef.current.getBoundingClientRect();\n\n    // No-op if the width is unchanged.\n    // (Assumes tabs themselves don't change count or width).\n    if (!containingRect.width === containingRectRef.current.width) {\n      return;\n    }\n    // Update for future comparison\n    containingRectRef.current = containingRect;\n\n    // Get array of child nodes from NodeList form\n    const childNodesArr = Array.prototype.slice.call(containerElementRef.current.children);\n    const { nextIndexOfLastVisibleChild } = childNodesArr\n      // filter out the overflow element\n      .filter(childNode => childNode !== overflowElementRef.current)\n      // sum the widths to find the last visible element's index\n      .reduce((acc, childNode, index) => {\n        // use floor to prevent rounding errors\n        acc.sumWidth += Math.floor(childNode.getBoundingClientRect().width);\n        if (acc.sumWidth <= containingRect.width) {\n          acc.nextIndexOfLastVisibleChild = index;\n        }\n        return acc;\n      }, {\n        // Include the overflow element's width to begin with. Doing this means\n        // sometimes we'll show a dropdown with one item in it when it would fit,\n        // but allowing this case dramatically simplifies the calculations we need\n        // to do above.\n        sumWidth: overflowElementRef.current ? overflowElementRef.current.getBoundingClientRect().width : 0,\n        nextIndexOfLastVisibleChild: -1,\n      });\n\n    setIndexOfLastVisibleChild(nextIndexOfLastVisibleChild);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [windowSize, containerElementRef.current]);\n\n  return [indexOfLastVisibleChild, containerElementRef, invisibleStyle, overflowElementRef];\n}\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown } from '@edx/paragon';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport classNames from 'classnames';\n\nimport useIndexOfLastVisibleChild from './useIndexOfLastVisibleChild';\n\nconst Tabs = ({ children, className, ...attrs }) => {\n  const [\n    indexOfLastVisibleChild,\n    containerElementRef,\n    invisibleStyle,\n    overflowElementRef,\n  ] = useIndexOfLastVisibleChild();\n\n  const tabChildren = useMemo(() => {\n    const childrenArray = React.Children.toArray(children);\n    const indexOfOverflowStart = indexOfLastVisibleChild + 1;\n\n    // All tabs will be rendered. Those that would overflow are set to invisible.\n    const wrappedChildren = childrenArray.map((child, index) => React.cloneElement(child, {\n      style: index > indexOfLastVisibleChild ? invisibleStyle : null,\n    }));\n\n    // Build the list of items to put in the overflow menu\n    const overflowChildren = childrenArray.slice(indexOfOverflowStart)\n      .map(overflowChild => React.cloneElement(overflowChild, { className: 'dropdown-item' }));\n\n    // Insert the overflow menu at the cut off index (even if it will be hidden\n    // it so it can be part of measurements)\n    wrappedChildren.splice(\n      indexOfOverflowStart,\n      0, (\n        <div\n          className=\"nav-item flex-shrink-0\"\n          style={indexOfOverflowStart >= React.Children.count(children) ? invisibleStyle : null}\n          ref={overflowElementRef}\n          key=\"overflow\"\n        >\n          <Dropdown className=\"h-100\">\n            <Dropdown.Toggle variant=\"link\" className=\"nav-link h-100\" id=\"learn.course.tabs.navigation.overflow.menu\">\n              <FormattedMessage\n                id=\"learn.course.tabs.navigation.overflow.menu\"\n                description=\"The title of the overflow menu for course tabs\"\n                defaultMessage=\"More...\"\n              />\n            </Dropdown.Toggle>\n            <Dropdown.Menu className=\"dropdown-menu-right\">{overflowChildren}</Dropdown.Menu>\n          </Dropdown>\n        </div>\n      ),\n    );\n    return wrappedChildren;\n  }, [children, indexOfLastVisibleChild, invisibleStyle, overflowElementRef]);\n\n  return (\n    <nav\n      {...attrs}\n      className={classNames('nav flex-nowrap', className)}\n      ref={containerElementRef}\n    >\n      {tabChildren}\n    </nav>\n  );\n};\n\nTabs.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\nTabs.defaultProps = {\n  children: null,\n  className: undefined,\n};\n\nexport default Tabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport classNames from 'classnames';\n\nimport messages from './messages';\nimport Tabs from '../generic/tabs/Tabs';\n\nconst CourseTabsNavigation = ({\n  activeTabSlug, className, tabs, intl,\n}) => (\n  <div id=\"courseTabsNavigation\" className={classNames('course-tabs-navigation', className)}>\n    <div className=\"container-xl\">\n      <Tabs\n        className=\"nav-underline-tabs\"\n        aria-label={intl.formatMessage(messages.courseMaterial)}\n      >\n        {tabs.map(({ url, title, slug }) => (\n          <a\n            key={slug}\n            className={classNames('nav-item flex-shrink-0 nav-link', { active: slug === activeTabSlug })}\n            href={url}\n          >\n            {title}\n          </a>\n        ))}\n      </Tabs>\n    </div>\n  </div>\n);\n\nCourseTabsNavigation.propTypes = {\n  activeTabSlug: PropTypes.string,\n  className: PropTypes.string,\n  tabs: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    slug: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n  })).isRequired,\n  intl: intlShape.isRequired,\n};\n\nCourseTabsNavigation.defaultProps = {\n  activeTabSlug: undefined,\n  className: null,\n};\n\nexport default injectIntl(CourseTabsNavigation);\n","export default __webpack_public_path__ + \"b69837871e2ef32b6802932f909dd089.png\";","export default __webpack_public_path__ + \"1a0e59bbcf5275b2cf9957f81a555867.png\";","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  congratulations: {\n    id: 'learning.streakCelebration.congratulations',\n    defaultMessage: 'Congratulations!',\n    description: 'Shown to learners when are using the learning app for X days in a row',\n  },\n  streakBody: {\n    id: 'learning.streakCelebration.body',\n    defaultMessage: 'Keep it up, you’re on a roll!',\n  },\n  streakButton: {\n    id: 'learning.streakCelebration.button',\n    defaultMessage: 'Keep it up',\n    description: 'Text on the button which closes the celebration dialog',\n  },\n  streakButtonSrOnly: {\n    id: 'learning.streakCelebration.buttonSrOnly',\n    defaultMessage: 'Close modal and continue',\n    description: 'Screenreader label for streakButton text',\n  },\n  streakButtonAA759: {\n    id: 'learning.streakCelebration.buttonAA759',\n    defaultMessage: 'Continue with course',\n  },\n  streakHeader: {\n    id: 'learning.streakCelebration.header',\n    defaultMessage: 'day streak',\n    description: 'Will come after a number. For example, 3 day streak',\n  },\n  streakFactoidABoldedSection: {\n    id: 'learning.streakCelebration.factoidABoldedSection',\n    defaultMessage: 'are 20x more likely to pass their course',\n    description: 'This bolded section is in the following sentence: Users who learn 3 days in a row {bolded_section} than those who don\\'t.',\n  },\n  streakFactoidBBoldedSection: {\n    id: 'learning.streakCelebration.factoidBBoldedSection',\n    defaultMessage: 'complete 5x as much course content on average',\n    description: 'This bolded section is in the following sentence: Users who learn 3 days in a row {bolded_section} vs. those who don\\'t.',\n  },\n  streakDiscountMessage: {\n    id: 'learning.streakCelebration.streakDiscountMessage',\n    defaultMessage: 'You’ve unlocked a {percent}% off discount when you upgrade this course for a limited time only.',\n    description: 'This message describes a discount the user becomes eligible for when they hit their three day streak',\n  },\n});\n\nexport default messages;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport {\n  FormattedMessage, injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { Lightbulb, MoneyFilled } from '@edx/paragon/icons';\nimport {\n  Alert, breakpoints, Icon, ModalDialog, Spinner, useWindowSize,\n} from '@edx/paragon';\nimport { useDispatch } from 'react-redux';\nimport { UpgradeNowButton } from '../../generic/upgrade-button';\n\nimport { useModel } from '../../generic/model-store';\nimport StreakMobileImage from './assets/Streak_mobile.png';\nimport StreakDesktopImage from './assets/Streak_desktop.png';\nimport messages from './messages';\nimport { recordModalClosing, recordStreakCelebration } from './utils';\n\nfunction getRandomFactoid(intl, streakLength) {\n  const boldedSectionA = intl.formatMessage(messages.streakFactoidABoldedSection);\n  const boldedSectionB = intl.formatMessage(messages.streakFactoidBBoldedSection);\n  const factoids = [\n    (<FormattedMessage\n      id=\"learning.streakcelebration.factoida\"\n      defaultMessage=\"Users who learn {streak_length} days in a row {bolded_section} than those who don’t.\"\n      values={{\n        bolded_section: (<b>{boldedSectionA}</b>),\n        streak_length: (streakLength),\n      }}\n    />),\n    (<FormattedMessage\n      id=\"learning.streakcelebration.factoidb\"\n      defaultMessage=\"Users who learn {streak_length} days in a row {bolded_section} vs. those who don’t.\"\n      values={{\n        bolded_section: (<b>{boldedSectionB}</b>),\n        streak_length: (streakLength),\n      }}\n    />),\n  ];\n  return factoids[Math.floor(Math.random() * (factoids.length))];\n}\n\nasync function calculateVoucherDiscount(voucher, sku, username) {\n  const urlBase = `${getConfig().ECOMMERCE_BASE_URL}/api/v2/baskets/calculate`;\n  const url = `${urlBase}/?code=${voucher}&sku=${sku}&username=${username}`;\n  return getAuthenticatedHttpClient().get(url)\n    .then(res => camelCaseObject(res));\n}\n\nconst CloseText = ({ intl }) => (\n  <span>\n    {intl.formatMessage(messages.streakButton)}\n    <span className=\"sr-only\">. {intl.formatMessage(messages.streakButtonSrOnly)}</span>\n  </span>\n);\n\nconst StreakModal = ({\n  courseId, metadataModel, streakLengthToCelebrate, intl, isStreakCelebrationOpen,\n  closeStreakCelebration, streakDiscountCouponEnabled, verifiedMode, ...rest\n}) => {\n  const { org, celebrations, username } = useModel('courseHomeMeta', courseId);\n  const factoid = getRandomFactoid(intl, streakLengthToCelebrate);\n  // eslint-disable-next-line no-unused-vars\n  const [randomFactoid, setRandomFactoid] = useState(factoid); // Don't change factoid on re-render\n\n  // Open edX Folks: if you create a voucher with this code, the MFE will notice and show the discount\n  const discountCode = 'ZGY11119949';\n  // Negative means \"we don't know yet\" vs zero meaning no discount available\n  const [discountPercent, setDiscountPercent] = useState(-1);\n  const queryingDiscount = discountPercent < 0;\n\n  const wideScreen = useWindowSize().width >= breakpoints.small.minWidth;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isStreakCelebrationOpen) {\n      recordStreakCelebration(org, courseId);\n    }\n  }, [isStreakCelebrationOpen, org, courseId]);\n\n  // Ask ecommerce to calculate discount savings\n  useEffect(() => {\n    if (streakDiscountCouponEnabled && verifiedMode && getConfig().ECOMMERCE_BASE_URL) {\n      calculateVoucherDiscount(discountCode, verifiedMode.sku, username)\n        .then(\n          (result) => {\n            const { totalInclTax, totalInclTaxExclDiscounts } = result.data;\n            if (totalInclTaxExclDiscounts && totalInclTax !== totalInclTaxExclDiscounts) {\n              // Just store the percent (rather than using these values directly), because ecommerce doesn't give us\n              // the currency symbol to use, so we want to use the symbol that LMS gives us. And I don't want to assume\n              // ecommerce's currency is the same as the LMS. So we'll keep using the values in verifiedMode, just\n              // multiplied by the calculated percentage.\n              setDiscountPercent(1 - totalInclTax / totalInclTaxExclDiscounts);\n              sendTrackEvent('edx.bi.course.streak_discount_enabled', {\n                course_id: courseId,\n                sku: verifiedMode.sku,\n              });\n            } else {\n              setDiscountPercent(0);\n            }\n          },\n          () => {\n            // ignore any errors - we just won't show the discount to the user then\n            setDiscountPercent(0);\n          },\n        );\n    } else {\n      setDiscountPercent(0);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [streakDiscountCouponEnabled, username, verifiedMode]);\n\n  if (!isStreakCelebrationOpen) {\n    return null;\n  }\n\n  let upgradeUrl;\n  let mode;\n  let offer;\n\n  if (verifiedMode) {\n    upgradeUrl = `${verifiedMode.upgradeUrl}`;\n    mode = {\n      currencySymbol: verifiedMode.currencySymbol,\n      price: verifiedMode.price,\n      upgradeUrl,\n    };\n\n    if (discountPercent > 0) {\n      const discountMultipler = 1 - discountPercent;\n      offer = {\n        discountedPrice: `${verifiedMode.currencySymbol}${(mode.price * discountMultipler).toFixed(2).toString()}`,\n        originalPrice: `${verifiedMode.currencySymbol}${mode.price.toString()}`,\n        upgradeUrl: `${mode.upgradeUrl}&code=${discountCode}`,\n      };\n    }\n  }\n\n  const title = `${streakLengthToCelebrate} ${intl.formatMessage(messages.streakHeader)}`;\n  const showOffer = offer && streakDiscountCouponEnabled;\n\n  return (\n    <ModalDialog\n      className=\"streak-modal modal-dialog-centered\"\n      title={title}\n      onClose={() => {\n        closeStreakCelebration();\n        recordModalClosing(celebrations, org, courseId, dispatch);\n      }}\n      isOpen={isStreakCelebrationOpen}\n      isFullscreenScroll\n      {...rest}\n    >\n      <ModalDialog.Header className=\"modal-header\">\n        <ModalDialog.Title className=\"mr-0 modal-title\">\n          {title}\n        </ModalDialog.Title>\n      </ModalDialog.Header>\n      <ModalDialog.Body className=\"modal-body\">\n        <p className=\"text-center\">{intl.formatMessage(messages.streakBody)}</p>\n        <p className=\"modal-image text-center\">\n          {!wideScreen && <img src={StreakMobileImage} alt=\"\" className=\"img-fluid\" />}\n          {wideScreen && <img src={StreakDesktopImage} alt=\"\" className=\"img-fluid\" />}\n        </p>\n        { queryingDiscount && (\n          <Spinner animation=\"border\" variant=\"primary\" />\n        )}\n        { !queryingDiscount && !showOffer && (\n          <div className=\"d-flex py-3 bg-light-300\">\n            <Icon className=\"col-small ml-3\" src={Lightbulb} />\n            <div className=\"col-11 factoid-wrapper\">\n              {randomFactoid}\n            </div>\n          </div>\n        )}\n        { !queryingDiscount && showOffer && (\n          <Alert variant=\"success\" className=\"px-0\">\n            <div className=\"d-flex\">\n              <Icon className=\"col-small ml-3 text-success-500\" src={MoneyFilled} />\n              <div className=\"col-11 factoid-wrapper\">\n                <b>{intl.formatMessage(messages.congratulations)}</b>\n                &nbsp;{intl.formatMessage(messages.streakDiscountMessage, {\n                  percent: (discountPercent * 100).toFixed(0),\n                })}&nbsp;\n                <FormattedMessage\n                  id=\"learning.streakCelebration.streakCelebrationCouponEndDateMessage\"\n                  defaultMessage=\"Ends {date}.\"\n                  values={{\n                    date: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toLocaleDateString({ timeZone: 'UTC' }),\n                  }}\n                />\n              </div>\n            </div>\n          </Alert>\n        )}\n      </ModalDialog.Body>\n      <ModalDialog.Footer className=\"modal-footer d-block\">\n        { !queryingDiscount && showOffer && (\n          <>\n            {!wideScreen && (\n              <>\n                <UpgradeNowButton\n                  className=\"upgrade mb-3\"\n                  size=\"sm\"\n                  offer={offer}\n                  variant=\"brand\"\n                  verifiedMode={mode}\n                />\n                <ModalDialog.CloseButton variant=\"outline-brand\" className=\"btn-sm\">\n                  {intl.formatMessage(messages.streakButtonAA759)}\n                </ModalDialog.CloseButton>\n              </>\n            )}\n            {wideScreen && (\n              <>\n                <UpgradeNowButton\n                  className=\"upgrade mb-3\"\n                  offer={offer}\n                  variant=\"brand\"\n                  verifiedMode={mode}\n                />\n                <ModalDialog.CloseButton variant=\"outline-brand\">\n                  {intl.formatMessage(messages.streakButtonAA759)}\n                </ModalDialog.CloseButton>\n              </>\n            )}\n          </>\n        )}\n        { !queryingDiscount && !showOffer && (\n          <ModalDialog.CloseButton className=\"px-5\" variant=\"primary\"><CloseText intl={intl} /></ModalDialog.CloseButton>\n        )}\n      </ModalDialog.Footer>\n    </ModalDialog>\n  );\n};\n\nStreakModal.defaultProps = {\n  isStreakCelebrationOpen: false,\n  streakDiscountCouponEnabled: false,\n  streakLengthToCelebrate: -1,\n  verifiedMode: {},\n};\n\nStreakModal.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  metadataModel: PropTypes.string.isRequired,\n  streakLengthToCelebrate: PropTypes.number,\n  intl: intlShape.isRequired,\n  isStreakCelebrationOpen: PropTypes.bool,\n  closeStreakCelebration: PropTypes.func.isRequired,\n  streakDiscountCouponEnabled: PropTypes.bool,\n  verifiedMode: PropTypes.shape({\n    currencySymbol: PropTypes.string,\n    price: PropTypes.number,\n    sku: PropTypes.string,\n    upgradeUrl: PropTypes.string,\n  }),\n};\n\nexport default injectIntl(StreakModal);\n","import { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\n\nimport { updateModel } from '../../generic/model-store';\n\nfunction recordStreakCelebration(org, courseId) {\n  // Tell our analytics\n  const { administrator } = getAuthenticatedUser();\n  sendTrackEvent('edx.ui.lms.celebration.streak.opened', {\n    org_key: org,\n    courserun_key: courseId,\n    is_staff: administrator,\n  });\n}\n\nfunction recordModalClosing(celebrations, org, courseId, dispatch) {\n  // Ensure we only celebrate each streak once\n  dispatch(updateModel({\n    modelType: 'courseHomeMeta',\n    model: {\n      id: courseId,\n      celebrations: { ...celebrations, streakLengthToCelebrate: null },\n    },\n  }));\n}\n\nexport { recordStreakCelebration, recordModalClosing };\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  genericError: {\n    id: 'masquerade-widget.userName.error.generic',\n    defaultMessage: 'An error has occurred; please try again.',\n    description: 'Message shown after a general error when attempting to masquerade',\n  },\n  placeholder: {\n    id: 'masquerade-widget.userName.input.placeholder',\n    defaultMessage: 'Username or email',\n    description: 'Placeholder text to prompt for a user to masquerade as',\n  },\n  userNameLabel: {\n    id: 'masquerade-widget.userName.input.label',\n    defaultMessage: 'Masquerade as this user',\n    description: 'Label for the masquerade user input',\n  },\n  adminNavbar: {\n    id: 'learning.admin.navbar',\n    defaultMessage: 'View this course as:',\n    description: 'Show to the staff/admin user',\n  },\n  adminStudioView: {\n    id: 'learning.admin.navbar.studio',\n    defaultMessage: 'View course in:',\n    description: 'Show to the staff/admin user',\n  }\n});\n\nexport default messages;\n","import React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Input } from '@edx/paragon';\n\nimport messages from './messages';\n\nclass MasqueradeUserNameInput extends Component {\n  onError(...args) {\n    return this.props.onError(...args);\n  }\n\n  onKeyPress(event) {\n    if (event.key === 'Enter') {\n      return this.onSubmit(event);\n    }\n    return true;\n  }\n\n  onSubmit(event) {\n    const payload = {\n      role: 'student',\n      user_name: event.target.value,\n    };\n    this.props.onSubmit(payload).then((data) => {\n      if (data && data.success) {\n        global.location.reload();\n      } else {\n        const error = (data && data.error) || '';\n        this.onError(error);\n      }\n    }).catch(() => {\n      const message = this.props.intl.formatMessage(messages.genericError);\n      this.onError(message);\n    });\n    return true;\n  }\n\n  render() {\n    const {\n      intl,\n      onError,\n      onSubmit,\n      ...rest\n    } = this.props;\n    return (\n      <Input\n        aria-labelledby=\"masquerade-search-label\"\n        label={intl.formatMessage(messages.userNameLabel)}\n        onKeyPress={(event) => this.onKeyPress(event)}\n        type=\"text\"\n        {...rest}\n      />\n    );\n  }\n}\nMasqueradeUserNameInput.propTypes = {\n  intl: intlShape.isRequired,\n  onError: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default injectIntl(MasqueradeUserNameInput);\n","import React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown } from '@edx/paragon';\n\nclass MasqueradeWidgetOption extends Component {\n  onClick(event) {\n    // TODO: Remove this hack when we upgrade Paragon\n    // Note: The current version of Paragon does _not_ close dropdown components\n    // automatically (or easily programmatically) when you click on an item.\n    // We can simulate this behavior by programmatically clicking the\n    // toggle button on behalf of the user.\n    // The newest version of Paragon already contains this behavior,\n    // so we can remove this when we upgrade to that point.\n    event.target.parentNode.parentNode.click();\n    const {\n      groupId,\n      role,\n      userName,\n      userPartitionId,\n      userNameInputToggle,\n    } = this.props;\n    const payload = {};\n    if (userName || userName === '') {\n      userNameInputToggle(true);\n      return false;\n    }\n    if (role) {\n      payload.role = role;\n    }\n    if (groupId) {\n      payload.group_id = parseInt(groupId, 10);\n      payload.user_partition_id = parseInt(userPartitionId, 10);\n    }\n    this.props.onSubmit(payload).then(() => {\n      global.location.reload();\n    });\n    return true;\n  }\n\n  isSelected() {\n    /* eslint-disable arrow-body-style */\n    const isEqual = [\n      'groupId',\n      'role',\n      'userName',\n      'userPartitionId',\n    ].reduce((accumulator, currentValue) => {\n      return accumulator && (\n        this.props[currentValue] === this.props.selected[currentValue]\n      );\n    }, true);\n    return isEqual;\n  }\n\n  render() {\n    const {\n      groupName,\n    } = this.props;\n    if (!groupName) {\n      return null;\n    }\n    const selected = this.isSelected();\n    let className;\n    if (selected) {\n      className = 'active';\n    }\n    return (\n      <Dropdown.Item\n        className={className}\n        href=\"#\"\n        onClick={(event) => this.onClick(event)}\n      >\n        {groupName}\n      </Dropdown.Item>\n    );\n  }\n}\nMasqueradeWidgetOption.propTypes = {\n  groupId: PropTypes.number,\n  groupName: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  role: PropTypes.string,\n  selected: PropTypes.shape({\n    courseKey: PropTypes.string.isRequired,\n    groupId: PropTypes.number,\n    role: PropTypes.string,\n    userName: PropTypes.string,\n    userPartitionId: PropTypes.number,\n  }),\n  userName: PropTypes.string,\n  userNameInputToggle: PropTypes.func.isRequired,\n  userPartitionId: PropTypes.number,\n};\nMasqueradeWidgetOption.defaultProps = {\n  groupId: null,\n  role: null,\n  selected: null,\n  userName: null,\n  userPartitionId: null,\n};\n\nexport default MasqueradeWidgetOption;\n","import React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Dropdown } from '@edx/paragon';\n\nimport { UserMessagesContext } from '../../generic/user-messages';\n\nimport MasqueradeUserNameInput from './MasqueradeUserNameInput';\nimport MasqueradeWidgetOption from './MasqueradeWidgetOption';\nimport {\n  getMasqueradeOptions,\n  postMasqueradeOptions,\n} from './data/api';\nimport messages from './messages';\n\nclass MasqueradeWidget extends Component {\n  constructor(props) {\n    super(props);\n    this.courseId = props.courseId;\n    this.state = {\n      autoFocus: false,\n      masquerade: 'Staff',\n      options: [],\n      shouldShowUserNameInput: false,\n      masqueradeUsername: null,\n    };\n  }\n\n  componentDidMount() {\n    getMasqueradeOptions(this.courseId).then((data) => {\n      if (data.success) {\n        this.onSuccess(data);\n      } else {\n        // This was explicitly denied by the backend;\n        // assume it's disabled/unavailable.\n        // eslint-disable-next-line no-console\n        this.onError('Unable to get masquerade options');\n      }\n    }).catch((response) => {\n      // There's not much we can do to recover;\n      // if we can't fetch masquerade options,\n      // assume it's disabled/unavailable.\n      // eslint-disable-next-line no-console\n      console.error('Unable to get masquerade options', response);\n    });\n  }\n\n  onError(message) {\n    this.props.onError(message);\n  }\n\n  async onSubmit(payload) {\n    this.clearError();\n    const options = await postMasqueradeOptions(this.courseId, payload);\n    return options;\n  }\n\n  onSuccess(data) {\n    const options = this.parseAvailableOptions(data);\n    this.setState({\n      options,\n    });\n  }\n\n  clearError() {\n    this.props.onError('');\n  }\n\n  toggle(show) {\n    this.setState(prevState => ({\n      autoFocus: true,\n      masquerade: 'Specific Student...',\n      shouldShowUserNameInput: show === undefined ? !prevState.shouldShowUserNameInput : show,\n    }));\n  }\n\n  parseAvailableOptions(postData) {\n    const data = postData || {};\n    const active = data.active || {};\n    const available = data.available || [];\n    const options = available.map((group) => (\n      <MasqueradeWidgetOption\n        groupId={group.groupId}\n        groupName={group.name}\n        key={group.name}\n        role={group.role}\n        selected={active}\n        userName={group.userName}\n        userPartitionId={group.userPartitionId}\n        userNameInputToggle={(...args) => this.toggle(...args)}\n        onSubmit={(payload) => this.onSubmit(payload)}\n      />\n    ));\n    if (active.userName) {\n      this.setState({\n        autoFocus: false,\n        masquerade: 'Specific Student...',\n        masqueradeUsername: active.userName,\n        shouldShowUserNameInput: true,\n      });\n    } else if (active.groupName) {\n      this.setState({ masquerade: active.groupName });\n    } else if (active.role === 'student') {\n      this.setState({ masquerade: 'Learner' });\n    }\n    return options;\n  }\n\n  render() {\n    const {\n      autoFocus,\n      masquerade,\n      options,\n      shouldShowUserNameInput,\n      masqueradeUsername,\n    } = this.state;\n    const specificLearnerInputText = this.props.intl.formatMessage(messages.placeholder);\n    return (\n      <div className=\"flex-grow-1\">\n        <div className=\"row\">\n          <span className=\"col-auto col-form-label pl-3\">{this.props.intl.formatMessage(messages.adminNavbar)}</span>\n          <Dropdown className=\"flex-shrink-1 mx-1\">\n            <Dropdown.Toggle variant=\"inverse-outline-primary\">\n              {masquerade}\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              {options}\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n        {shouldShowUserNameInput && (\n          <div className=\"row mt-2\">\n            <span className=\"col-auto col-form-label pl-3\" id=\"masquerade-search-label\">{`${specificLearnerInputText}:`}</span>\n            <MasqueradeUserNameInput\n              id=\"masquerade-search\"\n              className=\"col-4 form-control\"\n              autoFocus={autoFocus}\n              defaultValue={masqueradeUsername}\n              onError={(errorMessage) => this.onError(errorMessage)}\n              onSubmit={(payload) => this.onSubmit(payload)}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nMasqueradeWidget.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n  onError: PropTypes.func.isRequired,\n};\nMasqueradeWidget.contextType = UserMessagesContext;\nexport default injectIntl(MasqueradeWidget);\n","import { getConfig, camelCaseObject } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nexport async function getMasqueradeOptions(courseId) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/courses/${courseId}/masquerade`);\n  const { data } = await getAuthenticatedHttpClient().get(url.href, {});\n  return camelCaseObject(data);\n}\n\nexport async function postMasqueradeOptions(courseId, payload) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/courses/${courseId}/masquerade`);\n  const { data } = await getAuthenticatedHttpClient().post(url.href, payload);\n  return camelCaseObject(data);\n}\n","import MasqueradeWidget from './MasqueradeWidget';\n\nexport default MasqueradeWidget;\n","import React, { useMemo } from 'react';\nimport { useAlert } from '../../generic/user-messages';\nimport { useModel } from '../../generic/model-store';\n\nconst AccessExpirationAlert = React.lazy(() => import('./AccessExpirationAlert'));\nconst AccessExpirationMasqueradeBanner = React.lazy(() => import('./AccessExpirationMasqueradeBanner'));\n\nfunction useAccessExpirationAlert(accessExpiration, courseId, org, userTimezone, topic, analyticsPageName) {\n  const isVisible = accessExpiration && !accessExpiration.masqueradingExpiredCourse; // If it exists, show it.\n  const payload = useMemo(() => ({\n    accessExpiration,\n    courseId,\n    org,\n    userTimezone,\n    analyticsPageName,\n  }), [accessExpiration, analyticsPageName, courseId, org, userTimezone]);\n\n  useAlert(isVisible, {\n    code: 'clientAccessExpirationAlert',\n    payload,\n    topic,\n  });\n\n  return { clientAccessExpirationAlert: AccessExpirationAlert };\n}\n\nexport function useAccessExpirationMasqueradeBanner(courseId, tab) {\n  const {\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n  const {\n    accessExpiration,\n  } = useModel(tab, courseId);\n\n  const isVisible = accessExpiration && accessExpiration.masqueradingExpiredCourse;\n  const expirationDate = accessExpiration && accessExpiration.expirationDate;\n  const payload = useMemo(() => ({\n    expirationDate,\n    userTimezone,\n  }), [expirationDate, userTimezone]);\n\n  useAlert(isVisible, {\n    code: 'clientAccessExpirationMasqueradeBanner',\n    payload,\n    topic: 'instructor-toolbar-alerts',\n  });\n\n  return { clientAccessExpirationMasqueradeBanner: AccessExpirationMasqueradeBanner };\n}\n\nexport default useAccessExpirationAlert;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { ALERT_TYPES, AlertList } from '../generic/user-messages';\nimport Alert from '../generic/user-messages/Alert';\nimport MasqueradeWidget from './masquerade-widget';\nimport { useAccessExpirationMasqueradeBanner } from '../alerts/access-expiration-alert';\nimport { useCourseStartMasqueradeBanner } from '../alerts/course-start-alert';\n\nfunction getInsightsUrl(courseId) {\n  const urlBase = getConfig().INSIGHTS_BASE_URL;\n  let urlFull;\n  if (urlBase) {\n    urlFull = `${urlBase}/courses`;\n    // This shouldn't actually be missing, at present,\n    // but we're providing a reasonable fallback,\n    // in case of either error or extension.\n    if (courseId) {\n      urlFull += `/${courseId}`;\n    }\n  }\n  return urlFull;\n}\n\nfunction getStudioUrl(courseId, unitId) {\n  const urlBase = getConfig().STUDIO_BASE_URL;\n  let urlFull;\n  if (urlBase) {\n    if (unitId) {\n      urlFull = `${urlBase}/container/${unitId}`;\n    } else if (courseId) {\n      urlFull = `${urlBase}/course/${courseId}`;\n    }\n  }\n  return urlFull;\n}\n\nconst InstructorToolbar = (props) => {\n  // This didMount logic became necessary once we had a page that does a redirect on a quick exit.\n  // As a result, it unmounts the InstructorToolbar (which will be remounted by the new component),\n  // but the InstructorToolbar's MasqueradeWidget has an outgoing request. Since it is unmounted\n  // during that time, it raises an error about a potential memory leak. By stopping the render\n  // when the InstructorToolbar is unmounted, we avoid the memory leak.\n  // NOTE: This was originally added because of the CourseExit page redirect. Once that page stops\n  //   doing a redirect because a CourseExit experience exists for all learners, this could be removed\n  const [didMount, setDidMount] = useState(false);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    setDidMount(true);\n    // Returning this function here will run setDidMount(false) when this component is unmounted\n    return () => setDidMount(false);\n  });\n\n  const {\n    courseId,\n    unitId,\n    tab,\n  } = props;\n\n  const urlInsights = getInsightsUrl(courseId);\n  const urlStudio = getStudioUrl(courseId, unitId);\n  const [masqueradeErrorMessage, showMasqueradeError] = useState(null);\n\n  const accessExpirationMasqueradeBanner = useAccessExpirationMasqueradeBanner(courseId, tab);\n  const courseStartDateMasqueradeBanner = useCourseStartMasqueradeBanner(courseId, tab);\n\n  return (!didMount ? null : (\n    <div data-testid=\"instructor-toolbar\">\n      <div className=\"bg-primary text-white\">\n        <div className=\"container-xl py-3 d-md-flex justify-content-end align-items-start\">\n          <div className=\"align-items-center flex-grow-1 d-md-flex mx-1 my-1\">\n            <MasqueradeWidget courseId={courseId} onError={showMasqueradeError} />\n          </div>\n          {(urlStudio || urlInsights) && (\n            <>\n              <hr className=\"border-light\" />\n              <span className=\"mr-2 mt-1 col-form-label\">View course in:</span>\n            </>\n          )}\n          {urlStudio && (\n            <span className=\"mx-1 my-1\">\n              <a className=\"btn btn-inverse-outline-primary\" href={urlStudio}>Studio</a>\n            </span>\n          )}\n          {urlInsights && (\n            <span className=\"mx-1 my-1\">\n              <a className=\"btn btn-inverse-outline-primary\" href={urlInsights}>Insights</a>\n            </span>\n          )}\n        </div>\n      </div>\n      {masqueradeErrorMessage && (\n        <div className=\"container-xl mt-3\">\n          <Alert\n            type={ALERT_TYPES.ERROR}\n            dismissible={false}\n          >\n            {masqueradeErrorMessage}\n          </Alert>\n        </div>\n      )}\n      <AlertList\n        topic=\"instructor-toolbar-alerts\"\n        customAlerts={{\n          ...accessExpirationMasqueradeBanner,\n          ...courseStartDateMasqueradeBanner,\n        }}\n      />\n    </div>\n  ));\n};\n\nInstructorToolbar.propTypes = {\n  courseId: PropTypes.string,\n  unitId: PropTypes.string,\n  tab: PropTypes.string,\n};\n\nInstructorToolbar.defaultProps = {\n  courseId: undefined,\n  unitId: undefined,\n  tab: '',\n};\n\nexport default InstructorToolbar;\n","/* eslint-disable import/prefer-default-export */\nimport React, {\n  useContext, useMemo,\n} from 'react';\nimport { AppContext } from '@edx/frontend-platform/react';\n\nimport { useAlert } from '../../generic/user-messages';\nimport { useModel } from '../../generic/model-store';\n\nconst EnrollmentAlert = React.lazy(() => import('./EnrollmentAlert'));\n\nexport function useEnrollmentAlert(courseId) {\n  const { authenticatedUser } = useContext(AppContext);\n  const course = useModel('courseHomeMeta', courseId);\n  const outline = useModel('outline', courseId);\n  const enrolledUser = course && course.isEnrolled !== undefined && course.isEnrolled;\n  const privateOutline = outline && outline.courseBlocks && !outline.courseBlocks.courses;\n  /**\n   * This alert should render if\n   *    1. the user is not enrolled,\n   *    2. the user is authenticated, AND\n   *    3. the course is private.\n   */\n  const isVisible = !enrolledUser && authenticatedUser !== null && privateOutline;\n  const payload = useMemo(() => ({\n    canEnroll: outline && outline.enrollAlert ? outline.enrollAlert.canEnroll : false,\n    courseId,\n    extraText: outline && outline.enrollAlert ? outline.enrollAlert.extraText : '',\n    isStaff: course && course.isStaff,\n  }), [course, courseId, outline]);\n\n  useAlert(isVisible, {\n    code: 'clientEnrollmentAlert',\n    payload,\n    topic: 'outline',\n  });\n\n  return { clientEnrollmentAlert: EnrollmentAlert };\n}\n","/* eslint-disable import/prefer-default-export */\nimport React, { useContext } from 'react';\nimport { AppContext } from '@edx/frontend-platform/react';\nimport { ALERT_TYPES, useAlert } from '../../generic/user-messages';\nimport { useModel } from '../../generic/model-store';\n\nconst LogistrationAlert = React.lazy(() => import('./LogistrationAlert'));\n\nexport function useLogistrationAlert(courseId) {\n  const { authenticatedUser } = useContext(AppContext);\n  const outline = useModel('outline', courseId);\n  const privateOutline = outline && outline.courseBlocks && !outline.courseBlocks.courses;\n  /**\n   * This alert should render if\n   *    1. the user is not authenticated, AND\n   *    2. the course is private.\n   */\n  const isVisible = authenticatedUser === null && privateOutline;\n\n  useAlert(isVisible, {\n    code: 'clientLogistrationAlert',\n    topic: 'outline',\n    dismissible: false,\n    type: ALERT_TYPES.ERROR,\n  });\n\n  return { clientLogistrationAlert: LogistrationAlert };\n}\n","import React from 'react';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\n\nexport const DismissButtonFormattedMessage = () => (\n  <FormattedMessage\n    id=\"tours.button.dismiss\"\n    defaultMessage=\"Dismiss\"\n    description=\"A button used to close the tour of the website\"\n  />\n);\n\nexport const NextButtonFormattedMessage = () => (\n  <FormattedMessage\n    id=\"tours.button.next\"\n    defaultMessage=\"Next\"\n    description=\"A button used within a tour of the website to advance to the next piece of information\"\n  />\n);\n\nexport const OkayButtonFormattedMessage = () => (\n  <FormattedMessage\n    id=\"tours.button.okay\"\n    defaultMessage=\"Okay\"\n    description=\"A button used to end the tour of the website\"\n  />\n);\n","import React from 'react';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\n\nimport { OkayButtonFormattedMessage } from './GenericTourFormattedMessages';\n\nconst abandonTour = ({ enabled, onEnd }) => ({\n  checkpoints: [{\n    body: <FormattedMessage\n      id=\"tours.abandonTour.launchTourCheckpoint.body\"\n      defaultMessage=\"Feeling lost? Launch the tour any time for some quick tips to get the most out of the experience.\"\n    />,\n    placement: 'left',\n    target: '#courseHome-launchTourLink',\n  }],\n  enabled,\n  endButtonText: <OkayButtonFormattedMessage />,\n  onEnd,\n  onEscape: onEnd,\n  tourId: 'abandonTour',\n});\n\nexport default abandonTour;\n","import React from 'react';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\n\nimport { OkayButtonFormattedMessage } from './GenericTourFormattedMessages';\n\nconst coursewareTour = ({ enabled, onEnd }) => ({\n  checkpoints: [{\n    body: <FormattedMessage\n      id=\"tours.sequenceNavigationCheckpoint.body\"\n      defaultMessage=\"The top bar within your course allows you to easily jump to different sections and shows you what’s coming up.\"\n    />,\n    placement: 'bottom',\n    target: '#courseware-sequenceNavigation',\n  }],\n  enabled,\n  endButtonText: <OkayButtonFormattedMessage />,\n  onEnd,\n  onEscape: onEnd,\n  tourId: 'coursewareTour',\n});\n\nexport default coursewareTour;\n","import React from 'react';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\n\nimport { OkayButtonFormattedMessage } from './GenericTourFormattedMessages';\n\nconst existingUserCourseHomeTour = ({ enabled, onEnd }) => ({\n  checkpoints: [{\n    body: <FormattedMessage\n      id=\"tours.existingUserTour.launchTourCheckpoint.body\"\n      defaultMessage=\"We’ve recently added a few new features to the course experience. Want some help looking around? Take a tour to learn more.\"\n    />,\n    placement: 'left',\n    target: '#courseHome-launchTourLink',\n  }],\n  enabled,\n  endButtonText: <OkayButtonFormattedMessage />,\n  onEnd,\n  onEscape: onEnd,\n  tourId: 'existingUserCourseHomeTour',\n});\n\nexport default existingUserCourseHomeTour;\n","import React from 'react';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport {\n  DismissButtonFormattedMessage,\n  NextButtonFormattedMessage,\n  OkayButtonFormattedMessage,\n} from '../GenericTourFormattedMessages';\n\nconst datesCheckpoint = {\n  body: <FormattedMessage\n    id=\"tours.datesCheckpoint.body\"\n    defaultMessage=\"Important dates can help you stay on track.\"\n  />,\n  placement: 'left',\n  target: '#courseHome-dates',\n  title: <FormattedMessage\n    id=\"tours.datesCheckpoint.title\"\n    defaultMessage=\"Keep on top of key dates\"\n  />,\n};\n\nconst outlineCheckpoint = {\n  body: <FormattedMessage\n    id=\"tours.outlineCheckpoint.body\"\n    defaultMessage=\"You can explore sections of the course using the outline below.\"\n  />,\n  placement: 'top',\n  target: '#courseHome-outline',\n  title: <FormattedMessage\n    id=\"tours.outlineCheckpoint.title\"\n    defaultMessage=\"Take the course!\"\n  />,\n};\n\nconst tabNavigationCheckpoint = {\n  body: <FormattedMessage\n    id=\"tours.tabNavigationCheckpoint.body\"\n    defaultMessage=\"These tabs can be used to access other course materials, such as your progress, syllabus, etc.\"\n  />,\n  placement: 'bottom',\n  target: '#courseTabsNavigation',\n  title: <FormattedMessage\n    id=\"tours.tabNavigationCheckpoint.title\"\n    defaultMessage=\"Additional course resources\"\n  />,\n};\n\nconst upgradeCheckpoint = {\n  body: <FormattedMessage\n    id=\"tours.upgradeCheckpoint.body\"\n    defaultMessage=\"Work towards a certificate and gain full access to course materials. Upgrade now!\"\n  />,\n  placement: 'left',\n  target: '#courseHome-upgradeNotification',\n  title: <FormattedMessage\n    id=\"tours.upgradeCheckpoint.title\"\n    defaultMessage=\"Unlock your course\"\n  />,\n};\n\nconst weeklyGoalsCheckpoint = {\n  body: <FormattedMessage\n    id=\"tours.weeklyGoalsCheckpoint.body\"\n    defaultMessage=\"Setting a goal makes you more likely to complete your course.\"\n  />,\n  placement: 'left',\n  target: '#courseHome-weeklyLearningGoal',\n  title: <FormattedMessage\n    id=\"tours.weeklyGoalsCheckpoint.title\"\n    defaultMessage=\"Set a course goal\"\n  />,\n};\n\nconst newUserCourseHomeTour = ({\n  enabled,\n  onDismiss,\n  onEnd,\n}) => ({\n  advanceButtonText: <NextButtonFormattedMessage />,\n  checkpoints: [\n    outlineCheckpoint,\n    datesCheckpoint,\n    tabNavigationCheckpoint,\n    upgradeCheckpoint,\n    weeklyGoalsCheckpoint,\n  ],\n  dismissButtonText: <DismissButtonFormattedMessage />,\n  enabled,\n  endButtonText: <OkayButtonFormattedMessage />,\n  onDismiss,\n  onEnd,\n  onEscape: onDismiss,\n  tourId: 'newUserCourseHomeTour',\n});\n\nexport default newUserCourseHomeTour;\n","export default __webpack_public_path__ + \"2649294b11a63f2f74a0e594104f2722.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getConfig } from '@edx/frontend-platform';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow, Button, MarketingModal, ModalDialog,\n} from '@edx/paragon';\n\nimport heroImage from './course_home_tour_modal_hero.png';\nimport messages from '../messages';\n\nconst NewUserCourseHomeTourModal = ({\n  intl,\n  isOpen,\n  onDismiss,\n  onStartTour,\n}) => (\n  <MarketingModal\n    isOpen={isOpen}\n    title=\"New user course home prompt\"\n    className=\"new-user-tour-dialog\"\n    heroIsDark\n    hasCloseButton={false}\n    heroNode={(\n      <ModalDialog.Hero>\n        <ModalDialog.Hero.Background\n          backgroundSrc={heroImage}\n        />\n        <ModalDialog.Hero.Content style={{ maxWidth: '20rem' }}>\n          <ModalDialog.Title as=\"h2\">\n            <FormattedMessage\n              id=\"tours.newUserModal.title\"\n              defaultMessage=\"{welcome} {siteName} course!\"\n              values={{\n                siteName: getConfig().SITE_NAME,\n                welcome: <span className=\"text-accent-b\">{intl.formatMessage(messages.newUserModalTitleWelcome)}</span>,\n              }}\n            />\n          </ModalDialog.Title>\n        </ModalDialog.Hero.Content>\n      </ModalDialog.Hero>\n      )}\n    footerNode={(\n      <ActionRow>\n        <Button\n          variant=\"tertiary\"\n          onClick={onDismiss}\n        >\n          {intl.formatMessage(messages.skipForNow)}\n        </Button>\n        <Button\n          variant=\"brand\"\n          onClick={onStartTour}\n        >\n          {intl.formatMessage(messages.beginTour)}\n        </Button>\n      </ActionRow>\n      )}\n    onClose={onDismiss}\n  >\n    <p className=\"text-dark-900\">{intl.formatMessage(messages.newUserModalBody, { siteName: getConfig().SITE_NAME })}</p>\n  </MarketingModal>\n);\n\nNewUserCourseHomeTourModal.propTypes = {\n  intl: intlShape.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onDismiss: PropTypes.func.isRequired,\n  onStartTour: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(NewUserCourseHomeTourModal);\n","import { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nexport async function getTourData(username) {\n  const url = `${getConfig().LMS_BASE_URL}/api/user_tours/v1/${username}`;\n  try {\n    const { data } = await getAuthenticatedHttpClient().get(url);\n    return { toursEnabled: true, ...camelCaseObject(data) };\n  } catch (error) {\n    const { httpErrorStatus } = error && error.customAttributes;\n    /** The API will return a\n     *    401 if the user is not authenticated\n     *    403 if the tour waffle flag is inactive\n     *    404 if no User Tour objects exist for the given username\n     */\n    if (httpErrorStatus === 401 || httpErrorStatus === 403 || httpErrorStatus === 404) {\n      return { toursEnabled: false };\n    }\n    throw error;\n  }\n}\n\nexport async function patchTourData(username, tourData) {\n  const url = `${getConfig().LMS_BASE_URL}/api/user_tours/v1/${username}`;\n  return getAuthenticatedHttpClient().patch(url, tourData);\n}\n","import { logError } from '@edx/frontend-platform/logging';\n\nimport { getTourData, patchTourData } from './api';\nimport {\n  disableCourseHomeTour,\n  disableCoursewareTour,\n  disableNewUserCourseHomeModal,\n  setTourData,\n} from './slice';\n\nexport function closeNewUserCourseHomeModal() {\n  return async (dispatch) => dispatch(disableNewUserCourseHomeModal());\n}\n\nexport function endCourseHomeTour(username) {\n  return async (dispatch) => {\n    try {\n      await patchTourData(username, {\n        course_home_tour_status: 'no-tour',\n      });\n      dispatch(disableCourseHomeTour());\n    } catch (error) {\n      logError(error);\n    }\n  };\n}\n\nexport function endCoursewareTour(username) {\n  return async (dispatch) => {\n    try {\n      await patchTourData(username, {\n        show_courseware_tour: false,\n      });\n      dispatch(disableCoursewareTour());\n    } catch (error) {\n      logError(error);\n    }\n  };\n}\n\nexport function fetchTourData(username) {\n  return async (dispatch) => {\n    try {\n      const data = await getTourData(username);\n      dispatch(setTourData(data));\n    } catch (error) {\n      logError(error);\n    }\n  };\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { ProductTour } from '@edx/paragon';\n\nimport abandonTour from './AbandonTour';\nimport coursewareTour from './CoursewareTour';\nimport existingUserCourseHomeTour from './ExistingUserCourseHomeTour';\nimport newUserCourseHomeTour from './newUserCourseHomeTour/NewUserCourseHomeTour';\nimport NewUserCourseHomeTourModal from './newUserCourseHomeTour/NewUserCourseHomeTourModal';\nimport {\n  closeNewUserCourseHomeModal,\n  endCourseHomeTour,\n  endCoursewareTour,\n  fetchTourData,\n} from './data';\n\nconst ProductTours = ({\n  activeTab,\n  courseId,\n  isStreakCelebrationOpen,\n  org,\n}) => {\n  const {\n    proctoringPanelStatus,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    showCoursewareTour,\n    showExistingUserCourseHomeTour,\n    showNewUserCourseHomeModal,\n    showNewUserCourseHomeTour,\n  } = useSelector(state => state.tours);\n\n  const [isAbandonTourEnabled, setIsAbandonTourEnabled] = useState(false);\n  const [isCoursewareTourEnabled, setIsCoursewareTourEnabled] = useState(false);\n  const [isExistingUserCourseHomeTourEnabled, setIsExistingUserCourseHomeTourEnabled] = useState(false);\n  const [isNewUserCourseHomeTourEnabled, setIsNewUserCourseHomeTourEnabled] = useState(false);\n\n  const dispatch = useDispatch();\n  const {\n    administrator,\n    username,\n  } = getAuthenticatedUser() || {};\n  const isCoursewareTab = activeTab === 'courseware';\n  const isOutlineTab = activeTab === 'outline';\n\n  useEffect(() => {\n    const isOutlineTabResolved = isOutlineTab && proctoringPanelStatus === 'loaded';\n    const userIsAuthenticated = !!username;\n\n    // Tours currently only exist on the Outline Tab and within Courseware, so we'll avoid\n    // calling the tour endpoint unnecessarily.\n    if (userIsAuthenticated && (isCoursewareTab || isOutlineTabResolved)) {\n      dispatch(fetchTourData(username));\n    }\n  }, [proctoringPanelStatus]);\n\n  useEffect(() => {\n    if (isCoursewareTab && showCoursewareTour) {\n      setIsCoursewareTourEnabled(true);\n    }\n  }, [showCoursewareTour]);\n\n  useEffect(() => {\n    if (isOutlineTab) {\n      setIsExistingUserCourseHomeTourEnabled(!!showExistingUserCourseHomeTour);\n    }\n  }, [showExistingUserCourseHomeTour]);\n\n  useEffect(() => {\n    if (isOutlineTab && showNewUserCourseHomeTour) {\n      setIsAbandonTourEnabled(false);\n      setIsNewUserCourseHomeTourEnabled(true);\n    }\n  }, [showNewUserCourseHomeTour]);\n\n  if (isStreakCelebrationOpen) {\n    return null;\n  }\n\n  // The <ProductTour /> component cannot handle rendering multiple enabled tours at once.\n  // I.e. when adding new tours, beware that if multiple tours are enabled,\n  // the first enabled tour in the following array will be the only one that renders.\n  // The suggestion for populating these tour objects is to ensure only one tour is enabled at a time.\n  const tours = [\n    abandonTour({\n      enabled: isAbandonTourEnabled,\n      onEnd: () => setIsAbandonTourEnabled(false),\n    }),\n    coursewareTour({\n      enabled: isCoursewareTourEnabled,\n      onEnd: () => {\n        setIsCoursewareTourEnabled(false);\n        sendTrackEvent('edx.ui.lms.courseware_tour.completed', {\n          org_key: org,\n          courserun_key: courseId,\n          is_staff: administrator,\n        });\n        dispatch(endCoursewareTour(username));\n      },\n    }),\n    existingUserCourseHomeTour({\n      enabled: isExistingUserCourseHomeTourEnabled,\n      onEnd: () => {\n        setIsExistingUserCourseHomeTourEnabled(false);\n        sendTrackEvent('edx.ui.lms.existing_user_tour.completed', {\n          org_key: org,\n          courserun_key: courseId,\n          is_staff: administrator,\n        });\n        dispatch(endCourseHomeTour(username));\n      },\n    }),\n    newUserCourseHomeTour({\n      enabled: isNewUserCourseHomeTourEnabled,\n      onDismiss: () => {\n        setIsNewUserCourseHomeTourEnabled(false);\n        setIsAbandonTourEnabled(true);\n        sendTrackEvent('edx.ui.lms.new_user_tour.dismissed', {\n          org_key: org,\n          courserun_key: courseId,\n          is_staff: administrator,\n        });\n        dispatch(endCourseHomeTour(username));\n        dispatch(endCoursewareTour(username));\n      },\n      onEnd: () => {\n        setIsNewUserCourseHomeTourEnabled(false);\n        sendTrackEvent('edx.ui.lms.new_user_tour.completed', {\n          org_key: org,\n          courserun_key: courseId,\n          is_staff: administrator,\n        });\n        dispatch(endCourseHomeTour(username));\n      },\n    }),\n  ];\n\n  return (\n    <>\n      <ProductTour\n        tours={tours}\n      />\n      <NewUserCourseHomeTourModal\n        isOpen={isOutlineTab && showNewUserCourseHomeModal}\n        onDismiss={() => {\n          sendTrackEvent('edx.ui.lms.new_user_modal.dismissed', {\n            org_key: org,\n            courserun_key: courseId,\n            is_staff: administrator,\n          });\n          dispatch(closeNewUserCourseHomeModal());\n          setIsAbandonTourEnabled(true);\n          dispatch(endCourseHomeTour(username));\n        }}\n        onStartTour={() => {\n          sendTrackEvent('edx.ui.lms.new_user_tour.started', {\n            org_key: org,\n            courserun_key: courseId,\n            is_staff: administrator,\n          });\n          dispatch(closeNewUserCourseHomeModal());\n          setIsNewUserCourseHomeTourEnabled(true);\n        }}\n      />\n    </>\n  );\n};\n\nProductTours.propTypes = {\n  activeTab: PropTypes.string.isRequired,\n  courseId: PropTypes.string.isRequired,\n  isStreakCelebrationOpen: PropTypes.bool.isRequired,\n  org: PropTypes.string.isRequired,\n};\n\nexport default ProductTours;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { useToggle } from '@edx/paragon';\n\nimport { CourseTabsNavigation } from '../course-tabs';\nimport { useModel } from '../generic/model-store';\nimport { AlertList } from '../generic/user-messages';\nimport StreakModal from '../shared/streak-celebration';\nimport InstructorToolbar from '../instructor-toolbar';\nimport useEnrollmentAlert from '../alerts/enrollment-alert';\nimport useLogistrationAlert from '../alerts/logistration-alert';\n\nimport ProductTours from '../product-tours/ProductTours';\n\nconst LoadedTabPage = ({\n  activeTabSlug,\n  children,\n  courseId,\n  metadataModel,\n  unitId,\n}) => {\n  const {\n    celebrations,\n    org,\n    originalUserIsStaff,\n    tabs,\n    title,\n    verifiedMode,\n  } = useModel('courseHomeMeta', courseId);\n\n  // Logistration and enrollment alerts are only really used for the outline tab, but loaded here to put them above\n  // breadcrumbs when they are visible.\n  const logistrationAlert = useLogistrationAlert(courseId);\n  const enrollmentAlert = useEnrollmentAlert(courseId);\n\n  const activeTab = tabs.filter(tab => tab.slug === activeTabSlug)[0];\n\n  const streakLengthToCelebrate = celebrations && celebrations.streakLengthToCelebrate;\n  const streakDiscountCouponEnabled = celebrations && celebrations.streakDiscountEnabled && verifiedMode;\n  const [isStreakCelebrationOpen,, closeStreakCelebration] = useToggle(streakLengthToCelebrate);\n\n  return (\n    <>\n      <ProductTours\n        activeTab={activeTabSlug}\n        courseId={courseId}\n        isStreakCelebrationOpen={isStreakCelebrationOpen}\n        org={org}\n      />\n      <Helmet>\n        <title>{`${activeTab ? `${activeTab.title} | ` : ''}${title} | ${getConfig().SITE_NAME}`}</title>\n      </Helmet>\n      {originalUserIsStaff && (\n        <InstructorToolbar\n          courseId={courseId}\n          unitId={unitId}\n          tab={activeTabSlug}\n        />\n      )}\n      <StreakModal\n        courseId={courseId}\n        metadataModel={metadataModel}\n        streakLengthToCelebrate={streakLengthToCelebrate}\n        isStreakCelebrationOpen={!!isStreakCelebrationOpen}\n        closeStreakCelebration={closeStreakCelebration}\n        streakDiscountCouponEnabled={streakDiscountCouponEnabled}\n        verifiedMode={verifiedMode}\n      />\n      <main id=\"main-content\" className=\"d-flex flex-column flex-grow-1\">\n        <AlertList\n          topic=\"outline\"\n          className=\"mx-5 mt-3\"\n          customAlerts={{\n            ...enrollmentAlert,\n            ...logistrationAlert,\n          }}\n        />\n        <CourseTabsNavigation tabs={tabs} className=\"mb-3\" activeTabSlug={activeTabSlug} />\n        <div className=\"container-xl\">\n          {children}\n        </div>\n      </main>\n    </>\n  );\n};\n\nLoadedTabPage.propTypes = {\n  activeTabSlug: PropTypes.string.isRequired,\n  children: PropTypes.node,\n  courseId: PropTypes.string.isRequired,\n  metadataModel: PropTypes.string,\n  unitId: PropTypes.string,\n};\n\nLoadedTabPage.defaultProps = {\n  children: null,\n  metadataModel: 'courseHomeMeta',\n  unitId: null,\n};\n\nexport default LoadedTabPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport Footer from '@edx/frontend-component-footer';\nimport { Toast } from '@edx/paragon';\nimport { LearningHeader as Header } from '@edx/frontend-component-header';\nimport PageLoading from '../generic/PageLoading';\nimport { getAccessDeniedRedirectUrl } from '../shared/access';\nimport { useModel } from '../generic/model-store';\n\nimport genericMessages from '../generic/messages';\nimport messages from './messages';\nimport LoadedTabPage from './LoadedTabPage';\nimport { setCallToActionToast } from '../course-home/data/slice';\nimport LaunchCourseHomeTourButton from '../product-tours/newUserCourseHomeTour/LaunchCourseHomeTourButton';\n\nconst TabPage = ({ intl, ...props }) => {\n  const {\n    activeTabSlug,\n    courseId,\n    courseStatus,\n    metadataModel,\n  } = props;\n  const {\n    toastBodyLink,\n    toastBodyText,\n    toastHeader,\n  } = useSelector(state => state.courseHome);\n  const dispatch = useDispatch();\n  const {\n    courseAccess,\n    number,\n    org,\n    start,\n    title,\n  } = useModel('courseHomeMeta', courseId);\n\n  if (courseStatus === 'denied') {\n    const redirectUrl = getAccessDeniedRedirectUrl(courseId, activeTabSlug, courseAccess, start);\n    if (redirectUrl) {\n      return (<Navigate to={redirectUrl} replace />);\n    }\n  }\n\n  return (\n    <>\n      {['loaded', 'denied'].includes(courseStatus) && (\n        <>\n          <Toast\n            action={toastBodyText ? {\n              label: toastBodyText,\n              href: toastBodyLink,\n            } : null}\n            closeLabel={intl.formatMessage(genericMessages.close)}\n            onClose={() => dispatch(setCallToActionToast({ header: '', link: null, link_text: null }))}\n            show={!!(toastHeader)}\n          >\n            {toastHeader}\n          </Toast>\n          {metadataModel === 'courseHomeMeta' && (<LaunchCourseHomeTourButton srOnly />)}\n        </>\n      )}\n\n      <Header courseOrg={org} courseNumber={number} courseTitle={title} />\n\n      {courseStatus === 'loading' && (\n        <PageLoading srMessage={intl.formatMessage(messages.loading)} />\n      )}\n\n      {['loaded', 'denied'].includes(courseStatus) && (\n        <LoadedTabPage {...props} />\n      )}\n\n      {/* courseStatus 'failed' and any other unexpected course status. */}\n      {(!['loading', 'loaded', 'denied'].includes(courseStatus)) && (\n        <p className=\"text-center py-5 mx-auto\" style={{ maxWidth: '30em' }}>\n          {intl.formatMessage(messages.failure)}\n        </p>\n      )}\n      <Footer />\n    </>\n  );\n};\n\nTabPage.defaultProps = {\n  courseId: null,\n  unitId: null,\n};\n\nTabPage.propTypes = {\n  activeTabSlug: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string,\n  courseStatus: PropTypes.string.isRequired,\n  metadataModel: PropTypes.string.isRequired,\n  unitId: PropTypes.string,\n};\n\nexport default injectIntl(TabPage);\n","/* eslint-disable import/prefer-default-export */\nimport { getLocale } from '@edx/frontend-platform/i18n';\n\n// This function inspects an access denied error and provides a redirect url (looks like a /redirect/... path),\n// which then renders a nice little message while the browser loads the next page.\n// This is basically a frontend version of check_course_access_with_redirect in the backend.\nexport function getAccessDeniedRedirectUrl(courseId, activeTabSlug, courseAccess, start) {\n  let url = null;\n  switch (courseAccess.errorCode) {\n    case 'audit_expired':\n      url = `/redirect/dashboard?access_response_error=${courseAccess.additionalContextUserMessage}`;\n      break;\n    case 'course_not_started':\n      // eslint-disable-next-line no-case-declarations\n      const startDate = (new Intl.DateTimeFormat(getLocale())).format(new Date(start));\n      url = `/redirect/dashboard?notlive=${startDate}`;\n      break;\n    case 'survey_required':\n      url = `/redirect/survey/${courseId}`;\n      break;\n    case 'data_sharing_access_required':\n      url = `/redirect/consent?consentPath=${encodeURIComponent(courseAccess.developerMessage)}`;\n      break;\n    case 'incorrect_active_enterprise':\n      url = `/course/${courseId}/access-denied`;\n      break;\n    case 'unfulfilled_milestones':\n      url = '/redirect/dashboard';\n      break;\n    case 'authentication_required':\n    case 'enrollment_required':\n    default:\n      if (activeTabSlug !== 'outline') {\n        url = `/course/${courseId}/home`;\n      }\n  }\n  return url;\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { OuterExamTimer } from '@edx/frontend-lib-special-exams';\n\nimport TabPage from './TabPage';\n\nconst TabContainer = (props) => {\n  const {\n    children,\n    fetch,\n    slice,\n    tab,\n    isProgressTab,\n  } = props;\n\n  const { courseId: courseIdFromUrl, targetUserId } = useParams();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // The courseId from the URL is the course we WANT to load.\n    if (isProgressTab) {\n      dispatch(fetch(courseIdFromUrl, targetUserId));\n    } else {\n      dispatch(fetch(courseIdFromUrl));\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [courseIdFromUrl, targetUserId]);\n\n  // The courseId from the store is the course we HAVE loaded.  If the URL changes,\n  // we don't want the application to adjust to it until it has actually loaded the new data.\n  const {\n    courseId,\n    courseStatus,\n  } = useSelector(state => state[slice]);\n\n  return (\n    <TabPage\n      activeTabSlug={tab}\n      courseId={courseId}\n      courseStatus={courseStatus}\n      metadataModel={`${slice}Meta`}\n    >\n      {courseId && <OuterExamTimer courseId={courseId} />}\n      {children}\n    </TabPage>\n  );\n};\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  fetch: PropTypes.func.isRequired,\n  slice: PropTypes.string.isRequired,\n  tab: PropTypes.string.isRequired,\n  isProgressTab: PropTypes.bool,\n};\n\nTabContainer.defaultProps = {\n  isProgressTab: false,\n};\n\nexport default TabContainer;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  entranceExamTextNotPassing: {\n    id: 'learn.sequence.entranceExamTextNotPassing',\n    defaultMessage: 'To access course materials, you must score {entranceExamMinimumScorePct}% or higher on this exam. Your current score is {entranceExamCurrentScore}%.',\n  },\n  entranceExamTextPassed: {\n    id: 'learn.sequence.entranceExamTextPassed',\n    defaultMessage: 'Your score is {entranceExamCurrentScore}%. You have passed the entrance exam.',\n  },\n});\n\nexport default messages;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'learn.course.license.allRightsReserved.text': {\n    id: 'learn.course.license.allRightsReserved.text',\n    defaultMessage: 'All Rights Reserved',\n    description: 'License text shown when using All Rights Reserved license type.',\n  },\n  'learn.course.license.creativeCommons.terms.preamble': {\n    id: 'learn.course.license.creativeCommons.terms.preamble',\n    defaultMessage: 'Creative Commons licensed content, with terms as follows:',\n    description: 'Screen reader only text preamble before reading specific Creative Commons license terms.',\n  },\n  'learn.course.license.creativeCommons.terms.by': {\n    id: 'learn.course.license.creativeCommons.terms.by',\n    defaultMessage: 'Attribution',\n    description: 'Creative Commons license text for Attribution term.',\n  },\n  'learn.course.license.creativeCommons.terms.nc': {\n    id: 'learn.course.license.creativeCommons.terms.nc',\n    defaultMessage: 'Noncommercial',\n    description: 'Creative Commons license text for Noncommercial term.',\n  },\n  'learn.course.license.creativeCommons.terms.nd': {\n    id: 'learn.course.license.creativeCommons.terms.nd',\n    defaultMessage: 'No Derivatives',\n    description: 'Creative Commons license text for No Derivatives term.',\n  },\n  'learn.course.license.creativeCommons.terms.sa': {\n    id: 'learn.course.license.creativeCommons.terms.sa',\n    defaultMessage: 'Share Alike',\n    description: 'Creative Commons license text for Share Alike term.',\n  },\n  // No text for `zero` license\n  'learn.course.license.creativeCommons.terms.zero': {\n    id: 'learn.course.license.creativeCommons.terms.zero',\n    defaultMessage: 'No terms',\n    description: 'Creative Commons license text for license with no terms.',\n  },\n  'learn.course.license.creativeCommons.text': {\n    id: 'learn.course.license.creativeCommons.text',\n    defaultMessage: 'Some Rights Reserved',\n    description: 'License text shown when using all Creative Commons license types.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopyright } from '@fortawesome/free-regular-svg-icons';\nimport {\n  faCreativeCommons,\n  faCreativeCommonsBy,\n  faCreativeCommonsNc,\n  faCreativeCommonsNd,\n  faCreativeCommonsSa,\n  faCreativeCommonsZero,\n} from '@fortawesome/free-brands-svg-icons';\n\nimport messages from './messages';\n\nconst CreativeCommonsLicenseTags = {\n  by: {\n    intlMessagesId: 'learn.course.license.creativeCommons.terms.by',\n    icon: faCreativeCommonsBy,\n  },\n  nc: {\n    intlMessagesId: 'learn.course.license.creativeCommons.terms.nc',\n    icon: faCreativeCommonsNc,\n  },\n  nd: {\n    intlMessagesId: 'learn.course.license.creativeCommons.terms.nd',\n    icon: faCreativeCommonsNd,\n  },\n  sa: {\n    intlMessagesId: 'learn.course.license.creativeCommons.terms.sa',\n    icon: faCreativeCommonsSa,\n  },\n  zero: {\n    intlMessagesId: 'learn.course.license.creativeCommons.terms.zero',\n    icon: faCreativeCommonsZero,\n  },\n};\n\nfunction parseLicense(license) {\n  if (!license) {\n    // Default to All Rights Reserved if no license\n    // is detected\n    return ['all-rights-reserved', {}];\n  }\n\n  // Search for a colon character denoting the end\n  // of the license type and start of the options\n  const colonIndex = license.indexOf(':');\n  if (colonIndex === -1) {\n    // no options, so the entire thing is the license type\n    return [license, {}];\n  }\n\n  // Split the license on the colon\n  const licenseType = license.slice(0, colonIndex).trim();\n  const optionStr = license.slice(colonIndex + 1).trim();\n\n  let options = {};\n  let version = '';\n\n  // Set the defaultVersion to 4.0\n  const defaultVersion = '4.0';\n  optionStr.split(' ').forEach(option => {\n    // Split the option into key and value\n    // Default the value to `true` if no value\n    let key = '';\n    let value = '';\n    if (option.indexOf('=') !== -1) {\n      [key, value] = option.split('=');\n    } else {\n      key = option;\n      value = true;\n    }\n\n    // Check for version\n    if (key === 'ver') {\n      version = value;\n    } else {\n      // Set the option key to lowercase to make\n      // it easier to query\n      options[key.toLowerCase()] = value;\n    }\n  });\n\n  // No options\n  if (Object.keys(options).length === 0) {\n    // If no other options are set for the\n    // license, set version to 1.0\n    version = '1.0';\n\n    // Set the `zero` option so the link\n    // works correctly\n    options = {\n      zero: true,\n    };\n  }\n\n  // Set the version to whatever was included,\n  // using `defaultVersion` as a fallback if unset\n  version = version || defaultVersion;\n\n  return [licenseType, options, version];\n}\n\nconst CourseLicense = ({\n  license,\n  intl,\n}) => {\n  const renderAllRightsReservedLicense = () => (\n    <div className=\"text-gray-500\">\n      <FontAwesomeIcon aria-hidden=\"true\" className=\"mr-1\" icon={faCopyright} />\n      {intl.formatMessage(messages['learn.course.license.allRightsReserved.text'])}\n    </div>\n  );\n\n  const renderCreativeCommonsLicense = (activeCreativeCommonsLicenseTags, version) => (\n    <a\n      className=\"text-decoration-none text-gray-500\"\n      rel=\"license noopener noreferrer\"\n      target=\"_blank\"\n      href={`https://creativecommons.org/licenses/${activeCreativeCommonsLicenseTags.join('-')}/${version}/`}\n    >\n      <span className=\"sr-only\">\n        {intl.formatMessage(messages['learn.course.license.creativeCommons.terms.preamble'])}&nbsp;\n      </span>\n      <FontAwesomeIcon aria-hidden=\"true\" className=\"mr-1\" icon={faCreativeCommons} />\n      {activeCreativeCommonsLicenseTags.map(tag => (\n        <span key={tag}>\n          <span className=\"sr-only\">\n            {intl.formatMessage(messages[CreativeCommonsLicenseTags[tag].intlMessagesId])}&nbsp;\n          </span>\n          <FontAwesomeIcon aria-hidden=\"true\" className=\"mr-1\" icon={CreativeCommonsLicenseTags[tag].icon} />\n        </span>\n      ))}\n      {intl.formatMessage(messages['learn.course.license.creativeCommons.text'])}\n    </a>\n  );\n\n  const [licenseType, licenseOptions, licenseVersion] = parseLicense(license);\n\n  return (\n    <div className=\"text-right small py-1\">\n      {licenseType === 'all-rights-reserved' && renderAllRightsReservedLicense()}\n      {licenseType === 'creative-commons' && renderCreativeCommonsLicense(\n        Object.keys(licenseOptions),\n        licenseVersion,\n      )}\n    </div>\n  );\n};\n\nCourseLicense.propTypes = {\n  license: PropTypes.string,\n  intl: intlShape.isRequired,\n};\n\nCourseLicense.defaultProps = {\n  license: 'all-rights-reserved',\n};\n\nexport default injectIntl(CourseLicense);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  notificationTray: {\n    id: 'notification.tray.container',\n    defaultMessage: 'Notification tray',\n    description: 'Notification tray container',\n  },\n  openNotificationTrigger: {\n    id: 'notification.open.button',\n    defaultMessage: 'Show notification tray',\n    description: 'Button to open the notification tray and show notifications',\n  },\n  closeNotificationTrigger: {\n    id: 'notification.close.button',\n    defaultMessage: 'Close notification tray',\n    description: 'Button for the learner to close the sidebar',\n  },\n  responsiveCloseNotificationTray: {\n    id: 'responsive.close.notification',\n    defaultMessage: 'Back to course',\n    description: 'Responsive button to go back to course and close the notification tray',\n  },\n  notificationTitle: {\n    id: 'notification.tray.title',\n    defaultMessage: 'Notifications',\n    description: 'Title text displayed for the notification tray',\n  },\n  noNotificationsMessage: {\n    id: 'notification.tray.no.message',\n    defaultMessage: 'You have no new notifications at this time.',\n    description: 'Text displayed when the learner has no notifications',\n  },\n});\n\nexport default messages;\n","import React from 'react';\n\nconst SidebarContext = React.createContext({});\n\nexport default SidebarContext;\n","import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Icon, IconButton } from '@edx/paragon';\nimport { ArrowBackIos, Close } from '@edx/paragon/icons';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useContext } from 'react';\nimport { useEventListener } from '../../../../generic/hooks';\nimport messages from '../../messages';\nimport SidebarContext from '../SidebarContext';\n\nconst SidebarBase = ({\n  intl,\n  title,\n  ariaLabel,\n  sidebarId,\n  className,\n  children,\n  showTitleBar,\n  width,\n}) => {\n  const {\n    toggleSidebar,\n    shouldDisplayFullScreen,\n    currentSidebar,\n  } = useContext(SidebarContext);\n\n  const receiveMessage = useCallback(({ data }) => {\n    const { type } = data;\n    if (type === 'learning.events.sidebar.close') {\n      toggleSidebar(null);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sidebarId, toggleSidebar]);\n\n  useEventListener('message', receiveMessage);\n\n  return (\n    <section\n      className={classNames('ml-0 ml-lg-4 border border-light-400 rounded-sm h-auto align-top', {\n        'bg-white m-0 border-0 fixed-top vh-100 rounded-0': shouldDisplayFullScreen,\n        'min-vh-100': !shouldDisplayFullScreen,\n        'd-none': currentSidebar !== sidebarId,\n      }, className)}\n      data-testid={`sidebar-${sidebarId}`}\n      style={{ width: shouldDisplayFullScreen ? '100%' : width }}\n      aria-label={ariaLabel}\n    >\n      {shouldDisplayFullScreen ? (\n        <div\n          className=\"pt-2 pb-2.5 border-bottom border-light-400 d-flex align-items-center ml-2\"\n          onClick={() => toggleSidebar(null)}\n          onKeyDown={() => toggleSidebar(null)}\n          role=\"button\"\n          tabIndex=\"0\"\n          alt={intl.formatMessage(messages.responsiveCloseNotificationTray)}\n        >\n          <Icon src={ArrowBackIos} />\n          <span className=\"font-weight-bold m-2 d-inline-block\">\n            {intl.formatMessage(messages.responsiveCloseNotificationTray)}\n          </span>\n        </div>\n      ) : null}\n      {showTitleBar && (\n        <>\n          <div className=\"d-flex align-items-center\">\n            <span className=\"p-2.5 d-inline-block\">{title}</span>\n            {shouldDisplayFullScreen\n              ? null\n              : (\n                <div className=\"d-inline-flex mr-2 mt-1.5 ml-auto\">\n                  <IconButton\n                    src={Close}\n                    size=\"sm\"\n                    iconAs={Icon}\n                    onClick={() => toggleSidebar(null)}\n                    variant=\"primary\"\n                    alt={intl.formatMessage(messages.closeNotificationTrigger)}\n                  />\n                </div>\n              )}\n          </div>\n          <div className=\"py-1 bg-gray-100 border-top border-bottom border-light-400\" />\n        </>\n      )}\n      {children}\n    </section>\n  );\n};\n\nSidebarBase.propTypes = {\n  intl: intlShape.isRequired,\n  title: PropTypes.string.isRequired,\n  ariaLabel: PropTypes.string.isRequired,\n  sidebarId: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  showTitleBar: PropTypes.bool,\n  width: PropTypes.string,\n};\n\nSidebarBase.defaultProps = {\n  width: '31rem',\n  showTitleBar: true,\n  className: '',\n};\n\nexport default injectIntl(SidebarBase);\n","// This file holds some convenience methods for dealing with sessionStorage. Unlike localStorage that never expires,\n// sessionStorage is cleared when the browser tab is closed since the page session ends\n//\n// NOTE: These storage keys are not namespaced.  That means that it's shared for the current fully\n// qualified domain.  Namespacing could be added, but we'll cross that bridge when we need it.\n\nfunction getSessionStorage(key) {\n  try {\n    if (global.sessionStorage) {\n      const rawItem = global.sessionStorage.getItem(key);\n      if (rawItem) {\n        return JSON.parse(rawItem);\n      }\n    }\n  } catch (e) {\n    // If this fails for some reason, just return null.\n  }\n  return null;\n}\n\nfunction setSessionStorage(key, value) {\n  try {\n    if (global.sessionStorage) {\n      global.sessionStorage.setItem(key, JSON.stringify(value));\n    }\n  } catch (e) {\n    // If this fails, just bail.\n  }\n}\n\nexport {\n  getSessionStorage,\n  setSessionStorage,\n};\n","import { injectIntl } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst SidebarTriggerBase = ({\n  onClick,\n  ariaLabel,\n  children,\n}) => (\n  <button\n    className=\"border border-light-400 bg-transparent align-items-center align-content-center d-flex\"\n    type=\"button\"\n    onClick={onClick}\n    aria-label={ariaLabel}\n  >\n    <div className=\"icon-container d-flex position-relative align-items-center\">\n      {children}\n    </div>\n  </button>\n);\n\nSidebarTriggerBase.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  ariaLabel: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default injectIntl(SidebarTriggerBase);\n","import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Icon } from '@edx/paragon';\nimport { WatchOutline } from '@edx/paragon/icons';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport messages from '../../../messages';\n\nconst NotificationIcon = ({\n  intl,\n  status,\n  notificationColor,\n}) => (\n  <>\n    <Icon src={WatchOutline} className=\"m-0 m-auto\" alt={intl.formatMessage(messages.openNotificationTrigger)} />\n    {status === 'active'\n      ? (\n        <span\n          className={classNames(notificationColor, 'rounded-circle p-1 position-absolute')}\n          data-testid=\"notification-dot\"\n          style={{\n            top: '0.3rem',\n            right: '0.55rem',\n          }}\n        />\n      )\n      : null}\n  </>\n);\n\nNotificationIcon.propTypes = {\n  intl: intlShape.isRequired,\n  status: PropTypes.string.isRequired,\n  notificationColor: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(NotificationIcon);\n","import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useEffect } from 'react';\nimport { getLocalStorage, setLocalStorage } from '../../../../../data/localStorage';\nimport { getSessionStorage, setSessionStorage } from '../../../../../data/sessionStorage';\nimport messages from '../../../messages';\nimport SidebarTriggerBase from '../../common/TriggerBase';\nimport SidebarContext from '../../SidebarContext';\n\nimport NotificationIcon from './NotificationIcon';\n\nexport const ID = 'NOTIFICATIONS';\n\nconst NotificationTrigger = ({\n  intl,\n  onClick,\n}) => {\n  const {\n    courseId,\n    notificationStatus,\n    setNotificationStatus,\n    upgradeNotificationCurrentState,\n  } = useContext(SidebarContext);\n\n  /* Re-show a red dot beside the notification trigger for each of the 7 UpgradeNotification stages\n   The upgradeNotificationCurrentState prop will be available after UpgradeNotification mounts. Once available,\n  compare with the last state they've seen, and if it's different then set dot back to red */\n  function UpdateUpgradeNotificationLastSeen() {\n    if (upgradeNotificationCurrentState) {\n      if (getLocalStorage(`upgradeNotificationLastSeen.${courseId}`) !== upgradeNotificationCurrentState) {\n        setNotificationStatus('active');\n        setLocalStorage(`notificationStatus.${courseId}`, 'active');\n        setLocalStorage(`upgradeNotificationLastSeen.${courseId}`, upgradeNotificationCurrentState);\n      }\n    }\n  }\n\n  if (!getLocalStorage(`notificationStatus.${courseId}`)) {\n    setLocalStorage(`notificationStatus.${courseId}`, 'active'); // Show red dot on notificationTrigger until seen\n  }\n\n  if (!getLocalStorage(`upgradeNotificationCurrentState.${courseId}`)) {\n    setLocalStorage(`upgradeNotificationCurrentState.${courseId}`, 'initialize');\n  }\n\n  useEffect(() => {\n    UpdateUpgradeNotificationLastSeen();\n  });\n\n  const handleClick = () => {\n    if (getSessionStorage(`notificationTrayStatus.${courseId}`) === 'open') {\n      setSessionStorage(`notificationTrayStatus.${courseId}`, 'closed');\n    } else {\n      setSessionStorage(`notificationTrayStatus.${courseId}`, 'open');\n    }\n    onClick();\n  };\n\n  return (\n    <SidebarTriggerBase onClick={handleClick} ariaLabel={intl.formatMessage(messages.openNotificationTrigger)}>\n      <NotificationIcon status={notificationStatus} notificationColor=\"bg-danger-500\" />\n    </SidebarTriggerBase>\n  );\n};\n\nNotificationTrigger.propTypes = {\n  intl: intlShape.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(NotificationTrigger);\n","import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport classNames from 'classnames';\nimport React, { useContext, useEffect } from 'react';\nimport { useModel } from '../../../../../generic/model-store';\nimport UpgradeNotification from '../../../../../generic/upgrade-notification/UpgradeNotification';\n\nimport messages from '../../../messages';\nimport SidebarBase from '../../common/SidebarBase';\nimport SidebarContext from '../../SidebarContext';\nimport NotificationTrigger, { ID } from './NotificationTrigger';\n\nconst NotificationTray = ({ intl }) => {\n  const {\n    courseId,\n    onNotificationSeen,\n    shouldDisplayFullScreen,\n    upgradeNotificationCurrentState,\n    setUpgradeNotificationCurrentState,\n  } = useContext(SidebarContext);\n  const course = useModel('coursewareMeta', courseId);\n\n  const {\n    accessExpiration,\n    contentTypeGatingEnabled,\n    marketingUrl,\n    offer,\n    timeOffsetMillis,\n    userTimezone,\n  } = course;\n\n  const {\n    org,\n    verifiedMode,\n  } = useModel('courseHomeMeta', courseId);\n\n  // After three seconds, update notificationSeen (to hide red dot)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => { setTimeout(onNotificationSeen, 3000); }, []);\n\n  return (\n    <SidebarBase\n      title={intl.formatMessage(messages.notificationTitle)}\n      ariaLabel={intl.formatMessage(messages.notificationTray)}\n      sidebarId={ID}\n      className={classNames({ 'h-100': !verifiedMode && !shouldDisplayFullScreen })}\n    >\n      <div>{verifiedMode\n        ? (\n          <UpgradeNotification\n            offer={offer}\n            verifiedMode={verifiedMode}\n            accessExpiration={accessExpiration}\n            contentTypeGatingEnabled={contentTypeGatingEnabled}\n            marketingUrl={marketingUrl}\n            upsellPageName=\"in_course\"\n            userTimezone={userTimezone}\n            shouldDisplayBorder={false}\n            timeOffsetMillis={timeOffsetMillis}\n            courseId={courseId}\n            org={org}\n            upgradeNotificationCurrentState={upgradeNotificationCurrentState}\n            setupgradeNotificationCurrentState={setUpgradeNotificationCurrentState}\n          />\n        ) : (\n          <p className=\"p-3 small\">{intl.formatMessage(messages.noNotificationsMessage)}</p>\n        )}\n      </div>\n    </SidebarBase>\n  );\n};\n\nNotificationTray.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nNotificationTray.Trigger = NotificationTrigger;\nNotificationTray.ID = ID;\n\nexport default injectIntl(NotificationTray);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  discussionsTitle: {\n    id: 'discussions.sidebar.title',\n    defaultMessage: 'Discussions',\n    description: 'Title text for a forum where users are able to discuss course topics',\n  },\n  openDiscussionsTrigger: {\n    id: 'discussions.sidebar.open.button',\n    defaultMessage: 'Show discussions tray',\n    description: 'Alt text for a button that opens the discussions feature',\n  },\n});\n\nexport default messages;\n","import { ensureConfig, getConfig } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Icon } from '@edx/paragon';\nimport { QuestionAnswer } from '@edx/paragon/icons';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useModel } from '../../../../../generic/model-store';\nimport { getCourseDiscussionTopics } from '../../../../data/thunks';\nimport SidebarTriggerBase from '../../common/TriggerBase';\nimport SidebarContext from '../../SidebarContext';\nimport messages from './messages';\n\nensureConfig(['DISCUSSIONS_MFE_BASE_URL']);\nexport const ID = 'DISCUSSIONS';\n\nconst DiscussionsTrigger = ({\n  intl,\n  onClick,\n}) => {\n  const {\n    unitId,\n    courseId,\n  } = useContext(SidebarContext);\n  const dispatch = useDispatch();\n  const { tabs } = useModel('courseHomeMeta', courseId);\n  const topic = useModel('discussionTopics', unitId);\n  const baseUrl = getConfig().DISCUSSIONS_MFE_BASE_URL;\n  const edxProvider = useMemo(\n    () => tabs?.find(tab => tab.slug === 'discussion'),\n    [tabs],\n  );\n\n  useEffect(() => {\n    if (baseUrl && edxProvider) {\n      dispatch(getCourseDiscussionTopics(courseId));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [courseId, baseUrl]);\n\n  if (!topic?.id || !topic?.enabledInContext) {\n    return null;\n  }\n\n  return (\n    <SidebarTriggerBase onClick={onClick} ariaLabel={intl.formatMessage(messages.openDiscussionsTrigger)}>\n      <Icon src={QuestionAnswer} className=\"m-0 m-auto\" />\n    </SidebarTriggerBase>\n  );\n};\n\nDiscussionsTrigger.propTypes = {\n  intl: intlShape.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(DiscussionsTrigger);\n","import { ensureConfig, getConfig } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport React, { useContext } from 'react';\nimport { useModel } from '../../../../../generic/model-store';\nimport SidebarBase from '../../common/SidebarBase';\nimport SidebarContext from '../../SidebarContext';\nimport { ID } from './DiscussionsTrigger';\n\nimport messages from './messages';\n\nensureConfig(['DISCUSSIONS_MFE_BASE_URL']);\n\nconst DiscussionsSidebar = ({ intl }) => {\n  const {\n    unitId,\n    courseId,\n  } = useContext(SidebarContext);\n  const topic = useModel('discussionTopics', unitId);\n  const discussionsUrl = `${getConfig().DISCUSSIONS_MFE_BASE_URL}/${courseId}/category/${unitId}`;\n\n  if (!topic?.id || !topic?.enabledInContext) {\n    return null;\n  }\n\n  return (\n    <SidebarBase\n      title={intl.formatMessage(messages.discussionsTitle)}\n      ariaLabel={intl.formatMessage(messages.discussionsTitle)}\n      sidebarId={ID}\n      width=\"50rem\"\n      showTitleBar={false}\n    >\n      <iframe\n        src={`${discussionsUrl}?inContextSidebar`}\n        className=\"d-flex w-100 h-100 border-0\"\n        title={intl.formatMessage(messages.discussionsTitle)}\n        allow=\"clipboard-write\"\n        loading=\"lazy\"\n      />\n    </SidebarBase>\n  );\n};\n\nDiscussionsSidebar.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nDiscussionsSidebar.Trigger = DiscussionsSidebar;\nDiscussionsSidebar.ID = ID;\n\nexport default injectIntl(DiscussionsSidebar);\n","import * as notifications from './notifications';\nimport * as discusssions from './discussions';\n\nexport const SIDEBARS = {\n  [notifications.ID]: {\n    ID: notifications.ID,\n    Sidebar: notifications.Sidebar,\n    Trigger: notifications.Trigger,\n  },\n  [discusssions.ID]: {\n    ID: discusssions.ID,\n    Sidebar: discusssions.Sidebar,\n    Trigger: discusssions.Trigger,\n  },\n};\n\nexport const SIDEBAR_ORDER = [\n  discusssions.ID,\n  notifications.ID,\n];\n","import React from 'react';\nimport { SIDEBAR_ORDER, SIDEBARS } from './sidebars';\n\nconst Sidebar = () => (\n  <>\n    {\n      SIDEBAR_ORDER.map((sideBarId) => {\n        const SidebarToRender = SIDEBARS[sideBarId].Sidebar;\n        return <SidebarToRender />;\n      })\n    }\n  </>\n);\n\nexport default Sidebar;\n","import classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport SidebarContext from './SidebarContext';\nimport { SIDEBAR_ORDER, SIDEBARS } from './sidebars';\n\nconst SidebarTriggers = () => {\n  const {\n    toggleSidebar,\n    currentSidebar,\n  } = useContext(SidebarContext);\n  return (\n    <div className=\"d-flex ml-auto\">\n      {SIDEBAR_ORDER.map((sidebarId) => {\n        const { Trigger } = SIDEBARS[sidebarId];\n        const isActive = sidebarId === currentSidebar;\n        return (\n          <div\n            className={classNames('mt-3', { 'border-primary-700': isActive })}\n            style={{ borderBottom: isActive ? '2px solid' : null }}\n            key={sidebarId}\n          >\n            <Trigger onClick={() => toggleSidebar(sidebarId)} key={sidebarId} />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nSidebarTriggers.propTypes = {};\n\nexport default SidebarTriggers;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  headerPlaceholder: {\n    id: 'learn.header.h2.placeholder',\n    defaultMessage: 'Level 2 headings may be created by course providers in the future.',\n    description: 'Message spoken by a screenreader indicating that the h2 tag is a placeholder.',\n  },\n  loadFailure: {\n    id: 'learn.course.load.failure',\n    defaultMessage: 'There was an error loading this course.',\n    description: 'Message when a course fails to load',\n  },\n  loadingHonorCode: {\n    id: 'learn.loading.honor.codk',\n    defaultMessage: 'Loading honor code messaging...',\n    description: 'Message shown when an interface about the honor code is being loaded',\n  },\n  loadingLockedContent: {\n    id: 'learn.loading.content.lock',\n    defaultMessage: 'Loading locked content messaging...',\n    description: 'Message shown when an interface about locked content is being loaded',\n  },\n  loadingSequence: {\n    id: 'learn.loading.learning.sequence',\n    defaultMessage: 'Loading learning sequence...',\n    description: 'Message when learning sequence is being loaded',\n  },\n  noContent: {\n    id: 'learn.sequence.no.content',\n    defaultMessage: 'There is no content here.',\n    description: 'Message shown when there is no content to show a user inside a learning sequence.',\n  },\n});\n\nexport default messages;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  header: {\n    id: 'learn.hiddenAfterDue.header',\n    defaultMessage: 'The due date for this assignment has passed.',\n    description: 'Shown when content of a course is longer available because due date passed',\n  },\n  description: {\n    id: 'learn.hiddenAfterDue.description',\n    defaultMessage: 'Because the due date has passed, this assignment is no longer available.',\n    description: 'It explain why the content is not available',\n  },\n  gradeAvailable: {\n    id: 'learn.hiddenAfterDue.gradeAvailable',\n    defaultMessage: 'If you have completed this assignment, your grade is available on the {progressPage}.',\n    description: 'Text that precedes link that redirect to progress page',\n  },\n  progressPage: {\n    id: 'learn.hiddenAfterDue.progressPage',\n    defaultMessage: 'progress page',\n    description: 'This is the text for the link embedded in learn.hiddenAfterDue.gradeAvailable',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Alert, Hyperlink } from '@edx/paragon';\nimport { Info } from '@edx/paragon/icons';\n\nimport { useModel } from '../../../../generic/model-store';\n\nimport messages from './messages';\n\nconst HiddenAfterDue = ({ courseId, intl }) => {\n  const { tabs } = useModel('courseHomeMeta', courseId);\n\n  const progressTab = tabs.find(tab => tab.slug === 'progress');\n  const progressLink = progressTab && progressTab.url && (\n    <Hyperlink\n      style={{ textDecoration: 'underline' }}\n      destination={progressTab.url}\n      className=\"text-reset\"\n    >\n      {intl.formatMessage(messages.progressPage)}\n    </Hyperlink>\n  );\n\n  return (\n    <Alert variant=\"info\" icon={Info}>\n      <h3>{intl.formatMessage(messages.header)}</h3>\n      <p>\n        {intl.formatMessage(messages.description)}\n        {progressLink && (\n          <>\n            <br />\n            <FormattedMessage\n              id=\"learn.hiddenAfterDue.gradeAvailable\"\n              defaultMessage=\"If you have completed this assignment, your grade is available on the {progressPage}.\"\n              values={{\n                progressPage: progressLink,\n              }}\n            />\n          </>\n        )}\n      </p>\n    </Alert>\n  );\n};\n\nHiddenAfterDue.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(HiddenAfterDue);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faVideo, faBook, faEdit, faTasks, faLock,\n} from '@fortawesome/free-solid-svg-icons';\n\nconst UnitIcon = ({ type }) => {\n  let icon = null;\n  switch (type) {\n    case 'video':\n      icon = faVideo;\n      break;\n    case 'other':\n      icon = faBook;\n      break;\n    case 'vertical':\n      icon = faTasks;\n      break;\n    case 'problem':\n      icon = faEdit;\n      break;\n    case 'lock':\n      icon = faLock;\n      break;\n    default:\n      icon = faBook;\n  }\n\n  return (\n    <FontAwesomeIcon className=\"unit-icon\" icon={icon} />\n  );\n};\n\nUnitIcon.propTypes = {\n  type: PropTypes.oneOf(['video', 'other', 'vertical', 'problem', 'lock']).isRequired,\n};\n\nexport default UnitIcon;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\n\nconst CompleteIcon = (props) => <FontAwesomeIcon icon={faCheck} {...props} />;\n\nexport default CompleteIcon;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBookmark } from '@fortawesome/free-solid-svg-icons';\n\nconst BookmarkFilledIcon = (props) => <FontAwesomeIcon icon={faBookmark} {...props} />;\n\nexport default BookmarkFilledIcon;\n","import React, { useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { Button } from '@edx/paragon';\n\nimport UnitIcon from './UnitIcon';\nimport CompleteIcon from './CompleteIcon';\nimport BookmarkFilledIcon from '../../bookmark/BookmarkFilledIcon';\n\nconst UnitButton = ({\n  onClick,\n  title,\n  contentType,\n  isActive,\n  bookmarked,\n  complete,\n  showCompletion,\n  unitId,\n  className,\n  showTitle,\n}) => {\n  const { courseId, sequenceId } = useSelector(state => state.courseware);\n\n  const handleClick = useCallback(() => {\n    onClick(unitId);\n  }, [onClick, unitId]);\n\n  return (\n    <Button\n      className={classNames({\n        active: isActive,\n        complete: showCompletion && complete,\n      }, className)}\n      variant=\"link\"\n      onClick={handleClick}\n      title={title}\n      as={Link}\n      to={`/course/${courseId}/${sequenceId}/${unitId}`}\n    >\n      <UnitIcon type={contentType} />\n      {showTitle && <span className=\"unit-title\">{title}</span>}\n      {showCompletion && complete ? <CompleteIcon size=\"sm\" className=\"text-success ml-2\" /> : null}\n      {bookmarked ? (\n        <BookmarkFilledIcon\n          className=\"text-primary small position-absolute\"\n          style={{ top: '-3px', right: '5px' }}\n        />\n      ) : null}\n    </Button>\n  );\n};\n\nUnitButton.propTypes = {\n  bookmarked: PropTypes.bool,\n  className: PropTypes.string,\n  complete: PropTypes.bool,\n  contentType: PropTypes.string.isRequired,\n  isActive: PropTypes.bool,\n  onClick: PropTypes.func.isRequired,\n  showCompletion: PropTypes.bool,\n  showTitle: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n};\n\nUnitButton.defaultProps = {\n  className: undefined,\n  isActive: false,\n  bookmarked: false,\n  complete: false,\n  showTitle: false,\n  showCompletion: true,\n};\n\nconst mapStateToProps = (state, props) => {\n  if (props.unitId) {\n    return {\n      ...state.models.units[props.unitId],\n    };\n  }\n  return {};\n};\n\nexport default connect(mapStateToProps)(UnitButton);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown } from '@edx/paragon';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\n\nimport UnitButton from './UnitButton';\n\nconst SequenceNavigationDropdown = ({\n  unitId,\n  onNavigate,\n  showCompletion,\n  unitIds,\n}) => (\n  <Dropdown className=\"sequence-navigation-dropdown\">\n    <Dropdown.Toggle variant=\"link\" className=\"font-weight-normal w-100 border-right-0\">\n      <FormattedMessage\n        defaultMessage=\"{current} of {total}\"\n        description=\"The title of the mobile menu for sequence navigation of units\"\n        id=\"learn.course.sequence.navigation.mobile.menu\"\n        values={{\n          current: unitIds.indexOf(unitId) + 1,\n          total: unitIds.length,\n        }}\n      />\n    </Dropdown.Toggle>\n    <Dropdown.Menu className=\"w-100\">\n      {unitIds.map(buttonUnitId => (\n        <Dropdown.Item\n          as={UnitButton}\n          className=\"w-100\"\n          isActive={unitId === buttonUnitId}\n          key={buttonUnitId}\n          onClick={onNavigate}\n          showCompletion={showCompletion}\n          showTitle\n          unitId={buttonUnitId}\n        />\n      ))}\n    </Dropdown.Menu>\n  </Dropdown>\n);\n\nSequenceNavigationDropdown.propTypes = {\n  unitId: PropTypes.string.isRequired,\n  onNavigate: PropTypes.func.isRequired,\n  showCompletion: PropTypes.bool.isRequired,\n  unitIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default SequenceNavigationDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport UnitButton from './UnitButton';\nimport SequenceNavigationDropdown from './SequenceNavigationDropdown';\nimport useIndexOfLastVisibleChild from '../../../../generic/tabs/useIndexOfLastVisibleChild';\n\nconst SequenceNavigationTabs = ({\n  unitIds, unitId, showCompletion, onNavigate,\n}) => {\n  const [\n    indexOfLastVisibleChild,\n    containerRef,\n    invisibleStyle,\n  ] = useIndexOfLastVisibleChild();\n  const shouldDisplayDropdown = indexOfLastVisibleChild === -1;\n\n  return (\n    <div style={{ flexBasis: '100%', minWidth: 0 }}>\n      <div className=\"sequence-navigation-tabs-container\" ref={containerRef}>\n        <div\n          className=\"sequence-navigation-tabs d-flex flex-grow-1\"\n          style={shouldDisplayDropdown ? invisibleStyle : null}\n        >\n          {unitIds.map(buttonUnitId => (\n            <UnitButton\n              key={buttonUnitId}\n              unitId={buttonUnitId}\n              isActive={unitId === buttonUnitId}\n              showCompletion={showCompletion}\n              onClick={onNavigate}\n            />\n          ))}\n        </div>\n      </div>\n      {shouldDisplayDropdown && (\n        <SequenceNavigationDropdown\n          unitId={unitId}\n          onNavigate={onNavigate}\n          showCompletion={showCompletion}\n          unitIds={unitIds}\n        />\n      )}\n    </div>\n  );\n};\n\nSequenceNavigationTabs.propTypes = {\n  unitId: PropTypes.string.isRequired,\n  onNavigate: PropTypes.func.isRequired,\n  showCompletion: PropTypes.bool.isRequired,\n  unitIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default SequenceNavigationTabs;\n","/* eslint-disable import/prefer-default-export */\n\nimport { useSelector } from 'react-redux';\nimport { useModel } from '../../../../generic/model-store';\nimport { sequenceIdsSelector } from '../../../data';\n\nexport function useSequenceNavigationMetadata(currentSequenceId, currentUnitId) {\n  const sequenceIds = useSelector(sequenceIdsSelector);\n  const sequence = useModel('sequences', currentSequenceId);\n  const courseId = useSelector(state => state.courseware.courseId);\n  const courseStatus = useSelector(state => state.courseware.courseStatus);\n  const sequenceStatus = useSelector(state => state.courseware.sequenceStatus);\n\n  // If we don't know the sequence and unit yet, then assume no.\n  if (courseStatus !== 'loaded' || sequenceStatus !== 'loaded' || !currentSequenceId || !currentUnitId) {\n    return { isFirstUnit: false, isLastUnit: false };\n  }\n\n  const sequenceIndex = sequenceIds.indexOf(currentSequenceId);\n  const unitIndex = sequence.unitIds.indexOf(currentUnitId);\n\n  const isFirstSequence = sequenceIndex === 0;\n  const isFirstUnitInSequence = unitIndex === 0;\n  const isFirstUnit = isFirstSequence && isFirstUnitInSequence;\n  const isLastSequence = sequenceIndex === sequenceIds.length - 1;\n  const isLastUnitInSequence = unitIndex === sequence.unitIds.length - 1;\n  const isLastUnit = isLastSequence && isLastUnitInSequence;\n\n  const nextSequenceId = sequenceIndex < sequenceIds.length - 1 ? sequenceIds[sequenceIndex + 1] : null;\n  const previousSequenceId = sequenceIndex > 0 ? sequenceIds[sequenceIndex - 1] : null;\n\n  let nextLink;\n  if (isLastUnit) {\n    nextLink = `/course/${courseId}/course-end`;\n  } else {\n    const nextIndex = unitIndex + 1;\n    if (nextIndex < sequence.unitIds.length) {\n      const nextUnitId = sequence.unitIds[nextIndex];\n      nextLink = `/course/${courseId}/${currentSequenceId}/${nextUnitId}`;\n    } else if (nextSequenceId) {\n      nextLink = `/course/${courseId}/${nextSequenceId}/first`;\n    }\n  }\n\n  let previousLink;\n  const previousIndex = unitIndex - 1;\n  if (previousIndex >= 0) {\n    const previousUnitId = sequence.unitIds[previousIndex];\n    previousLink = `/course/${courseId}/${currentSequenceId}/${previousUnitId}`;\n  } else if (previousSequenceId) {\n    previousLink = `/course/${courseId}/${previousSequenceId}/last`;\n  }\n\n  return {\n    isFirstUnit, isLastUnit, nextLink, previousLink,\n  };\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  nextButton: {\n    id: 'learn.sequence.navigation.next.button',\n    defaultMessage: 'Next',\n    description: 'Button to advance to the next section',\n  },\n  nextUpButton: {\n    id: 'learn.sequence.navigation.next.up.button',\n    defaultMessage: 'Next Up: {title}',\n    description: 'Button to advance to the next section, with title',\n  },\n  previousButton: {\n    id: 'learn.sequence.navigation.previous.button',\n    defaultMessage: 'Previous',\n    description: 'Button to return to the previous section',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { breakpoints, Button, useWindowSize } from '@edx/paragon';\nimport { ChevronLeft, ChevronRight } from '@edx/paragon/icons';\nimport classNames from 'classnames';\nimport {\n  injectIntl,\n  intlShape,\n  isRtl,\n  getLocale,\n} from '@edx/frontend-platform/i18n';\n\nimport { useSelector } from 'react-redux';\nimport { GetCourseExitNavigation } from '../../course-exit';\nimport UnitButton from './UnitButton';\nimport SequenceNavigationTabs from './SequenceNavigationTabs';\nimport { useSequenceNavigationMetadata } from './hooks';\nimport { useModel } from '../../../../generic/model-store';\nimport { LOADED } from '../../../data/slice';\n\nimport messages from './messages';\n\nconst SequenceNavigation = ({\n  intl,\n  unitId,\n  sequenceId,\n  className,\n  onNavigate,\n  nextHandler,\n  previousHandler,\n}) => {\n  const sequence = useModel('sequences', sequenceId);\n  const {\n    isFirstUnit, isLastUnit, nextLink, previousLink,\n  } = useSequenceNavigationMetadata(sequenceId, unitId);\n  const {\n    courseId,\n    sequenceStatus,\n  } = useSelector(state => state.courseware);\n  const isLocked = sequenceStatus === LOADED ? (\n    sequence.gatedContent !== undefined && sequence.gatedContent.gated\n  ) : undefined;\n\n  const shouldDisplayNotificationTriggerInSequence = useWindowSize().width < breakpoints.small.minWidth;\n\n  const renderUnitButtons = () => {\n    if (isLocked) {\n      return (\n        <UnitButton unitId={unitId} title=\"\" contentType=\"lock\" isActive onClick={() => {}} />\n      );\n    }\n    if (sequence.unitIds.length === 0 || unitId === null) {\n      return (\n        <div style={{ flexBasis: '100%', minWidth: 0, borderBottom: 'solid 1px #EAEAEA' }} />\n      );\n    }\n    return (\n      <SequenceNavigationTabs\n        unitIds={sequence.unitIds}\n        unitId={unitId}\n        showCompletion={sequence.showCompletion}\n        onNavigate={onNavigate}\n      />\n    );\n  };\n\n  const renderPreviousButton = () => {\n    const disabled = isFirstUnit;\n    const prevArrow = isRtl(getLocale()) ? ChevronRight : ChevronLeft;\n\n    return (\n      <Button\n        variant=\"link\"\n        className=\"previous-btn\"\n        onClick={previousHandler}\n        disabled={disabled}\n        iconBefore={prevArrow}\n        as={disabled ? undefined : Link}\n        to={disabled ? undefined : previousLink}\n      >\n        {shouldDisplayNotificationTriggerInSequence ? null : intl.formatMessage(messages.previousButton)}\n      </Button>\n    );\n  };\n\n  const renderNextButton = () => {\n    const { exitActive, exitText } = GetCourseExitNavigation(courseId, intl);\n    const buttonText = (isLastUnit && exitText) ? exitText : intl.formatMessage(messages.nextButton);\n    const disabled = isLastUnit && !exitActive;\n    const nextArrow = isRtl(getLocale()) ? ChevronLeft : ChevronRight;\n\n    return (\n      <Button\n        variant=\"link\"\n        className=\"next-btn\"\n        onClick={nextHandler}\n        disabled={disabled}\n        iconAfter={nextArrow}\n        as={disabled ? undefined : Link}\n        to={disabled ? undefined : nextLink}\n      >\n        {shouldDisplayNotificationTriggerInSequence ? null : buttonText}\n      </Button>\n    );\n  };\n\n  return sequenceStatus === LOADED && (\n    <nav id=\"courseware-sequenceNavigation\" className={classNames('sequence-navigation', className)} style={{ width: shouldDisplayNotificationTriggerInSequence ? '90%' : null }}>\n      {renderPreviousButton()}\n      {renderUnitButtons()}\n      {renderNextButton()}\n\n    </nav>\n  );\n};\n\nSequenceNavigation.propTypes = {\n  intl: intlShape.isRequired,\n  sequenceId: PropTypes.string.isRequired,\n  unitId: PropTypes.string,\n  className: PropTypes.string,\n  onNavigate: PropTypes.func.isRequired,\n  nextHandler: PropTypes.func.isRequired,\n  previousHandler: PropTypes.func.isRequired,\n};\n\nSequenceNavigation.defaultProps = {\n  className: null,\n  unitId: null,\n};\n\nexport default injectIntl(SequenceNavigation);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport EffortEstimate from '../../../../shared/effort-estimate';\nimport { sequenceIdsSelector } from '../../../data';\nimport { useModel } from '../../../../generic/model-store';\n\nimport messages from './messages';\n\n// This component exists to peek ahead at the next sequence and grab its estimated effort.\n// If we should be showing the next sequence's effort, we display the title and effort instead of \"Next\".\n\n/**\n * Note: this component is basically ignored and just acts as a pass-through to children components right now because\n * effort estimation is no longer attached to the sequence model. It used to be attached, via the LMS blocks API and\n * its block transformers. But as part of the effort to remove reliance on modulestore blocks on the LMS side, we\n * stopped calling that API and we lost effort estimation in the deal.\n *\n * See https://openedx.atlassian.net/browse/AA-930 for the initiative to refactor Effort Estimation to avoid the\n * modulestore, which would allow us to revive the usefulness of this component again.\n */\n\nconst UnitNavigationEffortEstimate = ({\n  children,\n  intl,\n  sequenceId,\n  unitId,\n}) => {\n  const sequenceIds = useSelector(sequenceIdsSelector);\n  const sequenceIndex = sequenceIds.indexOf(sequenceId);\n  const nextSequenceId = sequenceIndex < sequenceIds.length - 1 ? sequenceIds[sequenceIndex + 1] : null;\n  const sequence = useModel('sequences', sequenceId);\n  const nextSequence = useModel('sequences', nextSequenceId);\n\n  if (!sequence || Object.keys(sequence).length === 0 || !nextSequence || Object.keys(nextSequence).length === 0) {\n    return children;\n  }\n\n  const isLastUnitInSequence = sequence.unitIds.indexOf(unitId) === sequence.unitIds.length - 1;\n  if (!isLastUnitInSequence) {\n    return children;\n  }\n\n  // If we don't have info to show for the next sequence, just bail\n  if (!nextSequence.effortActivities && !nextSequence.effortTime) {\n    return children;\n  }\n\n  // Note: we don't use `children` here - we replace it with the next sequence's title.\n  return (\n    <div className=\"d-inline-block text-wrap\">\n      {intl.formatMessage(messages.nextUpButton, { title: nextSequence.title })}\n      <EffortEstimate className=\"d-block mt-1\" block={nextSequence} />\n    </div>\n  );\n};\n\nUnitNavigationEffortEstimate.propTypes = {\n  children: PropTypes.node,\n  intl: intlShape.isRequired,\n  sequenceId: PropTypes.string.isRequired,\n  unitId: PropTypes.string,\n};\n\nUnitNavigationEffortEstimate.defaultProps = {\n  children: null,\n  unitId: null,\n};\n\nexport default injectIntl(UnitNavigationEffortEstimate);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Button } from '@edx/paragon';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport {\n  injectIntl, intlShape, isRtl, getLocale,\n} from '@edx/frontend-platform/i18n';\nimport { useSelector } from 'react-redux';\n\nimport { GetCourseExitNavigation } from '../../course-exit';\n\nimport UnitNavigationEffortEstimate from './UnitNavigationEffortEstimate';\nimport { useSequenceNavigationMetadata } from './hooks';\nimport messages from './messages';\n\nconst UnitNavigation = ({\n  intl,\n  sequenceId,\n  unitId,\n  onClickPrevious,\n  onClickNext,\n}) => {\n  const {\n    isFirstUnit, isLastUnit, nextLink, previousLink,\n  } = useSequenceNavigationMetadata(sequenceId, unitId);\n  const { courseId } = useSelector(state => state.courseware);\n\n  const renderPreviousButton = () => {\n    const disabled = isFirstUnit;\n    const prevArrow = isRtl(getLocale()) ? faChevronRight : faChevronLeft;\n    return (\n      <Button\n        variant=\"outline-secondary\"\n        className=\"previous-button mr-2 d-flex align-items-center justify-content-center\"\n        disabled={disabled}\n        onClick={onClickPrevious}\n        as={disabled ? undefined : Link}\n        to={disabled ? undefined : previousLink}\n      >\n        <FontAwesomeIcon icon={prevArrow} className=\"mr-2\" size=\"sm\" />\n        {intl.formatMessage(messages.previousButton)}\n      </Button>\n    );\n  };\n\n  const renderNextButton = () => {\n    const { exitActive, exitText } = GetCourseExitNavigation(courseId, intl);\n    const buttonText = (isLastUnit && exitText) ? exitText : intl.formatMessage(messages.nextButton);\n    const disabled = isLastUnit && !exitActive;\n    const nextArrow = isRtl(getLocale()) ? faChevronLeft : faChevronRight;\n    return (\n      <Button\n        variant=\"outline-primary\"\n        className=\"next-button d-flex align-items-center justify-content-center\"\n        onClick={onClickNext}\n        disabled={disabled}\n        as={disabled ? undefined : Link}\n        to={disabled ? undefined : nextLink}\n      >\n        <UnitNavigationEffortEstimate sequenceId={sequenceId} unitId={unitId}>\n          {buttonText}\n        </UnitNavigationEffortEstimate>\n        <FontAwesomeIcon icon={nextArrow} className=\"ml-2\" size=\"sm\" />\n      </Button>\n    );\n  };\n\n  return (\n    <div className=\"unit-navigation d-flex\">\n      {renderPreviousButton()}\n      {renderNextButton()}\n    </div>\n  );\n};\n\nUnitNavigation.propTypes = {\n  intl: intlShape.isRequired,\n  sequenceId: PropTypes.string.isRequired,\n  unitId: PropTypes.string,\n  onClickPrevious: PropTypes.func.isRequired,\n  onClickNext: PropTypes.func.isRequired,\n};\n\nUnitNavigation.defaultProps = {\n  unitId: null,\n};\n\nexport default injectIntl(UnitNavigation);\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBookmark } from '@fortawesome/free-regular-svg-icons';\n\nconst BookmarkOutlineIcon = (props) => <FontAwesomeIcon icon={faBookmark} {...props} />;\n\nexport default BookmarkOutlineIcon;\n","import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient, getAuthenticatedUser } from '@edx/frontend-platform/auth';\n\nexport const getBookmarksBaseUrl = () => `${getConfig().LMS_BASE_URL}/api/bookmarks/v1/bookmarks/`;\n\nexport async function createBookmark(usageId) {\n  return getAuthenticatedHttpClient().post(getBookmarksBaseUrl(), { usage_id: usageId });\n}\n\nexport async function deleteBookmark(usageId) {\n  const { username } = getAuthenticatedUser();\n  return getAuthenticatedHttpClient().delete(`${getBookmarksBaseUrl()}${username},${usageId}/`);\n}\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { StatefulButton } from '@edx/paragon';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { useDispatch } from 'react-redux';\nimport BookmarkOutlineIcon from './BookmarkOutlineIcon';\nimport BookmarkFilledIcon from './BookmarkFilledIcon';\nimport { removeBookmark, addBookmark } from './data/thunks';\n\nconst addBookmarkLabel = (\n  <FormattedMessage\n    id=\"unit.bookmark.button.add.bookmark\"\n    defaultMessage=\"Bookmark this page\"\n    description=\"The button to bookmark a page\"\n  />\n);\n\nconst hasBookmarkLabel = (\n  <FormattedMessage\n    id=\"unit.bookmark.button.remove.bookmark\"\n    defaultMessage=\"Bookmarked\"\n    description=\"The button to show a page is bookmarked and the button to remove that bookmark\"\n  />\n);\n\nconst BookmarkButton = ({\n  isBookmarked, isProcessing, unitId,\n}) => {\n  const bookmarkState = isBookmarked ? 'bookmarked' : 'default';\n  const state = isProcessing ? `${bookmarkState}Processing` : bookmarkState;\n\n  const dispatch = useDispatch();\n  const toggleBookmark = useCallback(() => {\n    if (isBookmarked) {\n      dispatch(removeBookmark(unitId));\n    } else {\n      dispatch(addBookmark(unitId));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isBookmarked, unitId]);\n\n  return (\n    <StatefulButton\n      variant=\"link\"\n      className=\"px-1 ml-n1 btn-sm text-primary-500\"\n      onClick={toggleBookmark}\n      state={state}\n      disabledStates={['defaultProcessing', 'bookmarkedProcessing']}\n      labels={{\n        default: addBookmarkLabel,\n        defaultProcessing: addBookmarkLabel,\n        bookmarked: hasBookmarkLabel,\n        bookmarkedProcessing: hasBookmarkLabel,\n      }}\n      icons={{\n        default: <BookmarkOutlineIcon className=\"text-primary\" />,\n        defaultProcessing: <BookmarkOutlineIcon className=\"text-primary\" />,\n        bookmarked: <BookmarkFilledIcon className=\"text-primary\" />,\n        bookmarkedProcessing: <BookmarkFilledIcon className=\"text-primary\" />,\n      }}\n    />\n  );\n};\n\nBookmarkButton.propTypes = {\n  unitId: PropTypes.string.isRequired,\n  isBookmarked: PropTypes.bool,\n  isProcessing: PropTypes.bool.isRequired,\n};\n\nBookmarkButton.defaultProps = {\n  isBookmarked: false,\n};\n\nexport default BookmarkButton;\n","import { logError } from '@edx/frontend-platform/logging';\nimport {\n  createBookmark,\n  deleteBookmark,\n} from './api';\nimport { updateModel } from '../../../../generic/model-store';\n\nexport function addBookmark(unitId) {\n  return async (dispatch) => {\n    // Optimistically update the bookmarked flag.\n    dispatch(updateModel({\n      modelType: 'units',\n      model: {\n        id: unitId,\n        bookmarked: true,\n        bookmarkedUpdateState: 'loading',\n      },\n    }));\n\n    try {\n      await createBookmark(unitId);\n      dispatch(updateModel({\n        modelType: 'units',\n        model: {\n          id: unitId,\n          bookmarked: true,\n          bookmarkedUpdateState: 'loaded',\n        },\n      }));\n    } catch (error) {\n      logError(error);\n      dispatch(updateModel({\n        modelType: 'units',\n        model: {\n          id: unitId,\n          bookmarked: false,\n          bookmarkedUpdateState: 'failed',\n        },\n      }));\n    }\n  };\n}\n\nexport function removeBookmark(unitId) {\n  return async (dispatch) => {\n    // Optimistically update the bookmarked flag.\n    dispatch(updateModel({\n      modelType: 'units',\n      model: {\n        id: unitId,\n        bookmarked: false,\n        bookmarkedUpdateState: 'loading',\n      },\n    }));\n    try {\n      await deleteBookmark(unitId);\n      dispatch(updateModel({\n        modelType: 'units',\n        model: {\n          id: unitId,\n          bookmarked: false,\n          bookmarkedUpdateState: 'loaded',\n        },\n      }));\n    } catch (error) {\n      logError(error);\n      dispatch(updateModel({\n        modelType: 'units',\n        model: {\n          id: unitId,\n          bookmarked: true,\n          bookmarkedUpdateState: 'failed',\n        },\n      }));\n    }\n  };\n}\n","import React from 'react';\n\nimport { logError } from '@edx/frontend-platform/logging';\nimport { StrictDict, useKeyedState } from '@edx/react-unit-test-utils';\nimport { getExamAccess, fetchExamAccess, isExam } from '@edx/frontend-lib-special-exams';\n\nexport const stateKeys = StrictDict({\n  accessToken: 'accessToken',\n  blockAccess: 'blockAccess',\n});\n\nconst useExamAccess = ({\n  id,\n}) => {\n  const [accessToken, setAccessToken] = useKeyedState(stateKeys.accessToken, '');\n  const [blockAccess, setBlockAccess] = useKeyedState(stateKeys.blockAccess, isExam());\n  React.useEffect(() => {\n    if (isExam()) {\n      fetchExamAccess()\n        .finally(() => {\n          const examAccess = getExamAccess();\n          setAccessToken(examAccess);\n          setBlockAccess(false);\n        })\n        .catch((error) => {\n          logError(error);\n        });\n    }\n  }, [id]);\n\n  return {\n    blockAccess,\n    accessToken,\n  };\n};\n\nexport default useExamAccess;\n","import { StrictDict } from '@edx/react-unit-test-utils/dist';\n\nexport const modelKeys = StrictDict({\n  units: 'units',\n  coursewareMeta: 'coursewareMeta',\n});\n\nexport const views = StrictDict({\n  student: 'student_view',\n  public: 'public_view',\n});\n\nexport const loadingState = 'loading';\n\nexport const messageTypes = StrictDict({\n  modal: 'plugin.modal',\n  resize: 'plugin.resize',\n  videoFullScreen: 'plugin.videoFullScreen',\n});\n\nexport default StrictDict({\n  modelKeys,\n  views,\n  loadingState,\n  messageTypes,\n});\n","import React from 'react';\n\n/**\n * We discovered an error in Firefox where - upon iframe load - React would cease to call any\n * useEffect hooks until the user interacts with the page again.  This is particularly confusing\n * when navigating between sequences, as the UI partially updates leaving the user in a nebulous\n * state.\n *\n * We were able to solve this error by using a layout effect to update some component state, which\n * executes synchronously on render.  Somehow this forces React to continue it's lifecycle\n * immediately, rather than waiting for user interaction.  This layout effect could be anywhere in\n * the parent tree, as far as we can tell - we chose to add a conspicuously 'load bearing' (that's\n * a joke) one here so it wouldn't be accidentally removed elsewhere.\n *\n * If we remove this hook when one of these happens:\n * 1. React figures out that there's an issue here and fixes a bug.\n * 2. We cease to use an iframe for unit rendering.\n * 3. Firefox figures out that there's an issue in their iframe loading and fixes a bug.\n * 4. We stop supporting Firefox.\n * 5. An enterprising engineer decides to create a repo that reproduces the problem, submits it to\n *    Firefox/React for review, and they kindly help us figure out what in the world is happening\n *    so  we can fix it.\n *\n * This hook depends on the unit id just to make sure it re-evaluates whenever the ID changes.  If\n * we change whether or not the Unit component is re-mounted when the unit ID changes, this may\n * become important, as this hook will otherwise only evaluate the useLayoutEffect once.\n */\nconst useLoadBearingHook = (id) => {\n  const setValue = React.useState(0)[1];\n  React.useLayoutEffect(() => {\n    setValue(currentValue => currentValue + 1);\n  }, [id]);\n};\n\nexport default useLoadBearingHook;\n","import { getConfig } from '@edx/frontend-platform';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { StrictDict, useKeyedState } from '@edx/react-unit-test-utils';\nimport { logError } from '@edx/frontend-platform/logging';\n\nimport { fetchCourse } from '../../../../data';\nimport { processEvent } from '../../../../../course-home/data/thunks';\nimport { useEventListener } from '../../../../../generic/hooks';\nimport { messageTypes } from '../constants';\n\nimport useLoadBearingHook from './useLoadBearingHook';\n\nexport const stateKeys = StrictDict({\n  iframeHeight: 'iframeHeight',\n  hasLoaded: 'hasLoaded',\n  showError: 'showError',\n  windowTopOffset: 'windowTopOffset',\n});\n\nconst useIFrameBehavior = ({\n  elementId,\n  id,\n  iframeUrl,\n  onLoaded,\n}) => {\n  // Do not remove this hook.  See function description.\n  useLoadBearingHook(id);\n\n  const dispatch = useDispatch();\n\n  const [iframeHeight, setIframeHeight] = useKeyedState(stateKeys.iframeHeight, 0);\n  const [hasLoaded, setHasLoaded] = useKeyedState(stateKeys.hasLoaded, false);\n  const [showError, setShowError] = useKeyedState(stateKeys.showError, false);\n  const [windowTopOffset, setWindowTopOffset] = useKeyedState(stateKeys.windowTopOffset, null);\n\n  React.useEffect(() => {\n    const frame = document.getElementById(elementId);\n    const { hash } = window.location;\n    if (hash) {\n      // The url hash will be sent to LMS-served iframe in order to find the location of the\n      // hash within the iframe.\n      frame.contentWindow.postMessage({ hashName: hash }, `${getConfig().LMS_BASE_URL}`);\n    }\n  }, [id, onLoaded, iframeHeight, hasLoaded]);\n\n  const receiveMessage = React.useCallback(({ data }) => {\n    const { type, payload } = data;\n    if (type === messageTypes.resize) {\n      setIframeHeight(payload.height);\n\n      // We observe exit from the video xblock fullscreen mode\n      // and scroll to the previously saved scroll position\n      if (windowTopOffset !== null) {\n        window.scrollTo(0, Number(windowTopOffset));\n      }\n\n      if (!hasLoaded && iframeHeight === 0 && payload.height > 0) {\n        setHasLoaded(true);\n        if (onLoaded) {\n          onLoaded();\n        }\n      }\n    } else if (type === messageTypes.videoFullScreen) {\n      // We listen for this message from LMS to know when we need to\n      // save or reset scroll position on toggle video xblock fullscreen mode\n      setWindowTopOffset(payload.open ? window.scrollY : null);\n    } else if (data.offset) {\n      // We listen for this message from LMS to know when the page needs to\n      // be scrolled to another location on the page.\n      window.scrollTo(0, data.offset + document.getElementById('unit-iframe').offsetTop);\n    }\n  }, [\n    id,\n    onLoaded,\n    hasLoaded,\n    setHasLoaded,\n    iframeHeight,\n    setIframeHeight,\n    windowTopOffset,\n    setWindowTopOffset,\n  ]);\n\n  useEventListener('message', receiveMessage);\n\n  /**\n  * onLoad *should* only fire after everything in the iframe has finished its own load events.\n  * Which means that the plugin.resize message (which calls setHasLoaded above) will have fired already\n  * for a successful load. If it *has not fired*, we are in an error state. For example, the backend\n  * could have given us a 4xx or 5xx response.\n  */\n\n  const handleIFrameLoad = () => {\n    if (!hasLoaded) {\n      setShowError(true);\n      logError('Unit iframe failed to load. Server possibly returned 4xx or 5xx response.', {\n        iframeUrl,\n      });\n    }\n    window.onmessage = (e) => {\n      if (e.data.event_name) {\n        dispatch(processEvent(e.data, fetchCourse));\n      }\n    };\n  };\n\n  return {\n    iframeHeight,\n    handleIFrameLoad,\n    showError,\n    hasLoaded,\n  };\n};\n\nexport default useIFrameBehavior;\n","import React from 'react';\n\nimport { StrictDict, useKeyedState } from '@edx/react-unit-test-utils/dist';\n\nimport { useEventListener } from '../../../../../generic/hooks';\n\nexport const stateKeys = StrictDict({\n  isOpen: 'isOpen',\n  options: 'options',\n});\n\nexport const DEFAULT_HEIGHT = '100vh';\n\nconst useModalIFrameBehavior = () => {\n  const [isOpen, setIsOpen] = useKeyedState(stateKeys.isOpen, false);\n  const [options, setOptions] = useKeyedState(stateKeys.options, { height: DEFAULT_HEIGHT });\n\n  const receiveMessage = React.useCallback(({ data }) => {\n    const { type, payload } = data;\n    if (type === 'plugin.modal') {\n      setOptions((current) => ({ ...current, ...payload }));\n      setIsOpen(true);\n    }\n  }, []);\n  useEventListener('message', receiveMessage);\n\n  const handleModalClose = () => {\n    setIsOpen(false);\n  };\n\n  return {\n    handleModalClose,\n    modalOptions: { isOpen, ...options },\n  };\n};\n\nexport default useModalIFrameBehavior;\n","import React from 'react';\n\nimport { StrictDict, useKeyedState } from '@edx/react-unit-test-utils/dist';\nimport { useModel } from '../../../../../generic/model-store';\n\nimport { modelKeys } from '../constants';\n\nexport const stateKeys = StrictDict({\n  shouldDisplay: 'shouldDisplay',\n});\n\n/**\n * @return {bool} should the honor code be displayed?\n */\nconst useShouldDisplayHonorCode = ({ id, courseId }) => {\n  const [shouldDisplay, setShouldDisplay] = useKeyedState(stateKeys.shouldDisplay, false);\n\n  const { graded } = useModel(modelKeys.units, id);\n  const { userNeedsIntegritySignature } = useModel(modelKeys.coursewareMeta, courseId);\n\n  React.useEffect(() => {\n    setShouldDisplay(userNeedsIntegritySignature && graded);\n  }, [setShouldDisplay, userNeedsIntegritySignature]);\n\n  return shouldDisplay;\n};\n\nexport default useShouldDisplayHonorCode;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { ErrorPage } from '@edx/frontend-platform/react';\nimport { StrictDict } from '@edx/react-unit-test-utils';\nimport { Modal } from '@edx/paragon';\n\nimport PageLoading from '../../../../generic/PageLoading';\nimport * as hooks from './hooks';\n\n/**\n * Feature policy for iframe, allowing access to certain courseware-related media.\n *\n * We must use the wildcard (*) origin for each feature, as courseware content\n * may be embedded in external iframes. Notably, xblock-lti-consumer is a popular\n * block that iframes external course content.\n\n * This policy was selected in conference with the edX Security Working Group.\n * Changes to it should be vetted by them (security@edx.org).\n */\nexport const IFRAME_FEATURE_POLICY = (\n  'microphone *; camera *; midi *; geolocation *; encrypted-media *, clipboard-write *'\n);\n\nexport const testIDs = StrictDict({\n  contentIFrame: 'content-iframe-test-id',\n  modalIFrame: 'modal-iframe-test-id',\n});\n\nconst ContentIFrame = ({\n  iframeUrl,\n  shouldShowContent,\n  loadingMessage,\n  id,\n  elementId,\n  onLoaded,\n  title,\n}) => {\n  const {\n    handleIFrameLoad,\n    hasLoaded,\n    iframeHeight,\n    showError,\n  } = hooks.useIFrameBehavior({\n    elementId,\n    id,\n    iframeUrl,\n    onLoaded,\n  });\n\n  const {\n    modalOptions,\n    handleModalClose,\n  } = hooks.useModalIFrameData();\n\n  const contentIFrameProps = {\n    id: elementId,\n    src: iframeUrl,\n    allow: IFRAME_FEATURE_POLICY,\n    allowFullScreen: true,\n    height: iframeHeight,\n    scrolling: 'no',\n    referrerPolicy: 'origin',\n    onLoad: handleIFrameLoad,\n  };\n\n  return (\n    <>\n      {(shouldShowContent && !hasLoaded) && (\n        showError ? <ErrorPage /> : <PageLoading srMessage={loadingMessage} />\n      )}\n      {shouldShowContent && (\n        <div className=\"unit-iframe-wrapper\">\n          <iframe title={title} {...contentIFrameProps} data-testid={testIDs.contentIFrame} />\n        </div>\n      )}\n      {modalOptions.isOpen && (\n        <Modal\n          body={modalOptions.body\n            ? <div className=\"unit-modal\">{ modalOptions.body }</div>\n            : (\n              <iframe\n                title={modalOptions.title}\n                allow={IFRAME_FEATURE_POLICY}\n                frameBorder=\"0\"\n                src={modalOptions.url}\n                style={{ width: '100%', height: modalOptions.height }}\n              />\n            )}\n          dialogClassName=\"modal-lti\"\n          onClose={handleModalClose}\n          open\n        />\n      )}\n    </>\n  );\n};\n\nContentIFrame.propTypes = {\n  iframeUrl: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  shouldShowContent: PropTypes.bool.isRequired,\n  loadingMessage: PropTypes.node.isRequired,\n  elementId: PropTypes.string.isRequired,\n  onLoaded: PropTypes.func,\n  title: PropTypes.node.isRequired,\n};\n\nContentIFrame.defaultProps = {\n  iframeUrl: null,\n  onLoaded: () => ({}),\n};\n\nexport default ContentIFrame;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'learn.honorCode.name': {\n    id: 'learn.honorCode.name',\n    defaultMessage: 'Honor Code',\n    description: 'Honor code name.',\n  },\n  'learn.honorCode.cancel': {\n    id: 'learn.honorCode.cancel',\n    defaultMessage: 'Cancel',\n    description: '\"Cancel\" button.',\n  },\n  'learn.honorCode.agree': {\n    id: 'learn.honorCode.agree',\n    defaultMessage: 'I agree',\n    description: '\"I agree\" button.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { ActionRow, Alert, Button } from '@edx/paragon';\n\nimport { useNavigate } from 'react-router-dom';\nimport { useModel } from '../../../../generic/model-store';\nimport { saveIntegritySignature } from '../../../data';\nimport messages from './messages';\n\nconst HonorCode = ({ intl, courseId }) => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const {\n    isMasquerading,\n    username,\n  } = useModel('courseHomeMeta', courseId);\n  const authUser = getAuthenticatedUser();\n  const siteName = getConfig().SITE_NAME;\n  const honorCodeUrl = `${getConfig().TERMS_OF_SERVICE_URL}#honor-code`;\n\n  const handleCancel = () => navigate(`/course/${courseId}/home`);\n\n  const handleAgree = () => dispatch(\n    // If the request is made by a staff user masquerading as a specific learner,\n    // don't actually create a signature for them on the backend.\n    // Only the modal dialog will be dismissed.\n    // Otherwise, even for staff users, we want to record the signature.\n    saveIntegritySignature(\n      courseId,\n      isMasquerading && username !== authUser.username,\n    ),\n  );\n\n  return (\n    <Alert variant=\"light\" aria-live=\"off\">\n      <h4 aria-level=\"3\">\n        {siteName}{' '}\n        {intl.formatMessage(messages['learn.honorCode.name'])}\n      </h4>\n\n      <p>\n        <FormattedMessage\n          id=\"learn.honorCode.content\"\n          defaultMessage=\"Honesty and academic integrity are important to {siteName} and the institutions providing courses and programs on the {siteName} site. By clicking “I agree” below, I confirm that I have read, understand, and will abide by the {link} for the {siteName} Site.\"\n          values={{\n            siteName,\n            link: <a href={honorCodeUrl}>{intl.formatMessage(messages['learn.honorCode.name'])}</a>,\n          }}\n          description=\"This is shown to learner, when course author wants to learners to explicity agree on their (Term of use or conduct), hence it links honor code page. \"\n        />\n      </p>\n\n      <ActionRow>\n        <ActionRow.Spacer />\n        <Button variant=\"tertiary\" onClick={handleCancel}>\n          {intl.formatMessage(messages['learn.honorCode.cancel'])}\n        </Button>\n        <Button variant=\"primary\" onClick={handleAgree}>\n          {intl.formatMessage(messages['learn.honorCode.agree'])}\n        </Button>\n      </ActionRow>\n    </Alert>\n  );\n};\n\nHonorCode.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(HonorCode);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'learn.lockPaywall.title': {\n    id: 'learn.lockPaywall.title',\n    defaultMessage: 'Graded assignments are locked',\n    description: 'Heading for message shown to indicate that a piece of content is unavailable to audit track users.',\n  },\n  'learn.lockPaywall.content': {\n    id: 'learn.lockPaywall.content',\n    defaultMessage: 'Upgrade to gain access to locked features like this one and get the most out of your course.',\n    description: 'Message shown to indicate that a piece of content is unavailable to audit track users.',\n  },\n  'learn.lockPaywall.content.pastExpiration': {\n    id: 'learn.lockPaywall.content.pastExpiration',\n    defaultMessage: 'The upgrade deadline for this course passed. To upgrade, enroll in the next available session. ',\n    description: 'Message shown to indicate that a piece of content is unavailable to audit track users in a course where the expiration deadline has passed.',\n  },\n  'learn.lockPaywall.courseDetails': {\n    id: 'learn.lockPaywall.courseDetails',\n    defaultMessage: 'View Course Details',\n    description: 'Link to the course details page for this course with a past expiration date.',\n  },\n  'learn.lockPaywall.example.alt': {\n    id: 'learn.lockPaywall.example.alt',\n    defaultMessage: 'Example Certificate',\n    description: 'Alternate text displayed when the example certificate image cannot be displayed.',\n  },\n  'learn.lockPaywall.list.intro': {\n    id: 'learn.lockPaywall.list.intro',\n    defaultMessage: 'When you upgrade, you:',\n    description: 'Text displayed to introduce the list of benefits from upgrading.',\n  },\n});\n\nexport default messages;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Alert, Hyperlink, breakpoints, useWindowSize,\n} from '@edx/paragon';\nimport { Locked } from '@edx/paragon/icons';\nimport SidebarContext from '../../sidebar/SidebarContext';\nimport messages from './messages';\nimport certificateLocked from '../../../../generic/assets/edX_locked_certificate.png';\nimport { useModel } from '../../../../generic/model-store';\nimport { UpgradeButton } from '../../../../generic/upgrade-button';\nimport {\n  VerifiedCertBullet,\n  UnlockGradedBullet,\n  FullAccessBullet,\n  SupportMissionBullet,\n} from '../../../../generic/upsell-bullets/UpsellBullets';\n\nconst LockPaywall = ({\n  intl,\n  courseId,\n}) => {\n  const { notificationTrayVisible } = useContext(SidebarContext);\n  const course = useModel('coursewareMeta', courseId);\n  const {\n    accessExpiration,\n    marketingUrl,\n    offer,\n  } = course;\n\n  const {\n    org, verifiedMode,\n  } = useModel('courseHomeMeta', courseId);\n\n  // the following variables are set and used for resposive layout to work with\n  // whether the NotificationTray is open or not and if there's an offer with longer text\n  const shouldDisplayBulletPointsBelowCertificate = useWindowSize().width <= breakpoints.large.minWidth;\n  const shouldDisplayGatedContentOneColumn = useWindowSize().width <= breakpoints.extraLarge.minWidth\n    && notificationTrayVisible;\n  const shouldDisplayGatedContentTwoColumns = useWindowSize().width < breakpoints.large.minWidth\n    && notificationTrayVisible;\n  const shouldDisplayGatedContentTwoColumnsHalf = useWindowSize().width <= breakpoints.large.minWidth\n    && !notificationTrayVisible;\n  const shouldWrapTextOnButton = useWindowSize().width > breakpoints.extraSmall.minWidth;\n\n  const accessExpirationDate = accessExpiration ? new Date(accessExpiration.expirationDate) : null;\n  const pastExpirationDeadline = accessExpiration ? new Date(Date.now()) > accessExpirationDate : false;\n\n  if (!verifiedMode) {\n    return null;\n  }\n\n  const eventProperties = {\n    org_key: org,\n    courserun_key: courseId,\n  };\n\n  const logClick = () => {\n    sendTrackEvent('edx.bi.ecommerce.upsell_links_clicked', {\n      ...eventProperties,\n      linkCategory: '(none)',\n      linkName: 'in_course_upgrade',\n      linkType: 'link',\n      pageName: 'in_course',\n    });\n  };\n\n  const logClickPastExpiration = () => {\n    sendTrackEvent('edx.bi.ecommerce.gated_content.past_expiration.link_clicked', {\n      ...eventProperties,\n      linkCategory: 'gated_content',\n      linkName: 'course_details',\n      linkType: 'link',\n      pageName: 'in_course',\n    });\n  };\n\n  return (\n    <Alert variant=\"light\" aria-live=\"off\" icon={Locked} className=\"lock-paywall-container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <h4 aria-level=\"3\">\n            <span>{intl.formatMessage(messages['learn.lockPaywall.title'])}</span>\n          </h4>\n          {pastExpirationDeadline ? (\n            <div className=\"mb-2 upgrade-intro\">\n              {intl.formatMessage(messages['learn.lockPaywall.content.pastExpiration'])}\n              <Hyperlink destination={marketingUrl} onClick={logClickPastExpiration} target=\"_blank\">{intl.formatMessage(messages['learn.lockPaywall.courseDetails'])}</Hyperlink>\n            </div>\n          ) : (\n            <div className=\"mb-2 upgrade-intro\">\n              {intl.formatMessage(messages['learn.lockPaywall.content'])}\n            </div>\n          )}\n\n          <div className={classNames('d-inline-flex flex-row', { 'flex-wrap': notificationTrayVisible || shouldDisplayBulletPointsBelowCertificate })}>\n            <div style={{ float: 'left' }} className=\"mr-3 mb-2\">\n              <img\n                alt={intl.formatMessage(messages['learn.lockPaywall.example.alt'])}\n                src={certificateLocked}\n                className=\"border-0 certificate-image-banner\"\n                style={{ height: '128px', width: '175px' }}\n              />\n            </div>\n\n            <div className=\"mw-xs list-div\">\n              <div className=\"mb-2\">\n                {intl.formatMessage(messages['learn.lockPaywall.list.intro'])}\n              </div>\n              <ul className=\"fa-ul ml-4 pl-2\">\n                <VerifiedCertBullet />\n                <UnlockGradedBullet />\n                <FullAccessBullet />\n                <SupportMissionBullet />\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {pastExpirationDeadline\n          ? null\n          : (\n            <div\n              className={\n                classNames('d-md-flex align-items-md-center text-right', {\n                  'col-md-5 mx-md-0': notificationTrayVisible, 'col-md-4 mx-md-3 justify-content-center': !notificationTrayVisible && !shouldDisplayGatedContentTwoColumnsHalf, 'col-md-11 justify-content-end': shouldDisplayGatedContentOneColumn && !shouldDisplayGatedContentTwoColumns, 'col-md-6 justify-content-center': shouldDisplayGatedContentTwoColumnsHalf,\n                })\n              }\n            >\n              <UpgradeButton\n                offer={offer}\n                onClick={logClick}\n                verifiedMode={verifiedMode}\n                style={{ whiteSpace: shouldWrapTextOnButton ? 'nowrap' : null }}\n              />\n            </div>\n          )}\n      </div>\n    </Alert>\n  );\n};\nLockPaywall.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\nexport default injectIntl(LockPaywall);\n","import React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { useModel } from '../../../../generic/model-store';\nimport PageLoading from '../../../../generic/PageLoading';\n\nimport messages from '../messages';\nimport HonorCode from '../honor-code';\nimport LockPaywall from '../lock-paywall';\nimport * as hooks from './hooks';\nimport { modelKeys } from './constants';\n\nconst UnitSuspense = ({\n  courseId,\n  id,\n}) => {\n  const { formatMessage } = useIntl();\n  const shouldDisplayHonorCode = hooks.useShouldDisplayHonorCode({ courseId, id });\n  const unit = useModel(modelKeys.units, id);\n  const meta = useModel(modelKeys.coursewareMeta, courseId);\n  const shouldDisplayContentGating = (\n    meta.contentTypeGatingEnabled && unit.containsContentTypeGatedContent\n  );\n\n  const suspenseComponent = (message, Component) => (\n    <Suspense fallback={<PageLoading srMessage={formatMessage(message)} />}>\n      <Component courseId={courseId} />\n    </Suspense>\n  );\n\n  return (\n    <>\n      {shouldDisplayContentGating && (\n        suspenseComponent(messages.loadingLockedContent, LockPaywall)\n      )}\n      {shouldDisplayHonorCode && (\n        suspenseComponent(messages.loadingHonorCode, HonorCode)\n      )}\n    </>\n  );\n};\n\nUnitSuspense.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default UnitSuspense;\n","import { getConfig } from '@edx/frontend-platform';\nimport { stringify } from 'query-string';\n\nexport const iframeParams = {\n  show_title: 0,\n  show_bookmark: 0,\n  recheck_access: 1,\n};\n\nexport const getIFrameUrl = ({\n  id,\n  view,\n  format,\n  examAccess,\n}) => {\n  const xblockUrl = `${getConfig().LMS_BASE_URL}/xblock/${id}`;\n  const params = stringify({\n    ...iframeParams,\n    view,\n    ...(format && { format }),\n    ...(!examAccess.blockAccess && { exam_access: examAccess.accessToken }),\n  });\n  return `${xblockUrl}?${params}`;\n};\n\nexport default {\n  getIFrameUrl,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { AppContext } from '@edx/frontend-platform/react';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { useModel } from '../../../../generic/model-store';\n\nimport BookmarkButton from '../../bookmark/BookmarkButton';\nimport messages from '../messages';\nimport ContentIFrame from './ContentIFrame';\nimport UnitSuspense from './UnitSuspense';\nimport { modelKeys, views } from './constants';\nimport { useExamAccess, useShouldDisplayHonorCode } from './hooks';\nimport { getIFrameUrl } from './urls';\n\nconst Unit = ({\n  courseId,\n  format,\n  onLoaded,\n  id,\n}) => {\n  const { formatMessage } = useIntl();\n  const { authenticatedUser } = React.useContext(AppContext);\n  const examAccess = useExamAccess({ id });\n  const shouldDisplayHonorCode = useShouldDisplayHonorCode({ courseId, id });\n  const unit = useModel(modelKeys.units, id);\n  const isProcessing = unit.bookmarkedUpdateState === 'loading';\n  const view = authenticatedUser ? views.student : views.public;\n\n  const iframeUrl = getIFrameUrl({\n    id,\n    view,\n    format,\n    examAccess,\n  });\n\n  return (\n    <div className=\"unit\">\n      <h1 className=\"mb-0 h3\">{unit.title}</h1>\n      <h2 className=\"sr-only\">{formatMessage(messages.headerPlaceholder)}</h2>\n      <BookmarkButton\n        unitId={unit.id}\n        isBookmarked={unit.bookmarked}\n        isProcessing={isProcessing}\n      />\n      <UnitSuspense {...{ courseId, id }} />\n      <ContentIFrame\n        elementId=\"unit-iframe\"\n        id={id}\n        iframeUrl={iframeUrl}\n        loadingMessage={formatMessage(messages.loadingSequence)}\n        onLoaded={onLoaded}\n        shouldShowContent={!shouldDisplayHonorCode && !examAccess.blockAccess}\n        title={unit.title}\n      />\n    </div>\n  );\n};\n\nUnit.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  format: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  onLoaded: PropTypes.func,\n};\n\nUnit.defaultProps = {\n  format: null,\n  onLoaded: undefined,\n};\n\nexport default Unit;\n","import React, { Suspense, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PageLoading from '../../../generic/PageLoading';\nimport { useModel } from '../../../generic/model-store';\n\nimport messages from './messages';\nimport Unit from './Unit';\n\nconst ContentLock = React.lazy(() => import('./content-lock'));\n\nconst SequenceContent = ({\n  gated,\n  intl,\n  courseId,\n  sequenceId,\n  unitId,\n  unitLoadedHandler,\n}) => {\n  const sequence = useModel('sequences', sequenceId);\n\n  // Go back to the top of the page whenever the unit or sequence changes.\n  useEffect(() => {\n    global.scrollTo(0, 0);\n  }, [sequenceId, unitId]);\n\n  if (gated) {\n    return (\n      <Suspense\n        fallback={(\n          <PageLoading\n            srMessage={intl.formatMessage(messages.loadingLockedContent)}\n          />\n        )}\n      >\n        <ContentLock\n          courseId={courseId}\n          sequenceTitle={sequence.title}\n          prereqSectionName={sequence.gatedContent.prereqSectionName}\n          prereqId={sequence.gatedContent.prereqId}\n        />\n      </Suspense>\n    );\n  }\n\n  const unit = useModel('units', unitId);\n  if (!unitId || !unit) {\n    return (\n      <div>\n        {intl.formatMessage(messages.noContent)}\n      </div>\n    );\n  }\n\n  return (\n    <Unit\n      courseId={courseId}\n      format={sequence.format}\n      key={unitId}\n      id={unitId}\n      onLoaded={unitLoadedHandler}\n    />\n  );\n};\n\nSequenceContent.propTypes = {\n  gated: PropTypes.bool.isRequired,\n  courseId: PropTypes.string.isRequired,\n  sequenceId: PropTypes.string.isRequired,\n  unitId: PropTypes.string,\n  unitLoadedHandler: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n};\n\nSequenceContent.defaultProps = {\n  unitId: null,\n};\n\nexport default injectIntl(SequenceContent);\n","/* eslint-disable no-use-before-define */\nimport React, {\n  useEffect, useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport {\n  sendTrackEvent,\n  sendTrackingLogEvent,\n} from '@edx/frontend-platform/analytics';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { useSelector } from 'react-redux';\nimport SequenceExamWrapper from '@edx/frontend-lib-special-exams';\nimport { breakpoints, useWindowSize } from '@edx/paragon';\n\nimport PageLoading from '../../../generic/PageLoading';\nimport { useModel } from '../../../generic/model-store';\nimport { useSequenceBannerTextAlert, useSequenceEntranceExamAlert } from '../../../alerts/sequence-alerts/hooks';\n\nimport CourseLicense from '../course-license';\nimport Sidebar from '../sidebar/Sidebar';\nimport SidebarTriggers from '../sidebar/SidebarTriggers';\nimport messages from './messages';\nimport HiddenAfterDue from './hidden-after-due';\nimport { SequenceNavigation, UnitNavigation } from './sequence-navigation';\nimport SequenceContent from './SequenceContent';\n\nconst Sequence = ({\n  unitId,\n  sequenceId,\n  courseId,\n  unitNavigationHandler,\n  nextSequenceHandler,\n  previousSequenceHandler,\n  intl,\n}) => {\n  const course = useModel('coursewareMeta', courseId);\n  const {\n    isStaff,\n    originalUserIsStaff,\n  } = useModel('courseHomeMeta', courseId);\n  const sequence = useModel('sequences', sequenceId);\n  const unit = useModel('units', unitId);\n  const sequenceStatus = useSelector(state => state.courseware.sequenceStatus);\n  const sequenceMightBeUnit = useSelector(state => state.courseware.sequenceMightBeUnit);\n  const shouldDisplayNotificationTriggerInSequence = useWindowSize().width < breakpoints.small.minWidth;\n\n  const handleNext = () => {\n    const nextIndex = sequence.unitIds.indexOf(unitId) + 1;\n    if (nextIndex < sequence.unitIds.length) {\n      const newUnitId = sequence.unitIds[nextIndex];\n      handleNavigate(newUnitId);\n    } else {\n      nextSequenceHandler();\n    }\n  };\n\n  const handlePrevious = () => {\n    const previousIndex = sequence.unitIds.indexOf(unitId) - 1;\n    if (previousIndex >= 0) {\n      const newUnitId = sequence.unitIds[previousIndex];\n      handleNavigate(newUnitId);\n    } else {\n      previousSequenceHandler();\n    }\n  };\n\n  const handleNavigate = (destinationUnitId) => {\n    unitNavigationHandler(destinationUnitId);\n  };\n\n  const logEvent = (eventName, widgetPlacement, targetUnitId) => {\n    // Note: tabs are tracked with a 1-indexed position\n    // as opposed to a 0-index used throughout this MFE\n    const currentIndex = sequence.unitIds.length > 0 ? sequence.unitIds.indexOf(unitId) : 0;\n    const payload = {\n      current_tab: currentIndex + 1,\n      id: unitId,\n      tab_count: sequence.unitIds.length,\n      widget_placement: widgetPlacement,\n    };\n    if (targetUnitId) {\n      const targetIndex = sequence.unitIds.indexOf(targetUnitId);\n      payload.target_tab = targetIndex + 1;\n    }\n    sendTrackEvent(eventName, payload);\n    sendTrackingLogEvent(eventName, payload);\n  };\n\n  useSequenceBannerTextAlert(sequenceId);\n  useSequenceEntranceExamAlert(courseId, sequenceId, intl);\n\n  useEffect(() => {\n    function receiveMessage(event) {\n      const { type } = event.data;\n      if (type === 'entranceExam.passed') {\n        // I know this seems (is) intense. It is implemented this way since we need to refetch the underlying\n        // course blocks that were originally hidden because the Entrance Exam was not passed.\n        global.location.reload();\n      }\n    }\n    global.addEventListener('message', receiveMessage);\n  }, []);\n\n  const [unitHasLoaded, setUnitHasLoaded] = useState(false);\n  const handleUnitLoaded = () => {\n    setUnitHasLoaded(true);\n  };\n\n  // We want hide the unit navigation if we're in the middle of navigating to another unit\n  // but not if other things about the unit change, like the bookmark status.\n  // The array property of this useEffect ensures that we only hide the unit navigation\n  // while navigating to another unit.\n  useEffect(() => {\n    if (unit) {\n      setUnitHasLoaded(false);\n    }\n  }, [(unit || {}).id]);\n\n  // If sequence might be a unit, we want to keep showing a spinner - the courseware container will redirect us when\n  // it knows which sequence to actually go to.\n  const loading = sequenceStatus === 'loading' || (sequenceStatus === 'failed' && sequenceMightBeUnit);\n  if (loading) {\n    if (!sequenceId) {\n      return (<div> {intl.formatMessage(messages.noContent)} </div>);\n    }\n    return (\n      <PageLoading\n        srMessage={intl.formatMessage(messages.loadingSequence)}\n      />\n    );\n  }\n\n  if (sequenceStatus === 'loaded' && sequence.isHiddenAfterDue) {\n    // Shouldn't even be here - these sequences are normally stripped out of the navigation.\n    // But we are here, so render a notice instead of the normal content.\n    return <HiddenAfterDue courseId={courseId} />;\n  }\n\n  const gated = sequence && sequence.gatedContent !== undefined && sequence.gatedContent.gated;\n\n  const defaultContent = (\n    <div className=\"sequence-container d-inline-flex flex-row\">\n      <div className={classNames('sequence w-100', { 'position-relative': shouldDisplayNotificationTriggerInSequence })}>\n        <SequenceNavigation\n          sequenceId={sequenceId}\n          unitId={unitId}\n          className=\"mb-4\"\n          nextHandler={() => {\n            logEvent('edx.ui.lms.sequence.next_selected', 'top');\n            handleNext();\n          }}\n          onNavigate={(destinationUnitId) => {\n            logEvent('edx.ui.lms.sequence.tab_selected', 'top', destinationUnitId);\n            handleNavigate(destinationUnitId);\n          }}\n          previousHandler={() => {\n            logEvent('edx.ui.lms.sequence.previous_selected', 'top');\n            handlePrevious();\n          }}\n        />\n        {shouldDisplayNotificationTriggerInSequence && <SidebarTriggers />}\n\n        <div className=\"unit-container flex-grow-1\">\n          <SequenceContent\n            courseId={courseId}\n            gated={gated}\n            sequenceId={sequenceId}\n            unitId={unitId}\n            unitLoadedHandler={handleUnitLoaded}\n          />\n          {unitHasLoaded && (\n          <UnitNavigation\n            sequenceId={sequenceId}\n            unitId={unitId}\n            onClickPrevious={() => {\n              logEvent('edx.ui.lms.sequence.previous_selected', 'bottom');\n              handlePrevious();\n            }}\n            onClickNext={() => {\n              logEvent('edx.ui.lms.sequence.next_selected', 'bottom');\n              handleNext();\n            }}\n          />\n          )}\n        </div>\n      </div>\n      <Sidebar />\n    </div>\n  );\n\n  if (sequenceStatus === 'loaded') {\n    return (\n      <div>\n        <SequenceExamWrapper\n          sequence={sequence}\n          courseId={courseId}\n          isStaff={isStaff}\n          originalUserIsStaff={originalUserIsStaff}\n          canAccessProctoredExams={course.canAccessProctoredExams}\n        >\n          {defaultContent}\n        </SequenceExamWrapper>\n        <CourseLicense license={course.license || undefined} />\n      </div>\n    );\n  }\n\n  // sequence status 'failed' and any other unexpected sequence status.\n  return (\n    <p className=\"text-center py-5 mx-auto\" style={{ maxWidth: '30em' }}>\n      {intl.formatMessage(messages.loadFailure)}\n    </p>\n  );\n};\n\nSequence.propTypes = {\n  unitId: PropTypes.string,\n  sequenceId: PropTypes.string,\n  courseId: PropTypes.string.isRequired,\n  unitNavigationHandler: PropTypes.func.isRequired,\n  nextSequenceHandler: PropTypes.func.isRequired,\n  previousSequenceHandler: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n};\n\nSequence.defaultProps = {\n  sequenceId: null,\n  unitId: null,\n};\n\nexport default injectIntl(Sequence);\n","import { useSelector } from 'react-redux';\n\nimport { useModel } from '../../generic/model-store';\nimport { ALERT_TYPES, useAlert } from '../../generic/user-messages';\n\nimport messages from './messages';\n\nfunction useSequenceBannerTextAlert(sequenceId) {\n  const sequence = useModel('sequences', sequenceId);\n  const sequenceStatus = useSelector(state => state.courseware.sequenceStatus);\n\n  // Show Alert that comes along with the sequence\n  useAlert(sequenceStatus === 'loaded' && sequence.bannerText, {\n    code: null,\n    dismissible: false,\n    text: sequence.bannerText,\n    type: ALERT_TYPES.INFO,\n    topic: 'sequence',\n  });\n}\n\nfunction useSequenceEntranceExamAlert(courseId, sequenceId, intl) {\n  const course = useModel('coursewareMeta', courseId);\n  const sequence = useModel('sequences', sequenceId);\n  const sequenceStatus = useSelector(state => state.courseware.sequenceStatus);\n  const {\n    entranceExamCurrentScore,\n    entranceExamEnabled,\n    entranceExamId,\n    entranceExamMinimumScorePct,\n    entranceExamPassed,\n  } = course.entranceExamData || {};\n  const entranceExamAlertVisible = sequenceStatus === 'loaded' && entranceExamEnabled && entranceExamId === sequence.sectionId;\n  let entranceExamText;\n\n  if (entranceExamPassed) {\n    entranceExamText = intl.formatMessage(\n      messages.entranceExamTextPassed,\n      { entranceExamCurrentScore: entranceExamCurrentScore * 100 },\n    );\n  } else {\n    entranceExamText = intl.formatMessage(messages.entranceExamTextNotPassing, {\n      entranceExamCurrentScore: entranceExamCurrentScore * 100,\n      entranceExamMinimumScorePct: entranceExamMinimumScorePct * 100,\n    });\n  }\n\n  useAlert(entranceExamAlertVisible, {\n    code: null,\n    dismissible: false,\n    text: entranceExamText,\n    type: ALERT_TYPES.INFO,\n    topic: 'sequence',\n  });\n}\n\nexport { useSequenceBannerTextAlert, useSequenceEntranceExamAlert };\n","export default __webpack_public_path__ + \"5d807cf236c139fbbba42662e57fd7d7.gif\";","export default __webpack_public_path__ + \"3e27683222187b61655f1e0b82e12596.gif\";","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  completed: {\n    id: 'learning.celebration.completed',\n    defaultMessage: 'You just completed the first section of your course.',\n    description: 'Shown only once to leaner when they complete their first section',\n  },\n  congrats: {\n    id: 'learning.celebration.congrats',\n    defaultMessage: 'Congratulations!',\n    description: 'Greeting for learners when they complete their weekly goal or finish the first section',\n  },\n  earned: {\n    id: 'learning.celebration.earned',\n    defaultMessage: 'You earned it!',\n    description: 'Shown below congrats messaging when leaner complete a goal',\n  },\n  emailSubject: {\n    id: 'learning.celebration.emailSubject',\n    defaultMessage: \"I'm on my way to completing {title} online with {platform}!\",\n    description: 'Subject when sharing course progress via email',\n  },\n  forward: {\n    id: 'learning.celebration.forward',\n    defaultMessage: 'Keep going',\n    description: 'Button to close celebration dialog and get back to course',\n  },\n  goalMet: {\n    id: 'learning.celebration.goalMet',\n    defaultMessage: 'You met your goal!',\n    description: 'Headline for (weekly gaol celebration) section in courseware',\n  },\n  keepItUp: {\n    id: 'learning.celebration.keepItUp',\n    defaultMessage: 'Keep it up',\n    description: 'Button to close celebration dialog and get back to course',\n  },\n  share: {\n    id: 'learning.celebration.share',\n    defaultMessage: 'Take a moment to celebrate and share your progress.',\n    description: 'Text that precedes the (sharing icon) for goal accomplishment ',\n  },\n  socialMessage: {\n    id: 'learning.celebration.social',\n    defaultMessage: 'I’m on my way to completing {title} online with {platform}. What are you spending your time learning?',\n    description: 'Shown when sharing course progress on a social network',\n  },\n});\n\nexport default messages;\n","/* eslint-disable import/prefer-default-export */\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\n// Does not block on answer\nexport function postCelebrationComplete(courseId, data) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/courseware/celebration/${courseId}`);\n  getAuthenticatedHttpClient().post(url.href, data);\n}\n","import { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\n\nimport { postCelebrationComplete } from './data/api';\nimport { clearLocalStorage, getLocalStorage, setLocalStorage } from '../../../data/localStorage';\nimport { updateModel } from '../../../generic/model-store';\n\nconst CELEBRATION_LOCAL_STORAGE_KEY = 'CelebrationModal.showOnSectionLoad';\n\n// Records clicks through the end of a section, so that we can know whether we should celebrate when we finish loading\nfunction handleNextSectionCelebration(sequenceId, nextSequenceId) {\n  setLocalStorage(CELEBRATION_LOCAL_STORAGE_KEY, {\n    prevSequenceId: sequenceId,\n    nextSequenceId,\n  });\n}\n\nfunction recordFirstSectionCelebration(org, courseId, celebrations, dispatch) {\n  // Tell the LMS\n  postCelebrationComplete(courseId, { first_section: false });\n  // Update our local copy of course data from LMS\n  dispatch(updateModel({\n    modelType: 'courseHomeMeta',\n    model: {\n      id: courseId,\n      celebrations: {\n        ...celebrations,\n        firstSection: false,\n      },\n    },\n  }));\n\n  // Tell our analytics\n  const { administrator } = getAuthenticatedUser();\n  sendTrackEvent('edx.ui.lms.celebration.first_section.opened', {\n    org_key: org,\n    courserun_key: courseId,\n    course_id: courseId, // should only be courserun_key, but left as-is for historical reasons\n    is_staff: administrator,\n  });\n}\n\nfunction recordWeeklyGoalCelebration(org, courseId) {\n  // Tell the LMS\n  postCelebrationComplete(courseId, { weekly_goal: false });\n\n  // Tell our analytics\n  const { administrator } = getAuthenticatedUser();\n  sendTrackEvent('edx.ui.lms.celebration.weekly_goal.opened', {\n    org_key: org,\n    courserun_key: courseId,\n    is_staff: administrator,\n  });\n}\n\n// Looks at local storage to see whether we just came from the end of a section.\n// Note! This does have side effects (will clear some local storage and may start an api call).\nfunction shouldCelebrateOnSectionLoad(courseId, sequenceId, celebrateFirstSection, dispatch, celebrations) {\n  const celebrationIds = getLocalStorage(CELEBRATION_LOCAL_STORAGE_KEY);\n  if (!celebrationIds) {\n    return false;\n  }\n\n  const {\n    prevSequenceId,\n    nextSequenceId,\n  } = celebrationIds;\n  const onTargetSequence = sequenceId === nextSequenceId;\n  let shouldCelebrate = onTargetSequence && celebrateFirstSection;\n\n  if (shouldCelebrate && celebrations.streakLengthToCelebrate) {\n    // We don't want two modals to show up on the same page.\n    // If we are going to celebrate a streak then we will not also celebrate the first section.\n    // We will still mark the first section as celebrated, so that we don't incorrectly celebrate the second section.\n    shouldCelebrate = false;\n    postCelebrationComplete(courseId, { first_section: false });\n  }\n\n  if (sequenceId !== prevSequenceId && !onTargetSequence) {\n    // Don't clear until we move off of current/prev sequence\n    clearLocalStorage(CELEBRATION_LOCAL_STORAGE_KEY);\n\n    // Update our local copy of course data from LMS\n    dispatch(updateModel({\n      modelType: 'courseHomeMeta',\n      model: {\n        id: courseId,\n        celebrations: {\n          ...celebrations,\n          firstSection: false,\n        },\n      },\n    }));\n  }\n\n  return shouldCelebrate;\n}\n\nexport {\n  handleNextSectionCelebration,\n  recordFirstSectionCelebration,\n  recordWeeklyGoalCelebration,\n  shouldCelebrateOnSectionLoad,\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow,\n  breakpoints,\n  Button,\n  StandardModal,\n  useWindowSize,\n} from '@edx/paragon';\n\nimport { useDispatch } from 'react-redux';\nimport ClapsMobile from './assets/claps_280x201.gif';\nimport ClapsTablet from './assets/claps_456x328.gif';\nimport messages from './messages';\nimport SocialIcons from '../../social-share/SocialIcons';\nimport { recordFirstSectionCelebration } from './utils';\nimport { useModel } from '../../../generic/model-store';\n\nconst CelebrationModal = ({\n  courseId, intl, isOpen, onClose, ...rest\n}) => {\n  const { org, celebrations } = useModel('courseHomeMeta', courseId);\n  const dispatch = useDispatch();\n  const wideScreen = useWindowSize().width >= breakpoints.small.minWidth;\n\n  useEffect(() => {\n    if (isOpen) {\n      recordFirstSectionCelebration(org, courseId, celebrations, dispatch);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen]);\n\n  return (\n    <StandardModal\n      footerNode={(\n        <ActionRow isStacked className=\"pb-2\">\n          <Button onClick={onClose}>{intl.formatMessage(messages.forward)}</Button>\n        </ActionRow>\n      )}\n      hasCloseButton={false}\n      isOpen={isOpen}\n      onClose={onClose}\n      title={(\n        <p className=\"h2 text-center mr-n5 pt-4\">{intl.formatMessage(messages.congrats)}</p>\n      )}\n      {...rest}\n    >\n      <>\n        <p className=\"text-center\">{intl.formatMessage(messages.completed)}</p>\n        {!wideScreen && <img src={ClapsMobile} alt=\"\" className=\"img-fluid\" />}\n        {wideScreen && <img src={ClapsTablet} alt=\"\" className=\"img-fluid w-100\" />}\n        <p className=\"mt-3 text-center\">\n          <strong>{intl.formatMessage(messages.earned)}</strong> {intl.formatMessage(messages.share)}\n        </p>\n        <SocialIcons\n          analyticsId=\"edx.ui.lms.celebration.social_share.clicked\"\n          courseId={courseId}\n          emailSubject={messages.emailSubject}\n          socialMessage={messages.socialMessage}\n        />\n      </>\n    </StandardModal>\n  );\n};\n\nCelebrationModal.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(CelebrationModal);\n","var _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgTarget = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 139,\n  height: 160,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M76.031 156.25V3.888a2.48 2.48 0 0 0-2.26-2.527 2.39 2.39 0 0 0-2.519 2.388V156.25a2.387 2.387 0 0 0 2.39 2.388 2.389 2.389 0 0 0 2.389-2.388Z\"\n})), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M73.642 159.561a3.312 3.312 0 0 1-3.312-3.311V3.75A3.3 3.3 0 0 1 73.817.438a3.386 3.386 0 0 1 3.137 3.448V156.25a3.31 3.31 0 0 1-3.312 3.311Zm0-157.278a1.448 1.448 0 0 0-1.467 1.466V156.25a1.467 1.467 0 0 0 2.934 0V3.887a1.558 1.558 0 0 0-1.384-1.604h-.083ZM29.399 156.97c8.303-26.124 15.775-48.873 23.192-70.82a2.47 2.47 0 0 0-1.227-3.07 2.391 2.391 0 0 0-3.257 1.41c-7.444 22.003-14.916 44.834-23.265 71.004a2.39 2.39 0 0 0 2.279 3.117 2.389 2.389 0 0 0 2.278-1.641Z\"\n})), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M27.12 159.56a3.304 3.304 0 0 1-3.272-2.785 3.308 3.308 0 0 1 .117-1.539c8.377-26.318 15.775-48.873 23.266-71.004a3.329 3.329 0 0 1 4.52-1.955 3.422 3.422 0 0 1 1.716 4.205c-7.472 22.131-14.843 44.594-23.192 70.801a3.284 3.284 0 0 1-3.155 2.277Zm23.247-75.77a1.458 1.458 0 0 0-1.383.995c-7.491 22.131-14.88 44.705-23.266 71.004a1.466 1.466 0 0 0 .222 1.318 1.425 1.425 0 0 0 1.18.6 1.496 1.496 0 0 0 1.402-1.024c8.303-26.225 15.683-48.734 23.202-70.837a1.465 1.465 0 0 0-1.357-2.066v.01ZM120.164 158.639a2.404 2.404 0 0 0 1.927-.983 2.394 2.394 0 0 0 .351-2.134 3844.215 3844.215 0 0 0-23.237-70.948 2.443 2.443 0 0 0-2.602-1.688 2.39 2.39 0 0 0-1.956 3.136c7.427 21.974 14.899 44.778 23.229 70.948a2.407 2.407 0 0 0 2.288 1.669Z\"\n})), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M120.164 159.56a3.303 3.303 0 0 1-3.164-2.315c-8.367-26.271-15.747-48.808-23.229-70.93a3.264 3.264 0 0 1 .323-2.766 3.302 3.302 0 0 1 2.39-1.54 3.36 3.36 0 0 1 3.597 2.306c7.472 22.131 14.861 44.667 23.238 71.003a3.308 3.308 0 0 1-1.656 3.957 3.31 3.31 0 0 1-1.499.359v-.074ZM96.908 83.79h-.176a1.476 1.476 0 0 0-1.217 1.926c7.49 22.131 14.87 44.677 23.247 71.004a1.48 1.48 0 0 0 1.402 1.023 1.465 1.465 0 0 0 1.393-1.918c-8.367-26.28-15.747-48.826-23.229-70.93a1.55 1.55 0 0 0-1.42-1.106Z\"\n})), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#03C7E8\",\n  d: \"M73.642 138.628c35.236 0 63.8-28.552 63.8-63.774 0-35.221-28.564-63.774-63.8-63.774s-63.8 28.553-63.8 63.774c0 35.222 28.564 63.774 63.8 63.774Z\"\n})), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M73.642 139.559a64.747 64.747 0 0 1-35.966-10.9 64.713 64.713 0 0 1-23.845-29.037 64.68 64.68 0 0 1 14.026-70.519 64.757 64.757 0 0 1 70.545-14.03 64.732 64.732 0 0 1 29.053 23.831 64.689 64.689 0 0 1 10.91 35.95 64.77 64.77 0 0 1-18.978 45.729 64.82 64.82 0 0 1-45.745 18.976Zm0-127.557A62.905 62.905 0 0 0 38.7 22.592a62.867 62.867 0 0 0-23.165 28.21 62.838 62.838 0 0 0 13.63 68.511 62.912 62.912 0 0 0 68.538 13.625 62.88 62.88 0 0 0 28.222-23.157 62.852 62.852 0 0 0 10.595-34.927 62.917 62.917 0 0 0-18.438-44.422 62.966 62.966 0 0 0-44.44-18.43Z\"\n})), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M73.642 127.701c29.198 0 52.868-23.661 52.868-52.847 0-29.187-23.67-52.847-52.868-52.847s-52.869 23.66-52.869 52.847c0 29.186 23.67 52.847 52.869 52.847Z\"\n})), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M73.642 128.623a53.8 53.8 0 0 1-29.885-9.062 53.77 53.77 0 0 1-19.811-24.13 53.748 53.748 0 0 1 11.66-58.597 53.813 53.813 0 0 1 58.62-11.656 53.79 53.79 0 0 1 24.142 19.804 53.758 53.758 0 0 1 9.065 29.872 53.815 53.815 0 0 1-15.771 38.004 53.858 53.858 0 0 1-38.02 15.765Zm0-105.684a51.96 51.96 0 0 0-28.86 8.751 51.93 51.93 0 0 0-19.133 23.305 51.905 51.905 0 0 0 11.265 56.588 51.965 51.965 0 0 0 56.613 11.25 51.942 51.942 0 0 0 23.311-19.129 51.904 51.904 0 0 0 8.75-28.85 51.97 51.97 0 0 0-15.234-36.694 52.011 52.011 0 0 0-36.712-15.221Z\"\n})), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#03C7E8\",\n  d: \"M73.642 114.091c21.678 0 39.252-17.567 39.252-39.236 0-21.67-17.574-39.237-39.252-39.237S34.39 53.185 34.39 74.854c0 21.67 17.574 39.237 39.252 39.237Z\"\n})), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M73.642 115.041a40.2 40.2 0 0 1-22.336-6.746 40.175 40.175 0 0 1-14.82-18.014 40.153 40.153 0 0 1 8.672-43.788 40.189 40.189 0 0 1 43.792-8.74 40.176 40.176 0 0 1 24.83 37.101 40.206 40.206 0 0 1-11.76 28.385 40.243 40.243 0 0 1-28.378 11.802Zm0-78.482a38.35 38.35 0 0 0-21.316 6.438 38.31 38.31 0 0 0-5.847 58.977 38.343 38.343 0 0 0 19.637 10.495 38.343 38.343 0 0 0 39.368-16.31 38.32 38.32 0 0 0 6.451-21.305 38.354 38.354 0 0 0-11.227-27.065A38.384 38.384 0 0 0 73.642 36.54v.019Z\"\n})), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M73.642 101.688c14.826 0 26.845-12.014 26.845-26.834S88.468 48.02 73.642 48.02c-14.826 0-26.845 12.014-26.845 26.834s12.02 26.834 26.845 26.834Z\"\n})), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M73.642 102.611a27.783 27.783 0 0 1-15.43-4.674 27.758 27.758 0 0 1-11.814-28.492 27.753 27.753 0 0 1 7.597-14.214 27.772 27.772 0 0 1 42.724 4.202 27.748 27.748 0 0 1 4.681 15.422 27.781 27.781 0 0 1-8.138 19.615 27.802 27.802 0 0 1-19.62 8.141Zm0-53.659a25.93 25.93 0 0 0-14.405 4.363 25.902 25.902 0 0 0-3.934 39.87 25.925 25.925 0 0 0 28.254 5.616 25.92 25.92 0 0 0 11.633-9.547 25.903 25.903 0 0 0 4.365-14.4 25.934 25.934 0 0 0-7.6-18.304 25.955 25.955 0 0 0-18.313-7.598Z\"\n})), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#03C7E8\",\n  d: \"M73.642 89.719c8.213 0 14.87-6.656 14.87-14.865 0-8.21-6.657-14.865-14.87-14.865s-14.87 6.655-14.87 14.865 6.657 14.865 14.87 14.865Z\"\n})), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M73.642 90.64a15.797 15.797 0 0 1-14.591-9.745 15.781 15.781 0 0 1 3.423-17.204 15.796 15.796 0 0 1 26.961 11.163 15.801 15.801 0 0 1-4.631 11.158 15.815 15.815 0 0 1-11.162 4.629Zm0-29.728a13.952 13.952 0 0 0-12.887 8.607 13.937 13.937 0 0 0 3.024 15.194 13.95 13.95 0 0 0 23.811-9.859 13.958 13.958 0 0 0-4.09-9.853 13.97 13.97 0 0 0-9.858-4.09Z\"\n})), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#D23228\",\n  d: \"m16.087 29.394-14.53 6.528 21.117 16.266 15.202-5.938-21.789-16.856Z\"\n})), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M22.674 53.11a.988.988 0 0 1-.572-.184L.995 36.659a.923.923 0 0 1 .185-1.567l14.529-6.529a.922.922 0 0 1 .922.11l21.79 16.857a.923.923 0 0 1-.23 1.596l-15.204 5.938a1.045 1.045 0 0 1-.313.046ZM3.3 36.124l19.483 15.022 13.202-5.155-19.991-15.528L3.3 36.124Z\"\n})), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#D23228\",\n  d: \"m15.773 28.48 5.083-13.306 18.727 17.889-1.706 13.186L15.773 28.48Z\"\n})), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M37.877 47.172a.923.923 0 0 1-.582-.203L15.155 29.2a.922.922 0 0 1-.286-1.051l5.083-13.297a.923.923 0 0 1 .664-.572.923.923 0 0 1 .914.25l18.736 17.888a.922.922 0 0 1 .276.784L38.827 46.39a.923.923 0 0 1-.572.737.923.923 0 0 1-.379.046Zm-20.96-18.995 20.295 16.33 1.44-11.065-17.399-16.598-4.336 11.332Z\"\n})), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#F0CC00\",\n  d: \"M73.882 77.234a2.15 2.15 0 0 1-1.329-.47L6.862 24.58a2.15 2.15 0 1 1 2.675-3.356L75.22 73.425a2.148 2.148 0 0 1-1.337 3.827v-.018Z\"\n})), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#2D494E\",\n  d: \"M73.882 78.155a3.045 3.045 0 0 1-1.9-.673L6.29 25.299a3.07 3.07 0 0 1-.443-4.316 3.082 3.082 0 0 1 4.308-.498l65.692 52.211a3.07 3.07 0 0 1-1.92 5.468l-.045-.009ZM8.2 21.657a1.227 1.227 0 0 0-.757 2.185l65.682 52.201a1.254 1.254 0 0 0 1.716-.193 1.226 1.226 0 0 0-.194-1.725L8.965 21.905a1.265 1.265 0 0 0-.765-.23v-.018Z\"\n})));\nexport { SvgTarget as ReactComponent };\nexport default __webpack_public_path__ + \"576c66a8c6641bf4ae79601dcb8f6d07.svg\";","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow, Button, Icon, StandardModal,\n} from '@edx/paragon';\nimport { Lightbulb } from '@edx/paragon/icons';\n\nimport Target from './assets/target.svg';\nimport messages from './messages';\nimport { recordWeeklyGoalCelebration } from './utils';\nimport { useModel } from '../../../generic/model-store';\n\nconst WeeklyGoalCelebrationModal = ({\n  courseId, daysPerWeek, intl, isOpen, onClose, ...rest\n}) => {\n  const { org } = useModel('courseHomeMeta', courseId);\n\n  useEffect(() => {\n    if (isOpen) {\n      recordWeeklyGoalCelebration(org, courseId);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen]);\n\n  return (\n    <StandardModal\n      footerNode={(\n        <ActionRow isStacked className=\"pb-2\">\n          <Button onClick={onClose}>{intl.formatMessage(messages.keepItUp)}</Button>\n        </ActionRow>\n      )}\n      hasCloseButton={false}\n      isOpen={isOpen}\n      onClose={onClose}\n      title={(\n        <p className=\"h2 text-center mr-n5 pt-4\">{intl.formatMessage(messages.goalMet)}</p>\n      )}\n      {...rest}\n    >\n      <>\n        <div className=\"text-center px-3\">\n          <FormattedMessage\n            id=\"learning.celebration.goalCongrats\"\n            defaultMessage=\"Congratulations, you met your learning goal of {nTimes} a week.\"\n            description=\"Greeting for learners for their weekly goal, it as well indicate their gaol, i.e. (1,3 or 5 time(s) a week)\"\n            values={{\n              nTimes: (<strong>{daysPerWeek} {daysPerWeek === 1 ? 'time' : 'times'}</strong>),\n            }}\n          />\n        </div>\n        <div className=\"d-flex justify-content-center py-4.5\">\n          <img src={Target} alt=\"\" />\n        </div>\n        <div className=\"py-3 pl-3 bg-light-300 small d-inline-flex\">\n          <Icon\n            src={Lightbulb}\n            className=\"mr-2\"\n            style={{ height: '21px', width: '22px' }}\n          />\n          <div>\n            <FormattedMessage\n              id=\"learning.celebration.setGoal\"\n              defaultMessage=\"Setting a goal can help you {strongText} in your course.\"\n              description=\"It explain the advantages of setting goal\"\n              values={{\n                strongText: (<strong>achieve higher performance</strong>),\n              }}\n            />\n          </div>\n        </div>\n      </>\n    </StandardModal>\n  );\n};\n\nWeeklyGoalCelebrationModal.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  daysPerWeek: PropTypes.number.isRequired,\n  intl: intlShape.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(WeeklyGoalCelebrationModal);\n","import { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport { Xpert } from '@edx/frontend-lib-learning-assistant';\nimport { injectIntl } from '@edx/frontend-platform/i18n';\n\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\n\nconst Chat = ({\n  enabled,\n  enrollmentMode,\n  isStaff,\n  courseId,\n  contentToolsEnabled,\n}) => {\n  const VERIFIED_MODES = [\n    'professional',\n    'verified',\n    'no-id-professional',\n    'credit',\n    'masters',\n    'executive-education',\n    'paid-executive-education',\n    'paid-bootcamp',\n  ];\n\n  const AUDIT_MODES = [\n    'audit',\n    'honor',\n    'unpaid-executive-education',\n    'unpaid-bootcamp',\n  ];\n\n  const isEnrolled = (\n    enrollmentMode !== null\n    && enrollmentMode !== undefined\n    && [...VERIFIED_MODES, ...AUDIT_MODES].some(mode => mode === enrollmentMode)\n  );\n\n  const shouldDisplayChat = (\n    enabled\n    && (isEnrolled || isStaff) // display only to enrolled or staff\n  );\n\n  // TODO: Remove this Segment alert. This has been added purely to diagnose whether\n  //       usage issues are as a result of the Xpert toggle button not appearing.\n  if (shouldDisplayChat) {\n    sendTrackEvent('edx.ui.lms.learning_assistant.render', {\n      course_id: courseId,\n    });\n  }\n\n  return (\n    <>\n      {/* Use a portal to ensure that component overlay does not compete with learning MFE styles. */}\n      {shouldDisplayChat && (createPortal(\n        <Xpert courseId={courseId} contentToolsEnabled={contentToolsEnabled} />,\n        document.body,\n      ))}\n    </>\n  );\n};\n\nChat.propTypes = {\n  isStaff: PropTypes.bool.isRequired,\n  enabled: PropTypes.bool.isRequired,\n  enrollmentMode: PropTypes.string,\n  courseId: PropTypes.string.isRequired,\n  contentToolsEnabled: PropTypes.bool.isRequired,\n};\n\nChat.defaultProps = {\n  enrollmentMode: null,\n};\n\nexport default injectIntl(Chat);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'calculator.button.label': {\n    id: 'calculator.button.label',\n    defaultMessage: 'Calculator',\n    description: 'Button label to expand or close the calculator',\n  },\n  'calculator.input.field.label': {\n    id: 'calculator.input.field.label',\n    defaultMessage: 'Calculator Input',\n    description: 'label for calculator input',\n  },\n  'calculator.submit.button.label': {\n    id: 'calculator.submit.button.label',\n    defaultMessage: 'Calculate',\n    description: 'Submit button label to execute the calculator',\n  },\n  'calculator.result.field.label': {\n    id: 'calculator.result.field.label',\n    defaultMessage: 'Calculator Result',\n    description: 'label for calculator result',\n  },\n  'calculator.result.field.placeholder': {\n    id: 'calculator.result.field.placeholder',\n    defaultMessage: 'Result',\n    description: 'placeholder for calculator result',\n  },\n});\n\nexport default messages;\n","import React, { Component } from 'react';\nimport { Collapsible } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport {\n  FormattedMessage, injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faCalculator, faQuestionCircle, faTimesCircle, faEquals,\n} from '@fortawesome/free-solid-svg-icons';\nimport messages from './messages';\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      equation: '',\n      result: '',\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const urlEncoded = new URLSearchParams();\n    urlEncoded.append('equation', this.state.equation);\n\n    const response = await getAuthenticatedHttpClient().get(\n      `${getConfig().LMS_BASE_URL}/calculate?${urlEncoded.toString()}`,\n    );\n    this.setState(() => ({ result: response.data.result }));\n  }\n\n  changeEquation(value) {\n    this.setState(() => ({ equation: value }));\n  }\n\n  render() {\n    return (\n      <Collapsible.Advanced className=\"calculator\">\n        <div className=\"text-right\">\n          <Collapsible.Trigger tag=\"a\" className=\"trigger btn\">\n            <Collapsible.Visible whenOpen>\n              <FontAwesomeIcon icon={faTimesCircle} aria-hidden=\"true\" className=\"mr-2\" />\n            </Collapsible.Visible>\n            <Collapsible.Visible whenClosed>\n              <FontAwesomeIcon icon={faCalculator} aria-hidden=\"true\" className=\"mr-2\" />\n            </Collapsible.Visible>\n            {this.props.intl.formatMessage(messages['calculator.button.label'])}\n          </Collapsible.Trigger>\n        </div>\n        <Collapsible.Body className=\"calculator-content pt-4\">\n          <form onSubmit={this.handleSubmit} className=\"container-xl form-inline flex-nowrap\">\n            <input\n              type=\"text\"\n              placeholder={this.props.intl.formatMessage(messages['calculator.input.field.label'])}\n              aria-label={this.props.intl.formatMessage(messages['calculator.input.field.label'])}\n              className=\"form-control w-100\"\n              onChange={(event) => this.changeEquation(event.target.value)}\n            />\n            <button\n              className=\"btn btn-primary mx-3\"\n              aria-label={this.props.intl.formatMessage(messages['calculator.submit.button.label'])}\n              type=\"submit\"\n            >\n              <FontAwesomeIcon icon={faEquals} aria-hidden=\"true\" />\n            </button>\n            <input\n              type=\"text\"\n              tabIndex=\"-1\"\n              readOnly\n              aria-live=\"polite\"\n              placeholder={this.props.intl.formatMessage(messages['calculator.result.field.placeholder'])}\n              aria-label={this.props.intl.formatMessage(messages['calculator.result.field.label'])}\n              className=\"form-control w-50\"\n              value={this.state.result}\n            />\n          </form>\n\n          <Collapsible.Advanced>\n            <div className=\"container-xl\">\n              <Collapsible.Trigger className=\"btn btn-link btn-sm px-0 d-inline-flex align-items-center\">\n                <Collapsible.Visible whenOpen>\n                  <FontAwesomeIcon icon={faTimesCircle} aria-hidden=\"true\" className=\"mr-2\" />\n                </Collapsible.Visible>\n                <Collapsible.Visible whenClosed>\n                  <FontAwesomeIcon icon={faQuestionCircle} aria-hidden=\"true\" className=\"mr-2\" />\n                </Collapsible.Visible>\n                <FormattedMessage\n                  id=\"calculator.instructions.button.label\"\n                  defaultMessage=\"Calculator Instructions\"\n                />\n              </Collapsible.Trigger>\n            </div>\n            <Collapsible.Body className=\"container-xl pt-3\" style={{ maxHeight: '50vh', overflow: 'auto' }}>\n              <FormattedMessage\n                tagName=\"h6\"\n                id=\"calculator.instructions\"\n                defaultMessage=\"For detailed information, see the {expressions_link}.\"\n                description=\"Text that precedes the link which redirects to help page calculator\"\n                values={{\n                  expressions_link: (\n                    <a href={getConfig().SUPPORT_URL_CALCULATOR_MATH}>\n                      <FormattedMessage\n                        id=\"calculator.instructions.support.title\"\n                        defaultMessage=\"Help Center\"\n                        description=\"Anchor text for link which redirects to help page calculator\"\n                      />\n                    </a>\n                  ),\n                }}\n              />\n              <p>\n                <strong>\n                  <FormattedMessage\n                    id=\"calculator.instructions.useful.tips\"\n                    defaultMessage=\"Useful tips:\"\n                    description=\"Headline for the (list of tips) about using the calculator\"\n                  />\n                </strong>\n              </p>\n              <ul>\n                <li className=\"hint-item\" id=\"hint-paren\">\n                  <FormattedMessage\n                    id=\"calculator.hint1\"\n                    defaultMessage=\"Use parentheses () to make expressions clear. You can use parentheses inside other parentheses.\"\n                    description=\"The text indicate that the calculator supports parentheses\"\n                  />\n                </li>\n                <li className=\"hint-item\" id=\"hint-spaces\">\n                  <FormattedMessage\n                    id=\"calculator.hint2\"\n                    defaultMessage=\"Do not use spaces in expressions.\"\n                    description=\"It indicate that using a space might cause un expected behavior\"\n                  />\n                </li>\n                <li className=\"hint-item\" id=\"hint-howto-constants\">\n                  <FormattedMessage\n                    id=\"calculator.hint3\"\n                    defaultMessage=\"For constants, indicate multiplication explicitly (example: 5*c).\"\n                    description=\"It indicate the style of math notation\"\n                  />\n                </li>\n                <li className=\"hint-item\" id=\"hint-howto-maffixes\">\n                  <FormattedMessage\n                    id=\"calculator.hint4\"\n                    defaultMessage=\"For affixes, type the number and affix without a space (example: 5c).\"\n                  />\n                </li>\n                <li className=\"hint-item\" id=\"hint-howto-functions\">\n                  <FormattedMessage\n                    id=\"calculator.hint5\"\n                    defaultMessage=\"For functions, type the name of the function, then the expression in parentheses.\"\n                    description=\"It indicate how to use a math function, e.g. exp(4).\"\n                  />\n                </li>\n              </ul>\n              <table className=\"table small\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.heading\"\n                        defaultMessage=\"To Use\"\n                        description=\"Column header which indicate  calculator functionality\"\n                      />\n                    </th>\n                    <th scope=\"col\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.type.heading\"\n                        defaultMessage=\"Type\"\n                        description=\"Column header which indicate the supported type(s) of a the calculator functionality\"\n                      />\n                    </th>\n                    <th scope=\"col\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.examples.heading\"\n                        defaultMessage=\"Examples\"\n                        description=\"Column header which list examples of  calculator functionality\"\n                      />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <th scope=\"row\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.numbers\"\n                        defaultMessage=\"Numbers\"\n                        description=\"A calculator functionality\"\n                      />\n                    </th>\n                    <td>\n                      <ul className=\"list-unstyled m-0\">\n                        <li>\n                          <FormattedMessage\n                            id=\"calculator.instruction.table.to.use.numbers.type1\"\n                            defaultMessage=\"Integers\"\n                            description=\"Type of numbers that is supported the calculator\"\n                          />\n                        </li>\n                        <li>\n                          <FormattedMessage\n                            id=\"calculator.instruction.table.to.use.numbers.type2\"\n                            defaultMessage=\"Fractions\"\n                            description=\"Type of numbers that is supported by the calculator\"\n                          />\n                        </li>\n                        <li>\n                          <FormattedMessage\n                            id=\"calculator.instruction.table.to.use.numbers.type3\"\n                            defaultMessage=\"Decimals\"\n                            description=\"Type of numbers that is supported by the calculator\"\n                          />\n                        </li>\n                      </ul>\n                    </td>\n                    <td dir=\"auto\">\n                      <ul className=\"list-unstyled m-0\">\n                        <li>2520</li>\n                        <li>2/3</li>\n                        <li>3.14, .98</li>\n                      </ul>\n                    </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.operators\"\n                        defaultMessage=\"Operators\"\n                        description=\"A calculator functionality\"\n                      />\n                    </th>\n                    <td dir=\"auto\">\n                      <ul className=\"list-unstyled m-0\">\n                        <li>\n                          {' + - * / '}\n                          <FormattedMessage\n                            id=\"calculator.instruction.table.to.use.operators.type1\"\n                            defaultMessage=\"(add, subtract, multiply, divide)\"\n                            description=\"Type of opprators that are supported by the calculator\"\n                          />\n                        </li>\n                        <li>\n                          {'^ '}\n                          <FormattedMessage\n                            id=\"calculator.instruction.table.to.use.operators.type2\"\n                            defaultMessage=\"(raise to a power)\"\n                            description=\"It indicate that symbol (^) is being used to raise power, e.g. 2^2 = 4\"\n                          />\n                        </li>\n                        <li>\n                          {'|| '}\n                          <FormattedMessage\n                            id=\"calculator.instruction.table.to.use.operators.type3\"\n                            defaultMessage=\"(parallel resistors)\"\n                            description=\"It indicate that the sympol (||) is being used to calculate (parallel resistor), it is a concept in electrical/electronic engineering\"\n                          />\n                        </li>\n                      </ul>\n                    </td>\n                    <td dir=\"auto\">\n                      <ul className=\"list-unstyled m-0\">\n                        <li>x+(2*y)/x-1</li>\n                        <li>x^(n+1)</li>\n                        <li>v_IN+v_OUT</li>\n                        <li>1||2</li>\n                      </ul>\n                    </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.constants\"\n                        defaultMessage=\"Constants\"\n                        description=\"It indicate that the calculator support constants, e.g. the speed of light\"\n                      />\n                    </th>\n                    <td dir=\"auto\">e, pi</td>\n                    <td dir=\"auto\">\n                      <ul className=\"list-unstyled m-0\">\n                        <li>20*e</li>\n                        <li>418*pi</li>\n                      </ul>\n                    </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.affixes\"\n                        defaultMessage=\"Affixes\"\n                      />\n                    </th>\n                    <td dir=\"auto\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.affixes.type\"\n                        defaultMessage=\"Percent sign (%)\"\n                      />\n                    </td>\n                    <td dir=\"auto\">\n                      <ul className=\"list-unstyled m-0\">\n                        <li>20%</li>\n                      </ul>\n                    </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.basic.functions\"\n                        defaultMessage=\"Basic functions\"\n                        description=\"It indicate that calculator supports mathematical function\"\n                      />\n                    </th>\n                    <td dir=\"auto\">abs, exp, fact, factorial, ln, log2, log10, sqrt</td>\n                    <td dir=\"auto\">\n                      <ul className=\"list-unstyled m-0\">\n                        <li>abs(x+y)</li>\n                        <li>sqrt(x^2-y)</li>\n                      </ul>\n                    </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.trig.functions\"\n                        defaultMessage=\"Trigonometric functions\"\n                        description=\"Type of mathematical function that is supported by the calculator\"\n                      />\n                    </th>\n                    <td dir=\"auto\">\n                      <ul className=\"list-unstyled m-0\">\n                        <li>sin, cos, tan, sec, csc, cot</li>\n                        <li>arcsin, sinh, arcsinh</li>\n                      </ul>\n                    </td>\n                    <td dir=\"auto\">\n                      <ul className=\"list-unstyled m-0\">\n                        <li>sin(4x+y)</li>\n                        <li>arccsch(4x+y)</li>\n                      </ul>\n                    </td>\n                    <td dir=\"auto\" />\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.scientific.notation\"\n                        defaultMessage=\"Scientific notation\"\n                        description=\"It indicate that calculator supports scientific notation\"\n                      />\n                    </th>\n                    <td dir=\"auto\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.scientific.notation.type1\"\n                        defaultMessage=\"{exponentSyntax} and the exponent\"\n                        description=\"Type of scientific notation that is  supported by the calculator\"\n                        values={{\n                          exponentSyntax: '10^',\n                        }}\n                      />\n                    </td>\n                    <td dir=\"auto\">10^-9</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.scientific.notation.type2\"\n                        defaultMessage=\"{notationSyntax} notation\"\n                        description=\"It indicate that calculator supports (e) to be used in notation\"\n                        values={{\n                          notationSyntax: 'e',\n                        }}\n                      />\n                    </th>\n                    <td dir=\"auto\">\n                      <FormattedMessage\n                        id=\"calculator.instruction.table.to.use.scientific.notation.type3\"\n                        defaultMessage=\"{notationSyntax} and the exponent\"\n                        description=\"An example for using (e) in notation\"\n                        values={{\n                          notationSyntax: '1e',\n                        }}\n                      />\n                    </td>\n                    <td dir=\"auto\">1e-9</td>\n                  </tr>\n                </tbody>\n              </table>\n            </Collapsible.Body>\n          </Collapsible.Advanced>\n        </Collapsible.Body>\n      </Collapsible.Advanced>\n    );\n  }\n}\n\nCalculator.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(Calculator);\n","import Calculator from './Calculator';\n\nexport default Calculator;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'notes.button.show': {\n    id: 'notes.button.show',\n    defaultMessage: 'Show Notes',\n    description: 'Message for toggling notes visibility',\n  },\n  'notes.button.hide': {\n    id: 'notes.button.hide',\n    defaultMessage: 'Hide Notes',\n    description: 'Message for toggling notes visibility',\n  },\n});\n\nexport default messages;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport {\n  injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport messages from './messages';\n\nfunction toggleNotes() {\n  const iframe = document.getElementById('unit-iframe');\n  iframe.contentWindow.postMessage('tools.toggleNotes', getConfig().LMS_BASE_URL);\n}\n\nclass NotesVisibility extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: props.course.notes.visible,\n    };\n    this.visibilityUrl = `${getConfig().LMS_BASE_URL}/courses/${props.course.id}/edxnotes/visibility/`;\n  }\n\n  handleClick = () => {\n    const data = { visibility: !this.state.visible };\n    getAuthenticatedHttpClient().put(\n      this.visibilityUrl,\n      data,\n    ).then(() => {\n      this.setState((state) => ({ visible: !state.visible }));\n      toggleNotes();\n    });\n  };\n\n  render() {\n    const message = this.state.visible ? 'notes.button.hide' : 'notes.button.show';\n    return (\n      <button\n        className={`trigger btn ${this.state.visible ? 'text-secondary' : 'text-success'}  mx-2 `}\n        role=\"switch\"\n        type=\"button\"\n        onClick={this.handleClick}\n        onKeyDown={this.handleClick}\n        tabIndex=\"-1\"\n        aria-checked={this.state.visible ? 'true' : 'false'}\n      >\n        <FontAwesomeIcon icon={faPencilAlt} aria-hidden=\"true\" className=\"mr-2\" />\n        {this.props.intl.formatMessage(messages[message])}\n      </button>\n    );\n  }\n}\n\nNotesVisibility.propTypes = {\n  intl: intlShape.isRequired,\n  course: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    notes: PropTypes.shape({\n      visible: PropTypes.bool,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default injectIntl(NotesVisibility);\n","import NotesVisibility from './NotesVisibility';\n\nexport default NotesVisibility;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport Calculator from './calculator';\nimport NotesVisibility from './notes-visibility';\n\nconst ContentTools = ({\n  course,\n}) => {\n  const {\n    sidebarIsOpen,\n  } = useSelector(state => state.learningAssistant);\n\n  return (\n    !sidebarIsOpen && (\n      <div className=\"content-tools\">\n        <div className=\"d-flex justify-content-end align-items-end m-0\">\n          {course.showCalculator && (\n            <Calculator />\n          )}\n          {course.notes.enabled && (\n            <NotesVisibility course={course} />\n          )}\n        </div>\n      </div>\n    )\n  );\n};\n\nContentTools.propTypes = {\n  course: PropTypes.shape({\n    notes: PropTypes.shape({\n      enabled: PropTypes.bool,\n    }),\n    showCalculator: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default ContentTools;\n","import ContentTools from './ContentTools';\n\nexport default ContentTools;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown } from '@edx/paragon';\n\nimport {\n  sendTrackingLogEvent,\n  sendTrackEvent,\n} from '@edx/frontend-platform/analytics';\nimport { useNavigate } from 'react-router-dom';\n\nconst JumpNavMenuItem = ({\n  title,\n  courseId,\n  currentSequence,\n  currentUnit,\n  sequences,\n  isDefault,\n  onClick,\n}) => {\n  const navigate = useNavigate();\n\n  function logEvent(targetUrl) {\n    const eventName = 'edx.ui.lms.jump_nav.selected';\n    const payload = {\n      target_name: title,\n      id: targetUrl,\n      current_id: courseId,\n      widget_placement: 'breadcrumb',\n    };\n    sendTrackEvent(eventName, payload);\n    sendTrackingLogEvent(eventName, payload);\n  }\n\n  function destinationUrl() {\n    if (isDefault) {\n      return `/course/${courseId}/${currentSequence}/${currentUnit}`;\n    }\n    return `/course/${courseId}/${sequences[0].id}`;\n  }\n  function handleClick(e) {\n    const url = destinationUrl();\n    logEvent(url);\n    navigate(url);\n    if (onClick) { onClick(e); }\n  }\n\n  return (\n    <Dropdown.Item\n      active={isDefault}\n      onClick={e => handleClick(e)}\n    >\n      {title}\n    </Dropdown.Item>\n  );\n};\n\nconst sequenceShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n});\n\nJumpNavMenuItem.defaultProps = {\n  onClick: null,\n};\n\nJumpNavMenuItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  sequences: PropTypes.arrayOf(sequenceShape).isRequired,\n  isDefault: PropTypes.bool.isRequired,\n  courseId: PropTypes.string.isRequired,\n  currentSequence: PropTypes.string.isRequired,\n  currentUnit: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n};\n\nexport default JumpNavMenuItem;\n","import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getConfig } from '@edx/frontend-platform';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\nimport { useSelector } from 'react-redux';\nimport { useToggle, ModalPopup, Menu } from '@edx/paragon';\nimport { Link } from 'react-router-dom';\nimport { useModel, useModels } from '../../generic/model-store';\nimport JumpNavMenuItem from './JumpNavMenuItem';\n\nconst CourseBreadcrumb = ({\n  content,\n  withSeparator,\n  courseId,\n  sequenceId,\n  unitId,\n  isStaff,\n}) => {\n  const defaultContent = content.filter(\n    (destination) => destination.default,\n  )[0] || { id: courseId, label: '', sequences: [] };\n\n  const showRegularLink = getConfig().ENABLE_JUMPNAV !== 'true' || content.length < 2 || !isStaff;\n  const [isOpen, open, close] = useToggle(false);\n  const [target, setTarget] = useState(null);\n  return (\n    <>\n      {withSeparator && (\n        <li className=\"col-auto p-0 mx-2 text-primary-500 text-truncate text-nowrap\" role=\"presentation\" aria-hidden>/</li>\n      )}\n\n      <li\n        style={{\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n          whiteSpace: 'nowrap',\n        }}\n        data-testid=\"breadcrumb-item\"\n      >\n        {showRegularLink ? (\n          <Link\n            className=\"text-primary-500\"\n            to={\n              defaultContent.sequences.length\n                ? `/course/${courseId}/${defaultContent.sequences[0].id}`\n                : `/course/${courseId}/${defaultContent.id}`\n            }\n          >\n            {defaultContent.label}\n          </Link>\n        ) : (\n          <>\n            {\n              // eslint-disable-next-line\n              <a className=\"text-primary-500\" onClick={open} ref={setTarget}>\n                {defaultContent.label}\n              </a>\n            }\n            <ModalPopup positionRef={target} isOpen={isOpen} onClose={close}>\n              <Menu>\n                {content.map((item) => (\n                  <JumpNavMenuItem\n                    isDefault={item.default}\n                    sequences={item.sequences}\n                    courseId={courseId}\n                    title={item.label}\n                    currentSequence={sequenceId}\n                    currentUnit={unitId}\n                    onClick={close}\n                  />\n                ))}\n              </Menu>\n            </ModalPopup>\n          </>\n        )}\n      </li>\n    </>\n  );\n};\nCourseBreadcrumb.propTypes = {\n  content: PropTypes.arrayOf(\n    PropTypes.shape({\n      default: PropTypes.bool,\n      id: PropTypes.string,\n      label: PropTypes.string,\n    }),\n  ).isRequired,\n  sequenceId: PropTypes.string,\n  unitId: PropTypes.string,\n  withSeparator: PropTypes.bool,\n  courseId: PropTypes.string,\n  isStaff: PropTypes.bool,\n};\n\nCourseBreadcrumb.defaultProps = {\n  withSeparator: false,\n  sequenceId: null,\n  unitId: null,\n  courseId: null,\n  isStaff: null,\n};\n\nconst CourseBreadcrumbs = ({\n  courseId,\n  sectionId,\n  sequenceId,\n  unitId,\n  isStaff,\n}) => {\n  const course = useModel('coursewareMeta', courseId);\n  const courseStatus = useSelector((state) => state.courseware.courseStatus);\n  const sequenceStatus = useSelector(\n    (state) => state.courseware.sequenceStatus,\n  );\n\n  const allSequencesInSections = Object.fromEntries(\n    useModels('sections', course.sectionIds).map((section) => [\n      section.id,\n      {\n        default: section.id === sectionId,\n        title: section.title,\n        sequences: useModels('sequences', section.sequenceIds),\n      },\n    ]),\n  );\n\n  const links = useMemo(() => {\n    const chapters = [];\n    const sequentials = [];\n    if (courseStatus === 'loaded' && sequenceStatus === 'loaded') {\n      Object.entries(allSequencesInSections).forEach(([id, section]) => {\n        chapters.push({\n          id,\n          label: section.title,\n          default: section.default,\n          sequences: section.sequences,\n        });\n        if (section.default) {\n          section.sequences.forEach((sequence) => {\n            sequentials.push({\n              id: sequence.id,\n              label: sequence.title,\n              default: sequence.id === sequenceId,\n              sequences: [sequence],\n            });\n          });\n        }\n      });\n    }\n    return [chapters, sequentials];\n  }, [courseStatus, sequenceStatus, allSequencesInSections]);\n\n  return (\n    <nav aria-label=\"breadcrumb\" className=\"my-4 d-inline-block col-sm-10\">\n      <ol className=\"list-unstyled d-flex flex-nowrap align-items-center m-0\">\n        <li className=\"list-unstyled col-auto m-0 p-0\">\n          <Link\n            className=\"flex-shrink-0 text-primary\"\n            to={`/course/${courseId}/home`}\n            replace\n          >\n            <FontAwesomeIcon icon={faHome} className=\"mr-2\" />\n            <FormattedMessage\n              id=\"learn.breadcrumb.navigation.course.home\"\n              description=\"The course home link in breadcrumbs nav\"\n              defaultMessage=\"Course\"\n            />\n          </Link>\n        </li>\n        {links.map((content) => (\n          <CourseBreadcrumb\n            courseId={courseId}\n            sequenceId={sequenceId}\n            content={content}\n            unitId={unitId}\n            withSeparator\n            isStaff={isStaff}\n          />\n        ))}\n      </ol>\n    </nav>\n  );\n};\n\nCourseBreadcrumbs.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  sectionId: PropTypes.string,\n  sequenceId: PropTypes.string,\n  unitId: PropTypes.string,\n  isStaff: PropTypes.bool,\n};\n\nCourseBreadcrumbs.defaultProps = {\n  sectionId: null,\n  sequenceId: null,\n  unitId: null,\n  isStaff: null,\n};\n\nexport default CourseBreadcrumbs;\n","import { breakpoints, useWindowSize } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport React, {\n  useEffect, useState, useMemo, useCallback,\n} from 'react';\n\nimport { getLocalStorage, setLocalStorage } from '../../../data/localStorage';\nimport SidebarContext from './SidebarContext';\nimport { SIDEBARS } from './sidebars';\n\nconst SidebarProvider = ({\n  courseId,\n  unitId,\n  children,\n}) => {\n  const shouldDisplayFullScreen = useWindowSize().width < breakpoints.large.minWidth;\n  const shouldDisplaySidebarOpen = useWindowSize().width > breakpoints.medium.minWidth;\n  const query = new URLSearchParams(window.location.search);\n  const initialSidebar = (shouldDisplaySidebarOpen || query.get('sidebar') === 'true') ? SIDEBARS.DISCUSSIONS.ID : null;\n  const [currentSidebar, setCurrentSidebar] = useState(initialSidebar);\n  const [notificationStatus, setNotificationStatus] = useState(getLocalStorage(`notificationStatus.${courseId}`));\n  const [upgradeNotificationCurrentState, setUpgradeNotificationCurrentState] = useState(getLocalStorage(`upgradeNotificationCurrentState.${courseId}`));\n\n  useEffect(() => {\n    setCurrentSidebar(SIDEBARS.DISCUSSIONS.ID);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [unitId]);\n\n  const onNotificationSeen = useCallback(() => {\n    setNotificationStatus('inactive');\n    setLocalStorage(`notificationStatus.${courseId}`, 'inactive');\n  }, [courseId]);\n\n  const toggleSidebar = useCallback((sidebarId) => {\n    // Switch to new sidebar or hide the current sidebar\n    setCurrentSidebar(sidebarId === currentSidebar ? null : sidebarId);\n  }, [currentSidebar]);\n\n  const contextValue = useMemo(() => ({\n    toggleSidebar,\n    onNotificationSeen,\n    setNotificationStatus,\n    currentSidebar,\n    notificationStatus,\n    upgradeNotificationCurrentState,\n    setUpgradeNotificationCurrentState,\n    shouldDisplaySidebarOpen,\n    shouldDisplayFullScreen,\n    courseId,\n    unitId,\n  }), [courseId, currentSidebar, notificationStatus, onNotificationSeen, shouldDisplayFullScreen,\n    shouldDisplaySidebarOpen, toggleSidebar, unitId, upgradeNotificationCurrentState]);\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      {children}\n    </SidebarContext.Provider>\n  );\n};\n\nSidebarProvider.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nSidebarProvider.defaultProps = {\n  children: null,\n};\n\nexport default SidebarProvider;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch } from 'react-redux';\nimport { getConfig } from '@edx/frontend-platform';\nimport { breakpoints, useWindowSize } from '@edx/paragon';\n\nimport { AlertList } from '../../generic/user-messages';\n\nimport Sequence from './sequence';\n\nimport { CelebrationModal, shouldCelebrateOnSectionLoad, WeeklyGoalCelebrationModal } from './celebration';\nimport Chat from './chat/Chat';\nimport ContentTools from './content-tools';\nimport CourseBreadcrumbs from './CourseBreadcrumbs';\nimport SidebarProvider from './sidebar/SidebarContextProvider';\nimport SidebarTriggers from './sidebar/SidebarTriggers';\n\nimport { useModel } from '../../generic/model-store';\nimport { getSessionStorage, setSessionStorage } from '../../data/sessionStorage';\n\nconst Course = ({\n  courseId,\n  sequenceId,\n  unitId,\n  nextSequenceHandler,\n  previousSequenceHandler,\n  unitNavigationHandler,\n  windowWidth,\n}) => {\n  const course = useModel('coursewareMeta', courseId);\n  const {\n    celebrations,\n    isStaff,\n  } = useModel('courseHomeMeta', courseId);\n  const sequence = useModel('sequences', sequenceId);\n  const section = useModel('sections', sequence ? sequence.sectionId : null);\n\n  const pageTitleBreadCrumbs = [\n    sequence,\n    section,\n    course,\n  ].filter(element => element != null).map(element => element.title);\n\n  // Below the tabs, above the breadcrumbs alerts (appearing in the order listed here)\n  const dispatch = useDispatch();\n\n  const [firstSectionCelebrationOpen, setFirstSectionCelebrationOpen] = useState(false);\n  // If streakLengthToCelebrate is populated, that modal takes precedence. Wait til the next load to display\n  // the weekly goal celebration modal.\n  const [weeklyGoalCelebrationOpen, setWeeklyGoalCelebrationOpen] = useState(\n    celebrations && !celebrations.streakLengthToCelebrate && celebrations.weeklyGoal,\n  );\n  const shouldDisplayTriggers = windowWidth >= breakpoints.small.minWidth;\n  const daysPerWeek = course?.courseGoals?.selectedGoal?.daysPerWeek;\n\n  // Responsive breakpoints for showing the notification button/tray\n  const shouldDisplayNotificationTrayOpenOnLoad = windowWidth > breakpoints.medium.minWidth;\n\n  // Course specific notification tray open/closed persistance by browser session\n  if (!getSessionStorage(`notificationTrayStatus.${courseId}`)) {\n    if (shouldDisplayNotificationTrayOpenOnLoad) {\n      setSessionStorage(`notificationTrayStatus.${courseId}`, 'open');\n    } else {\n      // responsive version displays the tray closed on initial load, set the sessionStorage to closed\n      setSessionStorage(`notificationTrayStatus.${courseId}`, 'closed');\n    }\n  }\n\n  useEffect(() => {\n    const celebrateFirstSection = celebrations && celebrations.firstSection;\n    setFirstSectionCelebrationOpen(shouldCelebrateOnSectionLoad(\n      courseId,\n      sequenceId,\n      celebrateFirstSection,\n      dispatch,\n      celebrations,\n    ));\n  }, [sequenceId]);\n\n  return (\n    <SidebarProvider courseId={courseId} unitId={unitId}>\n      <Helmet>\n        <title>{`${pageTitleBreadCrumbs.join(' | ')} | ${getConfig().SITE_NAME}`}</title>\n      </Helmet>\n      <div className=\"position-relative d-flex align-items-start\">\n        <CourseBreadcrumbs\n          courseId={courseId}\n          sectionId={section ? section.id : null}\n          sequenceId={sequenceId}\n          isStaff={isStaff}\n          unitId={unitId}\n        />\n        {shouldDisplayTriggers && (\n          <>\n            <Chat\n              enabled={course.learningAssistantEnabled}\n              enrollmentMode={course.enrollmentMode}\n              isStaff={isStaff}\n              courseId={courseId}\n              contentToolsEnabled={course.showCalculator || course.notes.enabled}\n            />\n            <SidebarTriggers />\n          </>\n        )}\n      </div>\n\n      <AlertList topic=\"sequence\" />\n      <Sequence\n        unitId={unitId}\n        sequenceId={sequenceId}\n        courseId={courseId}\n        unitNavigationHandler={unitNavigationHandler}\n        nextSequenceHandler={nextSequenceHandler}\n        previousSequenceHandler={previousSequenceHandler}\n      />\n      <CelebrationModal\n        courseId={courseId}\n        isOpen={firstSectionCelebrationOpen}\n        onClose={() => setFirstSectionCelebrationOpen(false)}\n      />\n      <WeeklyGoalCelebrationModal\n        courseId={courseId}\n        daysPerWeek={daysPerWeek}\n        isOpen={weeklyGoalCelebrationOpen}\n        onClose={() => setWeeklyGoalCelebrationOpen(false)}\n      />\n      <ContentTools course={course} />\n    </SidebarProvider>\n  );\n};\n\nCourse.propTypes = {\n  courseId: PropTypes.string,\n  sequenceId: PropTypes.string,\n  unitId: PropTypes.string,\n  nextSequenceHandler: PropTypes.func.isRequired,\n  previousSequenceHandler: PropTypes.func.isRequired,\n  unitNavigationHandler: PropTypes.func.isRequired,\n  windowWidth: PropTypes.number.isRequired,\n};\n\nCourse.defaultProps = {\n  courseId: null,\n  sequenceId: null,\n  unitId: null,\n};\n\nconst CourseWrapper = (props) => {\n  // useWindowSize initially returns an undefined width intentionally at first.\n  // See https://www.joshwcomeau.com/react/the-perils-of-rehydration/ for why.\n  // But <Course> has some tricky window-size-dependent, session-storage-setting logic and React would yell at us if\n  // we exited that component early, before hitting all the useState() calls.\n  // So just skip all that until we have a window size available.\n  const windowWidth = useWindowSize().width;\n  if (windowWidth === undefined) {\n    return null;\n  }\n\n  return <Course {...props} windowWidth={windowWidth} />;\n};\n\nexport default CourseWrapper;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { defaultMemoize as memoize } from 'reselect';\n\nimport {\n  checkBlockCompletion,\n  fetchCourse,\n  fetchSequence,\n  getResumeBlock,\n  getSequenceForUnitDeprecated,\n  saveSequencePosition,\n} from './data';\nimport { TabPage } from '../tab-page';\n\nimport Course from './course';\nimport { handleNextSectionCelebration } from './course/celebration';\nimport withParamsAndNavigation from './utils';\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkResumeRedirect = memoize((courseStatus, courseId, sequenceId, firstSequenceId, navigate) => {\n  if (courseStatus === 'loaded' && !sequenceId) {\n    // Note that getResumeBlock is just an API call, not a redux thunk.\n    getResumeBlock(courseId).then((data) => {\n      // This is a replace because we don't want this change saved in the browser's history.\n      if (data.sectionId && data.unitId) {\n        navigate(`/course/${courseId}/${data.sectionId}/${data.unitId}`, { replace: true });\n      } else if (firstSequenceId) {\n        navigate(`/course/${courseId}/${firstSequenceId}`, { replace: true });\n      }\n    });\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSectionUnitToUnitRedirect = memoize((courseStatus, courseId, sequenceStatus, section, unitId, navigate) => {\n  if (courseStatus === 'loaded' && sequenceStatus === 'failed' && section && unitId) {\n    navigate(`/course/${courseId}/${unitId}`, { replace: true });\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSectionToSequenceRedirect = memoize((courseStatus, courseId, sequenceStatus, section, unitId, navigate) => {\n  if (courseStatus === 'loaded' && sequenceStatus === 'failed' && section && !unitId) {\n    // If the section is non-empty, redirect to its first sequence.\n    if (section.sequenceIds && section.sequenceIds[0]) {\n      navigate(`/course/${courseId}/${section.sequenceIds[0]}`, { replace: true });\n    // Otherwise, just go to the course root, letting the resume redirect take care of things.\n    } else {\n      navigate(`/course/${courseId}`, { replace: true });\n    }\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkUnitToSequenceUnitRedirect = memoize(\n  (courseStatus, courseId, sequenceStatus, sequenceMightBeUnit, sequenceId, section, routeUnitId, navigate) => {\n    if (courseStatus === 'loaded' && sequenceStatus === 'failed' && !section && !routeUnitId) {\n      if (sequenceMightBeUnit) {\n        // If the sequence failed to load as a sequence, but it is marked as a possible unit, then\n        // we need to look up the correct parent sequence for it, and redirect there.\n        const unitId = sequenceId; // just for clarity during the rest of this method\n        getSequenceForUnitDeprecated(courseId, unitId).then(\n          parentId => {\n            if (parentId) {\n              navigate(`/course/${courseId}/${parentId}/${unitId}`, { replace: true });\n            } else {\n              navigate(`/course/${courseId}`, { replace: true });\n            }\n          },\n          () => { // error case\n            navigate(`/course/${courseId}`, { replace: true });\n          },\n        );\n      } else {\n        // Invalid sequence that isn't a unit either. Redirect up to main course.\n        navigate(`/course/${courseId}`, { replace: true });\n      }\n    }\n  },\n);\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSequenceToSequenceUnitRedirect = memoize((courseId, sequenceStatus, sequence, unitId, navigate) => {\n  if (sequenceStatus === 'loaded' && sequence.id && !unitId) {\n    if (sequence.unitIds !== undefined && sequence.unitIds.length > 0) {\n      const nextUnitId = sequence.unitIds[sequence.activeUnitIndex];\n      // This is a replace because we don't want this change saved in the browser's history.\n      navigate(`/course/${courseId}/${sequence.id}/${nextUnitId}`, { replace: true });\n    }\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSequenceUnitMarkerToSequenceUnitRedirect = memoize(\n  (courseId, sequenceStatus, sequence, unitId, navigate) => {\n    if (sequenceStatus !== 'loaded' || !sequence.id) {\n      return;\n    }\n\n    const hasUnits = sequence.unitIds?.length > 0;\n\n    if (unitId === 'first') {\n      if (hasUnits) {\n        const firstUnitId = sequence.unitIds[0];\n        navigate(`/course/${courseId}/${sequence.id}/${firstUnitId}`, { replace: true });\n      } else {\n      // No units... go to general sequence page\n        navigate(`/course/${courseId}/${sequence.id}`, { replace: true });\n      }\n    } else if (unitId === 'last') {\n      if (hasUnits) {\n        const lastUnitId = sequence.unitIds[sequence.unitIds.length - 1];\n        navigate(`/course/${courseId}/${sequence.id}/${lastUnitId}`, { replace: true });\n      } else {\n      // No units... go to general sequence page\n        navigate(`/course/${courseId}/${sequence.id}`, { replace: true });\n      }\n    }\n  },\n);\n\nclass CoursewareContainer extends Component {\n  checkSaveSequencePosition = memoize((unitId) => {\n    const {\n      courseId,\n      sequenceId,\n      sequenceStatus,\n      sequence,\n    } = this.props;\n    if (sequenceStatus === 'loaded' && sequence.saveUnitPosition && unitId) {\n      const activeUnitIndex = sequence.unitIds.indexOf(unitId);\n      this.props.saveSequencePosition(courseId, sequenceId, activeUnitIndex);\n    }\n  });\n\n  checkFetchCourse = memoize((courseId) => {\n    this.props.fetchCourse(courseId);\n  });\n\n  checkFetchSequence = memoize((sequenceId) => {\n    if (sequenceId) {\n      this.props.fetchSequence(sequenceId);\n    }\n  });\n\n  componentDidMount() {\n    const {\n      routeCourseId,\n      routeSequenceId,\n    } = this.props;\n    // Load data whenever the course or sequence ID changes.\n    this.checkFetchCourse(routeCourseId);\n    this.checkFetchSequence(routeSequenceId);\n  }\n\n  componentDidUpdate() {\n    const {\n      courseId,\n      sequenceId,\n      courseStatus,\n      sequenceStatus,\n      sequenceMightBeUnit,\n      sequence,\n      firstSequenceId,\n      sectionViaSequenceId,\n      routeCourseId,\n      routeSequenceId,\n      routeUnitId,\n      navigate,\n    } = this.props;\n\n    // Load data whenever the course or sequence ID changes.\n    this.checkFetchCourse(routeCourseId);\n    this.checkFetchSequence(routeSequenceId);\n\n    // Check if we should save our sequence position.  Only do this when the route unit ID changes.\n    this.checkSaveSequencePosition(routeUnitId);\n\n    // Coerce the route ids into null here because they can be undefined, but the redux ids would be null instead.\n    if (courseId !== (routeCourseId || null) || sequenceId !== (routeSequenceId || null)) {\n      // The non-route ids are pulled from redux state - they are changed at the same time as the status variables.\n      // But the route ids are pulled directly from the route. So if the route changes, and we start a fetch above,\n      // there's a race condition where the route ids are for one course, but the status and the other ids are for a\n      // different course. Since all the logic below depends on the status variables and the route unit id, we'll wait\n      // until the ids match and thus the redux states got updated. So just bail for now.\n      return;\n    }\n\n    // All courseware URLs should normalize to the format /course/:courseId/:sequenceId/:unitId\n    // via the series of redirection rules below.\n    // See docs/decisions/0008-liberal-courseware-path-handling.md for more context.\n    // (It would be ideal to move this logic into the thunks layer and perform\n    //  all URL-changing checks at once. See TNL-8182.)\n\n    // Check resume redirect:\n    //   /course/:courseId -> /course/:courseId/:sequenceId/:unitId\n    // based on sequence/unit where user was last active.\n    checkResumeRedirect(courseStatus, courseId, sequenceId, firstSequenceId, navigate);\n\n    // Check section-unit to unit redirect:\n    //    /course/:courseId/:sectionId/:unitId -> /course/:courseId/:unitId\n    // by simply ignoring the :sectionId.\n    // (It may be desirable at some point to be smarter here; for example, we could replace\n    //  :sectionId with the parent sequence of :unitId and/or check whether the :unitId\n    //  is actually within :sectionId. However, the way our Redux store is currently factored,\n    //  the unit's metadata is not available to us if the section isn't loadable.)\n    // Before performing this redirect, we *do* still check that a section is loadable;\n    // otherwise, we could get stuck in a redirect loop, since a sequence that failed to load\n    // would endlessly redirect to itself through `checkSectionUnitToUnitRedirect`\n    // and `checkUnitToSequenceUnitRedirect`.\n    checkSectionUnitToUnitRedirect(courseStatus, courseId, sequenceStatus, sectionViaSequenceId, routeUnitId, navigate);\n\n    // Check section to sequence redirect:\n    //    /course/:courseId/:sectionId         -> /course/:courseId/:sequenceId\n    // by redirecting to the first sequence within the section.\n    checkSectionToSequenceRedirect(courseStatus, courseId, sequenceStatus, sectionViaSequenceId, routeUnitId, navigate);\n\n    // Check unit to sequence-unit redirect:\n    //    /course/:courseId/:unitId -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID of the parent sequence of :unitId.\n    checkUnitToSequenceUnitRedirect((\n      courseStatus, courseId, sequenceStatus, sequenceMightBeUnit,\n      sequenceId, sectionViaSequenceId, routeUnitId, navigate\n    ));\n\n    // Check sequence to sequence-unit redirect:\n    //    /course/:courseId/:sequenceId -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID the most-recently-active unit in the sequence, OR\n    // the ID of the first unit the sequence if none is active.\n    checkSequenceToSequenceUnitRedirect(courseId, sequenceStatus, sequence, routeUnitId, navigate);\n\n    // Check sequence-unit marker to sequence-unit redirect:\n    //    /course/:courseId/:sequenceId/first -> /course/:courseId/:sequenceId/:unitId\n    //    /course/:courseId/:sequenceId/last -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID the first or last unit in the sequence.\n    // \"Sequence unit marker\" is an invented term used only in this component.\n    checkSequenceUnitMarkerToSequenceUnitRedirect(courseId, sequenceStatus, sequence, routeUnitId, navigate);\n  }\n\n  handleUnitNavigationClick = () => {\n    const {\n      courseId,\n      sequenceId,\n      routeUnitId,\n    } = this.props;\n\n    this.props.checkBlockCompletion(courseId, sequenceId, routeUnitId);\n  };\n\n  handleNextSequenceClick = () => {\n    const {\n      course,\n      nextSequence,\n      sequence,\n      sequenceId,\n    } = this.props;\n\n    if (nextSequence !== null) {\n      const celebrateFirstSection = course && course.celebrations && course.celebrations.firstSection;\n      if (celebrateFirstSection && sequence.sectionId !== nextSequence.sectionId) {\n        handleNextSectionCelebration(sequenceId, nextSequence.id);\n      }\n    }\n  };\n\n  handlePreviousSequenceClick = () => {};\n\n  render() {\n    const {\n      courseStatus,\n      courseId,\n      sequenceId,\n      routeUnitId,\n    } = this.props;\n\n    return (\n      <TabPage\n        activeTabSlug=\"courseware\"\n        courseId={courseId}\n        unitId={routeUnitId}\n        courseStatus={courseStatus}\n        metadataModel=\"coursewareMeta\"\n      >\n        <Course\n          courseId={courseId}\n          sequenceId={sequenceId}\n          unitId={routeUnitId}\n          nextSequenceHandler={this.handleNextSequenceClick}\n          previousSequenceHandler={this.handlePreviousSequenceClick}\n          unitNavigationHandler={this.handleUnitNavigationClick}\n        />\n      </TabPage>\n    );\n  }\n}\n\nconst sequenceShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  unitIds: PropTypes.arrayOf(PropTypes.string),\n  sectionId: PropTypes.string.isRequired,\n  saveUnitPosition: PropTypes.any, // eslint-disable-line\n});\n\nconst sectionShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  sequenceIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n});\n\nconst courseShape = PropTypes.shape({\n  celebrations: PropTypes.shape({\n    firstSection: PropTypes.bool,\n  }),\n});\n\nCoursewareContainer.propTypes = {\n  routeCourseId: PropTypes.string.isRequired,\n  routeSequenceId: PropTypes.string,\n  routeUnitId: PropTypes.string,\n  courseId: PropTypes.string,\n  sequenceId: PropTypes.string,\n  firstSequenceId: PropTypes.string,\n  courseStatus: PropTypes.oneOf(['loaded', 'loading', 'failed', 'denied']).isRequired,\n  sequenceStatus: PropTypes.oneOf(['loaded', 'loading', 'failed']).isRequired,\n  sequenceMightBeUnit: PropTypes.bool.isRequired,\n  nextSequence: sequenceShape,\n  previousSequence: sequenceShape,\n  sectionViaSequenceId: sectionShape,\n  course: courseShape,\n  sequence: sequenceShape,\n  saveSequencePosition: PropTypes.func.isRequired,\n  checkBlockCompletion: PropTypes.func.isRequired,\n  fetchCourse: PropTypes.func.isRequired,\n  fetchSequence: PropTypes.func.isRequired,\n  navigate: PropTypes.func.isRequired,\n};\n\nCoursewareContainer.defaultProps = {\n  courseId: null,\n  sequenceId: null,\n  routeSequenceId: null,\n  routeUnitId: null,\n  firstSequenceId: null,\n  nextSequence: null,\n  previousSequence: null,\n  sectionViaSequenceId: null,\n  course: null,\n  sequence: null,\n};\n\nconst currentCourseSelector = createSelector(\n  (state) => state.models.coursewareMeta || {},\n  (state) => state.courseware.courseId,\n  (coursesById, courseId) => (coursesById[courseId] ? coursesById[courseId] : null),\n);\n\nconst currentSequenceSelector = createSelector(\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequencesById, sequenceId) => (sequencesById[sequenceId] ? sequencesById[sequenceId] : null),\n);\n\nconst sequenceIdsSelector = createSelector(\n  (state) => state.courseware.courseStatus,\n  currentCourseSelector,\n  (state) => state.models.sections,\n  (courseStatus, course, sectionsById) => {\n    if (courseStatus !== 'loaded') {\n      return [];\n    }\n    const { sectionIds = [] } = course;\n    return sectionIds.flatMap(sectionId => sectionsById[sectionId].sequenceIds);\n  },\n);\n\nconst previousSequenceSelector = createSelector(\n  sequenceIdsSelector,\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequenceIds, sequencesById, sequenceId) => {\n    if (!sequenceId || sequenceIds.length === 0) {\n      return null;\n    }\n    const sequenceIndex = sequenceIds.indexOf(sequenceId);\n    const previousSequenceId = sequenceIndex > 0 ? sequenceIds[sequenceIndex - 1] : null;\n    return previousSequenceId !== null ? sequencesById[previousSequenceId] : null;\n  },\n);\n\nconst nextSequenceSelector = createSelector(\n  sequenceIdsSelector,\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequenceIds, sequencesById, sequenceId) => {\n    if (!sequenceId || sequenceIds.length === 0) {\n      return null;\n    }\n    const sequenceIndex = sequenceIds.indexOf(sequenceId);\n    const nextSequenceId = sequenceIndex < sequenceIds.length - 1 ? sequenceIds[sequenceIndex + 1] : null;\n    return nextSequenceId !== null ? sequencesById[nextSequenceId] : null;\n  },\n);\n\nconst firstSequenceIdSelector = createSelector(\n  (state) => state.courseware.courseStatus,\n  currentCourseSelector,\n  (state) => state.models.sections || {},\n  (courseStatus, course, sectionsById) => {\n    if (courseStatus !== 'loaded') {\n      return null;\n    }\n    const { sectionIds = [] } = course;\n\n    if (sectionIds.length === 0) {\n      return null;\n    }\n\n    return sectionsById[sectionIds[0]].sequenceIds[0];\n  },\n);\n\nconst sectionViaSequenceIdSelector = createSelector(\n  (state) => state.models.sections || {},\n  (state) => state.courseware.sequenceId,\n  (sectionsById, sequenceId) => (sectionsById[sequenceId] ? sectionsById[sequenceId] : null),\n);\n\nconst mapStateToProps = (state) => {\n  const {\n    courseId,\n    sequenceId,\n    courseStatus,\n    sequenceStatus,\n    sequenceMightBeUnit,\n  } = state.courseware;\n\n  return {\n    courseId,\n    sequenceId,\n    courseStatus,\n    sequenceStatus,\n    sequenceMightBeUnit,\n    course: currentCourseSelector(state),\n    sequence: currentSequenceSelector(state),\n    previousSequence: previousSequenceSelector(state),\n    nextSequence: nextSequenceSelector(state),\n    firstSequenceId: firstSequenceIdSelector(state),\n    sectionViaSequenceId: sectionViaSequenceIdSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps, {\n  checkBlockCompletion,\n  saveSequencePosition,\n  fetchCourse,\n  fetchSequence,\n})(withParamsAndNavigation(CoursewareContainer));\n","import React from 'react';\n\nimport { useNavigate, useParams } from 'react-router-dom';\n\nconst withParamsAndNavigation = WrappedComponent => {\n  const WithParamsNavigationComponent = props => {\n    const { courseId, sequenceId, unitId } = useParams();\n    const navigate = useNavigate();\n    return (\n      <WrappedComponent\n        routeCourseId={courseId}\n        routeSequenceId={sequenceId}\n        routeUnitId={unitId}\n        navigate={navigate}\n        {...props}\n      />\n    );\n  };\n  return WithParamsNavigationComponent;\n};\n\nexport default withParamsAndNavigation;\n","export const DECODE_ROUTES = {\n  ACCESS_DENIED: '/course/:courseId/access-denied',\n  HOME: '/course/:courseId/home',\n  LIVE: '/course/:courseId/live',\n  DATES: '/course/:courseId/dates',\n  DISCUSSION: '/course/:courseId/discussion/:path/*',\n  PROGRESS: [\n    '/course/:courseId/progress/:targetUserId/',\n    '/course/:courseId/progress',\n  ],\n  COURSE_END: '/course/:courseId/course-end',\n  COURSEWARE: [\n    '/course/:courseId/:sequenceId/:unitId',\n    '/course/:courseId/:sequenceId',\n    '/course/:courseId',\n  ],\n  REDIRECT_HOME: 'home/:courseId',\n  REDIRECT_SURVEY: 'survey/:courseId',\n};\n\nexport const ROUTES = {\n  UNSUBSCRIBE: '/goal-unsubscribe/:token',\n  REDIRECT: '/redirect/*',\n  DASHBOARD: 'dashboard',\n  CONSENT: 'consent',\n};\n\nexport const REDIRECT_MODES = {\n  DASHBOARD_REDIRECT: 'dashboard-redirect',\n  CONSENT_REDIRECT: 'consent-redirect',\n  HOME_REDIRECT: 'home-redirect',\n  SURVEY_REDIRECT: 'survey-redirect',\n};\n","import PropTypes from 'prop-types';\nimport { PageWrap } from '@edx/frontend-platform/react';\nimport React from 'react';\nimport {\n  generatePath, useMatch, Navigate,\n} from 'react-router-dom';\n\nimport { DECODE_ROUTES } from '../constants';\n\nconst ROUTES = [].concat(\n  ...Object.values(DECODE_ROUTES).map(value => (Array.isArray(value) ? value : [value])),\n);\n\nexport const decodeUrl = (encodedUrl) => {\n  const decodedUrl = decodeURIComponent(encodedUrl);\n  if (encodedUrl === decodedUrl) {\n    return encodedUrl;\n  }\n  return decodeUrl(decodedUrl);\n};\n\nconst DecodePageRoute = ({ children }) => {\n  let computedMatch = null;\n\n  ROUTES.forEach((route) => {\n    const matchedRoute = useMatch(route);\n    if (matchedRoute) { computedMatch = matchedRoute; }\n  });\n\n  if (computedMatch) {\n    const { pathname, pattern, params } = computedMatch;\n\n    Object.keys(params).forEach((param) => {\n      // only decode params not the entire url.\n      // it is just to be safe and less prone to errors\n      params[param] = decodeUrl(params[param]);\n    });\n\n    const newUrl = generatePath(pattern.path, params);\n\n    // if the url get decoded, reroute to the decoded url\n    if (newUrl !== pathname) {\n      return <Navigate to={newUrl} replace />;\n    }\n  }\n\n  return <PageWrap> {children} </PageWrap>;\n};\n\nDecodePageRoute.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default DecodePageRoute;\n","import PropTypes from 'prop-types';\nimport {\n  generatePath, useParams, useLocation,\n} from 'react-router-dom';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport queryString from 'query-string';\nimport { REDIRECT_MODES } from '../constants';\n\nconst RedirectPage = ({\n  pattern, mode,\n}) => {\n  const { courseId } = useParams();\n  const location = useLocation();\n  const { consentPath } = queryString.parse(location?.search);\n\n  const BASE_URL = getConfig().LMS_BASE_URL;\n\n  switch (mode) {\n    case REDIRECT_MODES.DASHBOARD_REDIRECT:\n      global.location.assign(`${BASE_URL}${pattern}${location?.search}`);\n      break;\n    case REDIRECT_MODES.CONSENT_REDIRECT:\n      global.location.assign(`${BASE_URL}${consentPath}`);\n      break;\n    case REDIRECT_MODES.HOME_REDIRECT:\n      global.location.assign(generatePath(pattern, { courseId }));\n      break;\n    default:\n      global.location.assign(`${BASE_URL}${generatePath(pattern, { courseId })}`);\n  }\n\n  return null;\n};\n\nRedirectPage.propTypes = {\n  pattern: PropTypes.string,\n  mode: PropTypes.string.isRequired,\n};\n\nRedirectPage.defaultProps = {\n  pattern: null,\n};\n\nexport default RedirectPage;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { PageWrap } from '@edx/frontend-platform/react';\n\nimport PageLoading from '../generic/PageLoading';\n\nimport DecodePageRoute from '../decode-page-route';\nimport { DECODE_ROUTES, REDIRECT_MODES, ROUTES } from '../constants';\nimport RedirectPage from './RedirectPage';\n\nconst CoursewareRedirectLandingPage = () => (\n  <div className=\"flex-grow-1\">\n    <PageLoading srMessage={(\n      <FormattedMessage\n        id=\"learn.redirect.interstitial.message\"\n        description=\"The screen-reader message when a page is about to redirect\"\n        defaultMessage=\"Redirecting...\"\n      />\n      )}\n    />\n\n    <Routes>\n      <Route\n        path={DECODE_ROUTES.REDIRECT_SURVEY}\n        element={<DecodePageRoute><RedirectPage pattern=\"/courses/:courseId/survey\" mode={REDIRECT_MODES.SURVEY_REDIRECT} /></DecodePageRoute>}\n      />\n      <Route\n        path={ROUTES.DASHBOARD}\n        element={<PageWrap><RedirectPage pattern=\"/dashboard\" mode={REDIRECT_MODES.DASHBOARD_REDIRECT} /></PageWrap>}\n      />\n      <Route\n        path={ROUTES.CONSENT}\n        element={<PageWrap><RedirectPage mode={REDIRECT_MODES.CONSENT_REDIRECT} /></PageWrap>}\n      />\n      <Route\n        path={DECODE_ROUTES.REDIRECT_HOME}\n        element={<DecodePageRoute><RedirectPage pattern=\"/course/:courseId/home\" mode={REDIRECT_MODES.HOME_REDIRECT} /></DecodePageRoute>}\n      />\n    </Routes>\n  </div>\n);\n\nexport default CoursewareRedirectLandingPage;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  completed: {\n    id: 'learning.dates.badge.completed',\n    defaultMessage: 'Completed',\n    description: 'shown as label for the assignments which learner has completed.',\n  },\n  dueNext: {\n    id: 'learning.dates.badge.dueNext',\n    defaultMessage: 'Due next',\n    description: 'Shown as label for the assignment which date is in the future',\n  },\n  pastDue: {\n    id: 'learning.dates.badge.pastDue',\n    defaultMessage: 'Past due',\n    description: 'Shown as label for the assignments which deadline has passed',\n  },\n  title: {\n    id: 'learning.dates.title',\n    defaultMessage: 'Important dates',\n    description: 'The title of dates tab (course timeline).',\n  },\n  today: {\n    id: 'learning.dates.badge.today',\n    defaultMessage: 'Today',\n    description: 'Label used when the scheduled date for the assignment matches the current day',\n  },\n  unreleased: {\n    id: 'learning.dates.badge.unreleased',\n    defaultMessage: 'Not yet released',\n    description: 'Shown as label for assignments which date is unknown yet',\n  },\n  verifiedOnly: {\n    id: 'learning.dates.badge.verifiedOnly',\n    defaultMessage: 'Verified only',\n    description: 'Shown as label for assignments which learner has no access to.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLock } from '@fortawesome/free-solid-svg-icons';\nimport { Badge } from '@edx/paragon';\n\nimport messages from '../messages';\nimport { daycmp, isLearnerAssignment } from '../utils';\n\nfunction hasAccess(item) {\n  return item.learnerHasAccess;\n}\n\nfunction isComplete(assignment) {\n  return assignment.complete;\n}\n\nfunction isPastDue(assignment) {\n  return !isComplete(assignment) && (new Date(assignment.date) < new Date());\n}\n\nfunction isUnreleased(assignment) {\n  return !assignment.link;\n}\n\n// Pass a null item if you want to get a whole day's badge list, not just one item's list.\n// Returns an object with 'color' and 'badges' properties.\nfunction getBadgeListAndColor(date, intl, item, items) {\n  const now = new Date();\n  const assignments = items.filter(isLearnerAssignment);\n  const isToday = daycmp(date, now) === 0;\n  const isInFuture = daycmp(date, now) > 0;\n\n  // This badge info list is in order of priority (they will appear left to right in this order and the first badge\n  // sets the color of the dot in the timeline).\n  const badgesInfo = [\n    {\n      message: messages.today,\n      shownForDay: isToday,\n      bg: 'bg-warning-300',\n      className: 'text-black',\n    },\n    {\n      message: messages.completed,\n      shownForDay: assignments.length && assignments.every(isComplete),\n      shownForItem: x => isLearnerAssignment(x) && isComplete(x),\n      bg: 'bg-light-500',\n      className: 'text-black',\n    },\n    {\n      message: messages.pastDue,\n      shownForDay: assignments.length && assignments.every(isPastDue),\n      shownForItem: x => isLearnerAssignment(x) && isPastDue(x),\n      bg: 'bg-dark-200',\n      className: 'text-white',\n    },\n    {\n      message: messages.dueNext,\n      shownForDay: !isToday && assignments.some(x => x.dueNext),\n      shownForItem: x => x.dueNext,\n      bg: 'bg-gray-500',\n      className: 'text-white',\n    },\n    {\n      message: messages.unreleased,\n      shownForDay: assignments.length && assignments.every(isUnreleased),\n      shownForItem: x => isLearnerAssignment(x) && isUnreleased(x),\n      className: 'border border-gray-500 text-gray-500',\n    },\n    {\n      message: messages.verifiedOnly,\n      shownForDay: items.length && items.every(x => !hasAccess(x)),\n      shownForItem: x => !hasAccess(x),\n      icon: faLock,\n      bg: 'bg-dark-700',\n      className: 'text-white',\n    },\n  ];\n  let color = null; // first color of any badge\n  const badges = (\n    <>\n      {badgesInfo.map(b => {\n        let shown = b.shownForDay;\n        if (item) {\n          if (b.shownForDay) {\n            shown = false; // don't double up, if the day already has this badge\n          } else {\n            shown = b.shownForItem && b.shownForItem(item);\n          }\n        }\n        if (!shown) {\n          return null;\n        }\n\n        if (!color && !isInFuture) {\n          color = b.bg;\n        }\n        return (\n          <Badge key={b.message.id} className={classNames('ml-2', b.bg, b.className)} data-testid=\"dates-badge\">\n            {b.icon && <FontAwesomeIcon icon={b.icon} className=\"mr-1\" />}\n            {intl.formatMessage(b.message)}\n          </Badge>\n        );\n      })}\n    </>\n  );\n  if (!color && isInFuture) {\n    color = 'bg-gray-900';\n  }\n\n  return {\n    color,\n    badges,\n  };\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport { getBadgeListAndColor };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport {\n  FormattedDate,\n  FormattedTime,\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { Tooltip, OverlayTrigger } from '@edx/paragon';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { useModel } from '../../../generic/model-store';\n\nimport { getBadgeListAndColor } from './badgelist';\nimport { isLearnerAssignment } from '../utils';\n\nconst Day = ({\n  date,\n  first,\n  intl,\n  items,\n  last,\n}) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n\n  const { color, badges } = getBadgeListAndColor(date, intl, null, items);\n\n  return (\n    <li className=\"dates-day pb-4\" data-testid=\"dates-day\">\n      {/* Top Line */}\n      {!first && <div className=\"dates-line-top border-1 border-left border-gray-900 bg-gray-900\" />}\n\n      {/* Dot */}\n      <div className={classNames(color, 'dates-dot border border-gray-900')} />\n\n      {/* Bottom Line */}\n      {!last && <div className=\"dates-line-bottom border-1 border-left border-gray-900 bg-gray-900\" />}\n\n      {/* Content */}\n      <div className=\"d-inline-block ml-3 pl-2\">\n        <div className=\"row w-100 m-0 mb-1 align-items-center text-primary-700\" data-testid=\"dates-header\">\n          <FormattedDate\n            value={date}\n            day=\"numeric\"\n            month=\"short\"\n            weekday=\"short\"\n            year=\"numeric\"\n            {...timezoneFormatArgs}\n          />\n          {badges}\n        </div>\n        {items.map((item) => {\n          const { badges: itemBadges } = getBadgeListAndColor(date, intl, item, items);\n\n          const showDueDateTime = item.dateType === 'assignment-due-date';\n          const showLink = item.link && isLearnerAssignment(item);\n          const title = showLink ? (<u><a href={item.link} className=\"text-reset\">{item.title}</a></u>) : item.title;\n          const available = item.learnerHasAccess && (item.link || !isLearnerAssignment(item));\n          const textColor = available ? 'text-primary-700' : 'text-gray-500';\n\n          return (\n            <div key={item.title + item.date} className={classNames(textColor, 'small pb-1')} data-testid=\"dates-item\">\n              <div>\n                <span className=\"small\">\n                  <span className=\"font-weight-bold\">{item.assignmentType && `${item.assignmentType}: `}{title}</span>\n                  {showDueDateTime && (\n                    <span>\n                      <span className=\"mx-1\">due</span>\n                      <FormattedTime\n                        value={date}\n                        timeZoneName=\"short\"\n                        {...timezoneFormatArgs}\n                      />\n                    </span>\n                  )}\n                </span>\n                {itemBadges}\n                {item.extraInfo && (\n                  <OverlayTrigger\n                    placement=\"bottom\"\n                    overlay={\n                      <Tooltip>{item.extraInfo}</Tooltip>\n                    }\n                  >\n                    <FontAwesomeIcon icon={faInfoCircle} className=\"fa-xs ml-1 text-gray-700\" data-testid=\"dates-extra-info\" />\n                  </OverlayTrigger>\n                )}\n              </div>\n              {item.description && <div className=\"small mb-2\">{item.description}</div>}\n            </div>\n          );\n        })}\n      </div>\n    </li>\n  );\n};\n\nDay.propTypes = {\n  date: PropTypes.objectOf(Date).isRequired,\n  first: PropTypes.bool,\n  intl: intlShape.isRequired,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string,\n    dateType: PropTypes.string,\n    description: PropTypes.string,\n    dueNext: PropTypes.bool,\n    learnerHasAccess: PropTypes.bool,\n    link: PropTypes.string,\n    title: PropTypes.string,\n  })).isRequired,\n  last: PropTypes.bool,\n};\n\nDay.defaultProps = {\n  first: false,\n  last: false,\n};\n\nexport default injectIntl(Day);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { useModel } from '../../../generic/model-store';\n\nimport Day from './Day';\nimport { daycmp, isLearnerAssignment } from '../utils';\n\nconst Timeline = () => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    courseDateBlocks,\n  } = useModel('dates', courseId);\n\n  // Group date items by day (assuming they are sorted in first place) and add some metadata\n  const groupedDates = [];\n  const now = new Date();\n  let foundNextDue = false;\n  let foundToday = false;\n  courseDateBlocks.forEach(courseDateBlock => {\n    const dateInfo = { ...courseDateBlock };\n    const parsedDate = new Date(dateInfo.date);\n\n    if (!foundNextDue && parsedDate >= now && isLearnerAssignment(dateInfo) && !dateInfo.complete) {\n      foundNextDue = true;\n      dateInfo.dueNext = true;\n    }\n\n    if (!foundToday) {\n      const compared = daycmp(parsedDate, now);\n      if (compared === 0) {\n        foundToday = true;\n      } else if (compared > 0) {\n        foundToday = true;\n        groupedDates.push({\n          date: now,\n          items: [],\n        });\n      }\n    }\n\n    if (groupedDates.length === 0 || daycmp(groupedDates[groupedDates.length - 1].date, parsedDate) !== 0) {\n      // Add new grouped date\n      groupedDates.push({\n        date: parsedDate,\n        items: [dateInfo],\n        first: groupedDates.length === 0,\n      });\n    } else {\n      groupedDates[groupedDates.length - 1].items.push(dateInfo);\n    }\n  });\n  if (!foundToday) {\n    groupedDates.push({ date: now, items: [] });\n  }\n  if (groupedDates.length) {\n    groupedDates[groupedDates.length - 1].last = true;\n  }\n\n  return (\n    <ul className=\"list-unstyled m-0 mt-4 pt-2\">\n      {groupedDates.map((groupedDate) => (\n        <Day key={groupedDate.date} {...groupedDate} />\n      ))}\n    </ul>\n  );\n};\n\nexport default Timeline;\n","import React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\n\nconst SuggestedScheduleHeader = ({ intl }) => (\n  <p className=\"large\">\n    {intl.formatMessage(messages.suggestedSchedule)}\n  </p>\n);\n\nSuggestedScheduleHeader.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(SuggestedScheduleHeader);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Alert,\n  Button,\n  Col,\n  Row,\n} from '@edx/paragon';\n\nimport { useModel } from '../../generic/model-store';\nimport messages from './messages';\n\nconst UpgradeToCompleteAlert = ({ intl, logUpgradeLinkClick }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    datesBannerInfo,\n    hasEnded,\n  } = useModel('dates', courseId);\n\n  const {\n    contentTypeGatingEnabled,\n    missedDeadlines,\n    verifiedUpgradeLink,\n  } = datesBannerInfo;\n\n  if (!contentTypeGatingEnabled || missedDeadlines || hasEnded || !verifiedUpgradeLink) {\n    return null;\n  }\n\n  return (\n    <Alert className=\"bg-light-200\">\n      <Row className=\"w-100 m-0\">\n        <Col xs={12} md={9} className=\"small p-0 pr-md-2\">\n          <Alert.Heading>{intl.formatMessage(messages.upgradeToCompleteHeader)}</Alert.Heading>\n          {intl.formatMessage(messages.upgradeToCompleteBody)}\n        </Col>\n        <Col xs={12} md={3} className=\"align-self-center text-right mt-3 mt-md-0 p-0\">\n          <Button\n            variant=\"brand\"\n            size=\"sm\"\n            className=\"w-xs-100 w-md-auto\"\n            onClick={() => {\n              logUpgradeLinkClick();\n              global.location.replace(verifiedUpgradeLink);\n            }}\n          >\n            {intl.formatMessage(messages.upgradeToCompleteButton)}\n          </Button>\n        </Col>\n      </Row>\n    </Alert>\n  );\n};\n\nUpgradeToCompleteAlert.propTypes = {\n  intl: intlShape.isRequired,\n  logUpgradeLinkClick: PropTypes.func,\n};\n\nUpgradeToCompleteAlert.defaultProps = {\n  logUpgradeLinkClick: () => {},\n};\n\nexport default injectIntl(UpgradeToCompleteAlert);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\nimport Timeline from './timeline/Timeline';\n\nimport { fetchDatesTab } from '../data';\nimport { useModel } from '../../generic/model-store';\n\nimport SuggestedScheduleHeader from '../suggested-schedule-messaging/SuggestedScheduleHeader';\nimport ShiftDatesAlert from '../suggested-schedule-messaging/ShiftDatesAlert';\nimport UpgradeToCompleteAlert from '../suggested-schedule-messaging/UpgradeToCompleteAlert';\nimport UpgradeToShiftDatesAlert from '../suggested-schedule-messaging/UpgradeToShiftDatesAlert';\n\nconst DatesTab = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    isSelfPaced,\n    org,\n  } = useModel('courseHomeMeta', courseId);\n\n  const {\n    courseDateBlocks,\n  } = useModel('dates', courseId);\n\n  const hasDeadlines = courseDateBlocks && courseDateBlocks.some(x => x.dateType === 'assignment-due-date');\n\n  const logUpgradeLinkClick = () => {\n    sendTrackEvent('edx.bi.ecommerce.upsell_links_clicked', {\n      org_key: org,\n      courserun_key: courseId,\n      linkCategory: 'personalized_learner_schedules',\n      linkName: 'dates_upgrade',\n      linkType: 'button',\n      pageName: 'dates_tab',\n    });\n  };\n\n  return (\n    <>\n      <div role=\"heading\" aria-level=\"1\" className=\"h2 my-3\">\n        {intl.formatMessage(messages.title)}\n      </div>\n      {isSelfPaced && hasDeadlines && (\n        <>\n          <ShiftDatesAlert model=\"dates\" fetch={fetchDatesTab} />\n          <SuggestedScheduleHeader />\n          <UpgradeToCompleteAlert logUpgradeLinkClick={logUpgradeLinkClick} />\n          <UpgradeToShiftDatesAlert logUpgradeLinkClick={logUpgradeLinkClick} model=\"dates\" />\n        </>\n      )}\n      <Timeline />\n    </>\n  );\n};\n\nDatesTab.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(DatesTab);\n","import DatesTab from './DatesTab';\n\nexport default DatesTab;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  contactSupport: {\n    id: 'learning.goals.unsubscribe.contact',\n    defaultMessage: 'contact support',\n    description: 'Its shown as a suggestion or recommendation for learner when their unsubscribing request has failed',\n  },\n  description: {\n    id: 'learning.goals.unsubscribe.description',\n    defaultMessage: 'You will no longer receive email reminders about your goal for {courseTitle}.',\n    description: 'It describes the consequences to learner when they unsubscribe of goal reminder service',\n  },\n  errorHeader: {\n    id: 'learning.goals.unsubscribe.errorHeader',\n    defaultMessage: 'Something went wrong',\n    description: 'It indicate that the unsubscribing request has failed',\n  },\n  goToDashboard: {\n    id: 'learning.goals.unsubscribe.goToDashboard',\n    defaultMessage: 'Go to dashboard',\n    description: 'Anchor text for button that redirects to dashboard page',\n  },\n  header: {\n    id: 'learning.goals.unsubscribe.header',\n    defaultMessage: 'You’ve unsubscribed from goal reminders',\n    description: 'It indicate that the unsubscribing request was successful',\n  },\n  loading: {\n    id: 'learning.goals.unsubscribe.loading',\n    defaultMessage: 'Unsubscribing…',\n    description: 'Message shown when the unsubscribing request is processing',\n  },\n});\n\nexport default messages;\n","var _path, _circle, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgUnsubscribe = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 167,\n  height: 153,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M140.25 25.5H12.75v102h127.5v-102ZM127.5 46l-51 31.875L25.5 46v-7.75l51 31.875 51-31.875V46Z\"\n})), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n  cx: 134,\n  cy: 39,\n  r: 33,\n  fill: \"#fff\",\n  transform: \"rotate(-90 134 39)\"\n})), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#D23228\",\n  d: \"M134 11c-15.456 0-28 12.544-28 28s12.544 28 28 28 28-12.544 28-28-12.544-28-28-28Zm0 50.4c-12.376 0-22.4-10.024-22.4-22.4 0-5.18 1.764-9.94 4.732-13.72l31.388 31.388A22.127 22.127 0 0 1 134 61.4Zm17.668-8.68L120.28 21.332A22.127 22.127 0 0 1 134 16.6c12.376 0 22.4 10.024 22.4 22.4 0 5.18-1.764 9.94-4.732 13.72Z\"\n})));\nexport { SvgUnsubscribe as ReactComponent };\nexport default __webpack_public_path__ + \"f8d0b96aefbf2f51efd56a705ccfa2ed.svg\";","import PropTypes from 'prop-types';\nimport { getConfig } from '@edx/frontend-platform';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button, Hyperlink } from '@edx/paragon';\n\nimport messages from './messages';\nimport { ReactComponent as UnsubscribeIcon } from './unsubscribe.svg';\n\nconst ResultPage = ({ courseTitle, error, intl }) => {\n  const errorDescription = (\n    <FormattedMessage\n      id=\"learning.goals.unsubscribe.errorDescription\"\n      defaultMessage=\"We were unable to unsubscribe you from goal reminder emails. Please try again later or {contactSupport} for help.\"\n      values={{\n        contactSupport: (\n          <Hyperlink\n            className=\"text-reset\"\n            style={{ textDecoration: 'underline' }}\n            destination={`${getConfig().CONTACT_URL}`}\n          >\n            {intl.formatMessage(messages.contactSupport)}\n          </Hyperlink>\n        ),\n      }}\n    />\n  );\n\n  const header = error\n    ? intl.formatMessage(messages.errorHeader)\n    : intl.formatMessage(messages.header);\n  const description = error\n    ? errorDescription\n    : intl.formatMessage(messages.description, { courseTitle });\n\n  return (\n    <>\n      <UnsubscribeIcon className=\"text-primary\" alt=\"\" />\n      <div role=\"heading\" aria-level=\"1\" className=\"h2\">{header}</div>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-xl-7 col-12 p-0\">{description}</div>\n      </div>\n      <Button variant=\"brand\" href={`${getConfig().LMS_BASE_URL}/dashboard`} className=\"mt-4\">\n        {intl.formatMessage(messages.goToDashboard)}\n      </Button>\n    </>\n  );\n};\n\nResultPage.defaultProps = {\n  courseTitle: null,\n  error: false,\n};\n\nResultPage.propTypes = {\n  courseTitle: PropTypes.string,\n  error: PropTypes.bool,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ResultPage);\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { LearningHeader as Header } from '@edx/frontend-component-header';\nimport PageLoading from '../../generic/PageLoading';\nimport { unsubscribeFromCourseGoal } from '../data/api';\n\nimport messages from './messages';\nimport ResultPage from './ResultPage';\n\nconst GoalUnsubscribe = ({ intl }) => {\n  const { token } = useParams();\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState({});\n\n  // We don't need to bother with redux for this simple page. We're not sharing state with other pages at all.\n  useEffect(() => {\n    unsubscribeFromCourseGoal(token)\n      .then(\n        (result) => {\n          setIsLoading(false);\n          setData(result.data);\n        },\n        () => {\n          setIsLoading(false);\n          setError(true);\n        },\n      );\n    // We unfortunately have no information about the user, course, org, or really anything\n    // as visiting this page is allowed to be done anonymously and without the context of the course.\n    // The token can be used to connect a user and course, it will just require some post-processing\n    sendTrackEvent('edx.ui.lms.goal.unsubscribe', { token });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // deps=[] to only run once\n\n  return (\n    <>\n      <Header showUserDropdown={false} />\n      <main id=\"main-content\" className=\"container my-5 text-center\">\n        {isLoading && (\n          <PageLoading srMessage={`${intl.formatMessage(messages.loading)}`} />\n        )}\n        {!isLoading && (\n          <ResultPage error={error} courseTitle={data.courseTitle} />\n        )}\n      </main>\n    </>\n  );\n};\n\nGoalUnsubscribe.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(GoalUnsubscribe);\n","import GoalUnsubscribe from './GoalUnsubscribe';\n\nexport default GoalUnsubscribe;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport {\n  FormattedDate, FormattedMessage, injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\n\nimport { Button, Card } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\nimport { useModel } from '../../../generic/model-store';\nimport { COURSE_EXIT_MODES, getCourseExitMode } from '../../../courseware/course/course-exit/utils';\nimport { DashboardLink, IdVerificationSupportLink, ProfileLink } from '../../../shared/links';\nimport { requestCert } from '../../data/thunks';\nimport messages from './messages';\n\nconst CertificateStatus = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    isEnrolled,\n    org,\n    canViewCertificate,\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n\n  const {\n    certificateData,\n    end,\n    enrollmentMode,\n    gradingPolicy: {\n      gradeRange,\n    },\n    hasScheduledContent,\n    userHasPassingGrade,\n    verificationData,\n    verifiedMode,\n  } = useModel('progress', courseId);\n  const {\n    certificateAvailableDate,\n  } = certificateData || {};\n\n  const mode = getCourseExitMode(\n    certificateData,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n    null, // CourseExitPageIsActive\n    canViewCertificate,\n  );\n\n  const eventProperties = {\n    org_key: org,\n    courserun_key: courseId,\n  };\n\n  const dispatch = useDispatch();\n  const { administrator } = getAuthenticatedUser();\n\n  let certStatus;\n  let certWebViewUrl;\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n\n  if (certificateData) {\n    certStatus = certificateData.certStatus;\n    certWebViewUrl = certificateData.certWebViewUrl;\n  }\n\n  let certCase;\n  let certEventName = certStatus;\n  let body;\n  let buttonAction;\n  let buttonLocation;\n  let buttonText;\n  let endDate;\n  let certAvailabilityDate;\n\n  let gradeEventName = 'not_passing';\n  if (userHasPassingGrade) {\n    gradeEventName = Object.entries(gradeRange).length > 1 ? 'passing_grades' : 'passing';\n  }\n\n  const dashboardLink = <DashboardLink />;\n  const idVerificationSupportLink = <IdVerificationSupportLink />;\n  const profileLink = <ProfileLink />;\n\n  // Some learners have a valid (\"downloadable\") certificate without being in a passing\n  // state (e.g. learners who have been added to a course's allowlist), so we need to\n  // skip grade validation for these learners\n  const certIsDownloadable = certStatus === 'downloadable';\n  if (mode === COURSE_EXIT_MODES.disabled) {\n    certEventName = 'certificate_status_disabled';\n  } else if (mode === COURSE_EXIT_MODES.nonPassing && !certIsDownloadable) {\n    certCase = 'notPassing';\n    certEventName = 'not_passing';\n    body = intl.formatMessage(messages[`${certCase}Body`]);\n  } else if (mode === COURSE_EXIT_MODES.inProgress && !certIsDownloadable) {\n    certCase = 'inProgress';\n    certEventName = 'has_scheduled_content';\n    body = intl.formatMessage(messages[`${certCase}Body`]);\n  } else if (mode === COURSE_EXIT_MODES.celebration || certIsDownloadable) {\n    switch (certStatus) {\n      case 'requesting':\n        certCase = 'requestable';\n        buttonAction = () => { dispatch(requestCert(courseId)); };\n        body = intl.formatMessage(messages[`${certCase}Body`]);\n        buttonText = intl.formatMessage(messages[`${certCase}Button`]);\n        break;\n\n      case 'unverified':\n        certCase = 'unverified';\n        if (verificationData.status === 'pending') {\n          body = (<p>{intl.formatMessage(messages.unverifiedPendingBody)}</p>);\n        } else {\n          body = (\n            <FormattedMessage\n              id=\"progress.certificateStatus.unverifiedBody\"\n              defaultMessage=\"In order to generate a certificate, you must complete ID verification. {idVerificationSupportLink}.\"\n              description=\"Its shown when learner are not verified thus it recommends going over the verification process\"\n              values={{ idVerificationSupportLink }}\n            />\n          );\n          buttonLocation = verificationData.link;\n          buttonText = intl.formatMessage(messages[`${certCase}Button`]);\n        }\n        break;\n\n      case 'downloadable':\n        // Certificate available, download/viewable\n        certCase = 'downloadable';\n        body = (\n          <FormattedMessage\n            id=\"progress.certificateStatus.downloadableBody\"\n            defaultMessage=\"\n              Showcase your accomplishment on LinkedIn or your resumé today.\n              You can download your certificate now and access it any time from your\n              {dashboardLink} and {profileLink}.\"\n            description=\"Recommending an action for learner when course certificate is available\"\n            values={{ dashboardLink, profileLink }}\n          />\n        );\n        if (certWebViewUrl) {\n          certEventName = 'earned_viewable';\n          buttonLocation = `${getConfig().LMS_BASE_URL}${certWebViewUrl}`;\n          buttonText = intl.formatMessage(messages.viewableButton);\n        }\n        break;\n\n      case 'earned_but_not_available':\n        certCase = 'notAvailable';\n        endDate = <FormattedDate value={end} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n        certAvailabilityDate = <FormattedDate value={certificateAvailableDate} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n        body = (\n          <FormattedMessage\n            id=\"courseCelebration.certificateBody.notAvailable.endDate\"\n            defaultMessage=\"This course ends on {endDate}. Final grades and any earned certificates are\n            scheduled to be available after {certAvailabilityDate}.\"\n            description=\"This shown for leaner when they are eligible for certifcate but it't not available yet, it could because leaners just finished the course quickly!\"\n            values={{ endDate, certAvailabilityDate }}\n          />\n        );\n        break;\n\n      case 'audit_passing':\n      case 'honor_passing':\n        if (verifiedMode) {\n          certCase = 'upgrade';\n          body = intl.formatMessage(messages[`${certCase}Body`]);\n          buttonLocation = verifiedMode.upgradeUrl;\n          buttonText = intl.formatMessage(messages[`${certCase}Button`]);\n        } else {\n          certCase = null; // Do not render the certificate component if the upgrade deadline has passed\n          certEventName = 'audit_passing_missed_upgrade_deadline';\n        }\n        break;\n\n      default:\n        // if user completes a course before certificates are available, treat it as notAvailable\n        // regardless of passing or nonpassing status\n        if (!canViewCertificate) {\n          certCase = 'notAvailable';\n          endDate = intl.formatDate(end, {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            ...timezoneFormatArgs,\n          });\n          body = intl.formatMessage(messages.notAvailableEndDateBody, { endDate });\n        } else {\n          certCase = null;\n          certEventName = 'no_certificate_status';\n        }\n        break;\n    }\n  }\n\n  // Log visit to progress tab\n  useEffect(() => {\n    sendTrackEvent('edx.ui.lms.course_progress.visited', {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n      track_variant: enrollmentMode,\n      grade_variant: gradeEventName,\n      certificate_status_variant: certEventName,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!certCase) {\n    return null;\n  }\n\n  const header = intl.formatMessage(messages[`${certCase}Header`]);\n\n  const logCertificateStatusButtonClicked = () => {\n    sendTrackEvent('edx.ui.lms.course_progress.certificate_status.clicked', {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n      certificate_status_variant: certEventName,\n    });\n    if (certCase === 'upgrade') {\n      sendTrackEvent('edx.bi.ecommerce.upsell_links_clicked', {\n        ...eventProperties,\n        linkCategory: '(none)',\n        linkName: 'progress_certificate',\n        linkType: 'button',\n        pageName: 'progress',\n      });\n    }\n  };\n\n  return (\n    <section data-testid=\"certificate-status-component\" className=\"text-dark-700 mb-4\">\n      <Card className=\"bg-light-200 raised-card\">\n        <Card.Header title={header} />\n        <Card.Section className=\"small text-gray-700\">\n          {body}\n        </Card.Section>\n        <Card.Footer>\n          {buttonText && (buttonLocation || buttonAction) && (\n            <Button\n              variant=\"outline-brand\"\n              onClick={() => {\n                logCertificateStatusButtonClicked(certStatus);\n                if (buttonAction) { buttonAction(); }\n              }}\n              href={buttonLocation}\n              block\n            >\n              {buttonText}\n            </Button>\n          )}\n        </Card.Footer>\n      </Card>\n    </section>\n  );\n};\n\nCertificateStatus.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CertificateStatus);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  donutLabel: {\n    id: 'progress.completion.donut.label',\n    defaultMessage: 'completed',\n    description: 'Label text for progress donut chart',\n  },\n  completionBody: {\n    id: 'progress.completion.body',\n    defaultMessage: 'This represents how much of the course content you have completed. Note that some content may not yet be released.',\n    description: 'It explains the meaning of progress donut chart',\n  },\n  completeContentTooltip: {\n    id: 'progress.completion.tooltip.locked',\n    defaultMessage: 'Content that you have completed.',\n    description: 'It expalains the meaning of content that is completed',\n  },\n  courseCompletion: {\n    id: 'progress.completion.header',\n    defaultMessage: 'Course completion',\n    description: 'Header text for (completion donut chart) section of the progress tab',\n  },\n  incompleteContentTooltip: {\n    id: 'progress.completion.tooltip',\n    defaultMessage: 'Content that you have access to and have not completed.',\n    description: 'It explain the meaning for content is completed',\n  },\n  lockedContentTooltip: {\n    id: 'progress.completion.tooltip.complete',\n    defaultMessage: 'Content that is locked and available only to those who upgrade.',\n    description: 'It expalains the meaning of content that is locked',\n  },\n  percentComplete: {\n    id: 'progress.completion.donut.percentComplete',\n    defaultMessage: 'You have completed {percent}% of content in this course.',\n    description: 'It summarize the progress in the course (100% - %incomplete)',\n  },\n  percentIncomplete: {\n    id: 'progress.completion.donut.percentIncomplete',\n    defaultMessage: 'You have not completed {percent}% of content in this course that you have access to.',\n    description: 'It summarize the progress in the course (100% - %complete)',\n  },\n  percentLocked: {\n    id: 'progress.completion.donut.percentLocked',\n    defaultMessage: '{percent}% of content in this course is locked and available only for those who upgrade.',\n    description: 'It indicate the relative size of content that is locked in the course (100% - %open_content)',\n  },\n});\n\nexport default messages;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { OverlayTrigger, Popover } from '@edx/paragon';\n\nimport messages from './messages';\n\nconst CompleteDonutSegment = ({ completePercentage, intl, lockedPercentage }) => {\n  const [showCompletePopover, setShowCompletePopover] = useState(false);\n\n  if (!completePercentage) {\n    return null;\n  }\n\n  const completeSegmentOffset = (3.6 * completePercentage) / 8;\n  let completeTooltipDegree = completePercentage < 100 ? -completeSegmentOffset : 0;\n\n  const lockedSegmentOffset = lockedPercentage - 75;\n  if (lockedPercentage > 0) {\n    completeTooltipDegree = (lockedSegmentOffset + completePercentage) * -3.6 + 90 + completeSegmentOffset;\n  }\n\n  return (\n    <g\n      className=\"donut-segment-group\"\n      onBlur={() => setShowCompletePopover(false)}\n      onFocus={() => setShowCompletePopover(true)}\n      tabIndex=\"-1\"\n    >\n      {/* Tooltip */}\n      <OverlayTrigger\n        show={showCompletePopover}\n        placement=\"top\"\n        overlay={(\n          <Popover aria-hidden=\"true\">\n            <Popover.Content>\n              {intl.formatMessage(messages.completeContentTooltip)}\n            </Popover.Content>\n          </Popover>\n        )}\n      >\n        {/* Used to anchor the tooltip within the complete segment's stroke */}\n        <rect x=\"19\" y=\"3\" style={{ transform: `rotate(${completeTooltipDegree}deg)` }} />\n      </OverlayTrigger>\n\n      {/* Complete segment */}\n      <circle\n        className=\"donut-segment complete-stroke\"\n        cx=\"21\"\n        cy=\"21\"\n        r=\"15.91549430918954\"\n        strokeDasharray={`${completePercentage} ${100 - completePercentage}`}\n        strokeDashoffset={lockedSegmentOffset + completePercentage}\n      />\n\n      {/* Segment dividers */}\n      {lockedPercentage > 0 && lockedPercentage < 100 && (\n        <circle\n          cx=\"21\"\n          cy=\"21\"\n          r=\"15.91549430918954\"\n          className=\"donut-segment divider-stroke\"\n          strokeDasharray=\"0.3 99.7\"\n          strokeDashoffset={0.15 + lockedSegmentOffset}\n        />\n      )}\n      {completePercentage < 100 && lockedPercentage > 0 && lockedPercentage < 100\n      && lockedPercentage + completePercentage === 100 && (\n        <circle\n          cx=\"21\"\n          cy=\"21\"\n          r=\"15.91549430918954\"\n          className=\"donut-segment divider-stroke\"\n          strokeDasharray=\"0.3 99.7\"\n          strokeDashoffset=\"25.15\"\n        />\n      )}\n    </g>\n  );\n};\n\nCompleteDonutSegment.propTypes = {\n  completePercentage: PropTypes.number.isRequired,\n  intl: intlShape.isRequired,\n  lockedPercentage: PropTypes.number.isRequired,\n};\n\nexport default injectIntl(CompleteDonutSegment);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { OverlayTrigger, Popover } from '@edx/paragon';\n\nimport messages from './messages';\n\nconst IncompleteDonutSegment = ({ incompletePercentage, intl }) => {\n  const [showIncompletePopover, setShowIncompletePopover] = useState(false);\n\n  if (!incompletePercentage) {\n    return null;\n  }\n\n  const incompleteSegmentOffset = (3.6 * incompletePercentage) / 16;\n  const incompleteTooltipDegree = incompletePercentage < 100 ? incompleteSegmentOffset : 0;\n\n  return (\n    <g\n      className=\"donut-segment-group\"\n      onBlur={() => setShowIncompletePopover(false)}\n      onFocus={() => setShowIncompletePopover(true)}\n      tabIndex=\"-1\"\n    >\n      <circle\n        className=\"donut-ring incomplete-stroke\"\n        cx=\"21\"\n        cy=\"21\"\n        r=\"15.91549430918954\"\n        strokeDasharray={`${incompletePercentage} ${100 - incompletePercentage}`}\n        strokeDashoffset=\"25\"\n      />\n\n      {/* Tooltip */}\n      <OverlayTrigger\n        show={showIncompletePopover}\n        placement=\"top\"\n        overlay={(\n          <Popover aria-hidden=\"true\">\n            <Popover.Content>\n              {intl.formatMessage(messages.incompleteContentTooltip)}\n            </Popover.Content>\n          </Popover>\n        )}\n      >\n        {/* Used to anchor the tooltip within the incomplete segment's stroke */}\n        <rect x=\"19\" y=\"3\" style={{ transform: `rotate(${incompleteTooltipDegree}deg)` }} />\n      </OverlayTrigger>\n    </g>\n  );\n};\n\nIncompleteDonutSegment.propTypes = {\n  incompletePercentage: PropTypes.number.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(IncompleteDonutSegment);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { OverlayTrigger, Popover } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\n\nconst LockedDonutSegment = ({ intl, lockedPercentage }) => {\n  const [showLockedPopover, setShowLockedPopover] = useState(false);\n\n  if (!lockedPercentage) {\n    return null;\n  }\n\n  const iconDegree = lockedPercentage > 8 ? (3.6 * lockedPercentage) / 8 : ((3.6 * lockedPercentage) / 5) * 2;\n\n  return (\n    <g\n      className=\"donut-segment-group\"\n      onBlur={() => setShowLockedPopover(false)}\n      onFocus={() => setShowLockedPopover(true)}\n      tabIndex=\"-1\"\n    >\n      <circle\n        className=\"donut-segment locked-stroke\"\n        cx=\"21\"\n        cy=\"21\"\n        r=\"15.91549430918954\"\n        strokeDasharray={`${lockedPercentage} ${100 - lockedPercentage}`}\n        strokeDashoffset={lockedPercentage - 75}\n      />\n\n      {/* Tooltip */}\n      <OverlayTrigger\n        show={showLockedPopover}\n        placement=\"top\"\n        overlay={(\n          <Popover aria-hidden=\"true\">\n            <Popover.Content>\n              {intl.formatMessage(messages.lockedContentTooltip)}\n            </Popover.Content>\n          </Popover>\n        )}\n      >\n        <g\n          width=\"6\"\n          height=\"21\"\n          viewBox=\"0 0 21 6\"\n          style={{\n            transformOrigin: 'center',\n            transform: `rotate(-${iconDegree}deg)`,\n          }}\n        >\n          {/* Locked icon */}\n          <path\n            d=\"M20 8.00002H17V6.21002C17 3.60002 15.09 1.27002 12.49 1.02002C9.51 0.740018 7 3.08002 7 6.00002V8.00002H4V22H20V8.00002ZM12 17C10.9 17 10 16.1 10 15C10 13.9 10.9 13 12 13C13.1 13 14 13.9 14 15C14 16.1 13.1 17 12 17ZM9 8.00002V6.00002C9 4.34002 10.34 3.00002 12 3.00002C13.66 3.00002 15 4.34002 15 6.00002V8.00002H9Z\"\n            fill={lockedPercentage > 5 ? 'white' : 'transparent'}\n            style={{ transform: `scale(0.18) translate(5.8em, .7em) rotate(${iconDegree}deg)` }}\n          />\n        </g>\n      </OverlayTrigger>\n    </g>\n  );\n};\n\nLockedDonutSegment.propTypes = {\n  intl: intlShape.isRequired,\n  lockedPercentage: PropTypes.number.isRequired,\n};\n\nexport default injectIntl(LockedDonutSegment);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  getLocale, injectIntl, intlShape, isRtl,\n} from '@edx/frontend-platform/i18n';\nimport { useModel } from '../../../generic/model-store';\n\nimport CompleteDonutSegment from './CompleteDonutSegment';\nimport IncompleteDonutSegment from './IncompleteDonutSegment';\nimport LockedDonutSegment from './LockedDonutSegment';\nimport messages from './messages';\n\nconst CompletionDonutChart = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    completionSummary: {\n      completeCount,\n      incompleteCount,\n      lockedCount,\n    },\n  } = useModel('progress', courseId);\n\n  const numTotalUnits = completeCount + incompleteCount + lockedCount;\n  const completePercentage = completeCount ? Number(((completeCount / numTotalUnits) * 100).toFixed(0)) : 0;\n  const lockedPercentage = lockedCount ? Number(((lockedCount / numTotalUnits) * 100).toFixed(0)) : 0;\n  const incompletePercentage = 100 - completePercentage - lockedPercentage;\n\n  const isLocaleRtl = isRtl(getLocale());\n\n  return (\n    <>\n      <svg role=\"img\" width=\"50%\" height=\"100%\" viewBox=\"0 0 42 42\" className=\"donut\" style={{ maxWidth: '178px' }} aria-hidden=\"true\">\n        {/* The radius (or \"r\" attribute) is based off of a circumference of 100 in order to simplify percentage\n            calculations. The subsequent stroke-dasharray values found in each segment should add up to equal 100\n            in order to wrap around the circle once. */}\n        <circle className=\"donut-hole\" fill=\"#fff\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" />\n        <g className=\"donut-chart-text\">\n          <text x=\"50%\" y=\"50%\" className=\"donut-chart-number\">\n            {completePercentage}{isLocaleRtl && '\\u200f'}%\n          </text>\n          <text x=\"50%\" y=\"50%\" className=\"donut-chart-label\">\n            {intl.formatMessage(messages.donutLabel)}\n          </text>\n        </g>\n        <IncompleteDonutSegment incompletePercentage={incompletePercentage} />\n        <LockedDonutSegment lockedPercentage={lockedPercentage} />\n        <CompleteDonutSegment completePercentage={completePercentage} lockedPercentage={lockedPercentage} />\n      </svg>\n      <div className=\"sr-only\">\n        {intl.formatMessage(messages.percentComplete, { percent: completePercentage })}\n        {intl.formatMessage(messages.percentIncomplete, { percent: incompletePercentage })}\n        {lockedPercentage > 0 && (\n          <>\n            {intl.formatMessage(messages.percentLocked, { percent: lockedPercentage })}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nCompletionDonutChart.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CompletionDonutChart);\n","import React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport CompletionDonutChart from './CompletionDonutChart';\nimport messages from './messages';\n\nconst CourseCompletion = ({ intl }) => (\n  <section className=\"text-dark-700 mb-4 rounded raised-card p-4\">\n    <div className=\"row w-100 m-0\">\n      <div className=\"col-12 col-sm-6 col-md-7 p-0\">\n        <h2>{intl.formatMessage(messages.courseCompletion)}</h2>\n        <p className=\"small\">\n          {intl.formatMessage(messages.completionBody)}\n        </p>\n      </div>\n      <div className=\"col-12 col-sm-6 col-md-5 mt-sm-n3 p-0 text-center\">\n        <CompletionDonutChart />\n      </div>\n    </div>\n  </section>\n);\n\nCourseCompletion.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseCompletion);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  assignmentType: {\n    id: 'progress.assignmentType',\n    defaultMessage: 'Assignment type',\n    description: 'Header for column that indicate type of the assignment in grade summary table',\n  },\n  backToContent: {\n    id: 'progress.footnotes.backToContent',\n    defaultMessage: 'Back to content',\n    description: 'Text for button that redirects to contnet',\n  },\n  courseGradeBody: {\n    id: 'progress.courseGrade.body',\n    defaultMessage: 'This represents your weighted grade against the grade needed to pass this course.',\n    description: 'This text is shown to explain the meaning of the (grade bar) chart',\n  },\n  courseGradeBarAltText: {\n    id: 'progress.courseGrade.gradeBar.altText',\n    defaultMessage: 'Your current grade is {currentGrade}%. A weighted grade of {passingGrade}% is required to pass in this course.',\n    description: 'Alt text for the grade chart bar',\n  },\n  courseGradeFooterGenericPassing: {\n    id: 'progress.courseGrade.footer.generic.passing',\n    defaultMessage: 'You’re currently passing this course',\n    description: 'This shown when learner weighted grade is greater or equal course passing grade',\n  },\n  courseGradeFooterNonPassing: {\n    id: 'progress.courseGrade.footer.nonPassing',\n    defaultMessage: 'A weighted grade of {passingGrade}% is required to pass in this course',\n    description: 'This shown when learner weighted grade is less than course passing grade',\n  },\n  courseGradeFooterPassingWithGrade: {\n    id: 'progress.courseGrade.footer.passing',\n    defaultMessage: 'You’re currently passing this course with a grade of {letterGrade} ({minGrade}-{maxGrade}%)',\n    description: 'This shown when learner weighted grade is greater or equal course passing grade amd course is using letter grade',\n  },\n  courseGradePreviewHeaderLocked: {\n    id: 'progress.courseGrade.preview.headerLocked',\n    defaultMessage: 'locked feature',\n    description: 'This when (progress page) feature is locked, sometimes learner needs to upgrade to get insight about their progress',\n  },\n  courseGradePreviewHeaderLimited: {\n    id: 'progress.courseGrade.preview.headerLimited',\n    defaultMessage: 'limited feature',\n    description: 'This when (progress page) feature is partially locked, it means leaners can see their progress but not get to a certificate',\n  },\n  courseGradePreviewHeaderAriaHidden: {\n    id: 'progress.courseGrade.preview.header.ariaHidden',\n    defaultMessage: 'Preview of a ',\n    description: 'This text precedes either (locked feature) or (limited feature)',\n  },\n  courseGradePreviewUnlockCertificateBody: {\n    id: 'progress.courseGrade.preview.body.unlockCertificate',\n    defaultMessage: 'Unlock to view grades and work towards a certificate.',\n    description: 'Recommending an action for learner when they need to upgrade to view progress and get a certificate',\n  },\n  courseGradePartialPreviewUnlockCertificateBody: {\n    id: 'progress.courseGrade.partialpreview.body.unlockCertificate',\n    defaultMessage: 'Unlock to work towards a certificate.',\n    description: 'Recommending an action for learner when they need to upgrade to get a certificate',\n  },\n  courseGradePreviewUpgradeDeadlinePassedBody: {\n    id: 'progress.courseGrade.preview.body.upgradeDeadlinePassed',\n    defaultMessage: 'The deadline to upgrade in this course has passed.',\n    description: 'Shown when learner no longer can upgrade',\n  },\n  courseGradePreviewUpgradeButton: {\n    id: 'progress.courseGrade.preview.button.upgrade',\n    defaultMessage: 'Upgrade now',\n    description: 'Text for button that redirects to the upgrade page',\n  },\n  courseGradeRangeTooltip: {\n    id: 'progress.courseGrade.gradeRange.tooltip',\n    defaultMessage: 'Grade ranges for this course:',\n    description: 'This shown when course is using (letter grade) to explain e.g. range for A, B, and C...etc',\n  },\n  courseOutline: {\n    id: 'progress.courseOutline',\n    defaultMessage: 'Course Outline',\n    description: 'Anchor text for link that redirects to (course outline) tab',\n  },\n  currentGradeLabel: {\n    id: 'progress.courseGrade.label.currentGrade',\n    defaultMessage: 'Your current grade',\n    description: 'Text label current leaner grade on (grade bar) chart',\n  },\n  detailedGrades: {\n    id: 'progress.detailedGrades',\n    defaultMessage: 'Detailed grades',\n    description: 'Headline for the (detailed grade) section in the progress tab',\n  },\n  detailedGradesEmpty: {\n    id: 'progress.detailedGrades.emptyTable',\n    defaultMessage: 'You currently have no graded problem scores.',\n    description: 'It indicate that there are no problem or assignments to be scored',\n  },\n  footnotesTitle: {\n    id: 'progress.footnotes.title',\n    defaultMessage: 'Grade summary footnotes',\n    description: 'Title for grade summary footnotes, if exists',\n  },\n  grade: {\n    id: 'progress.gradeSummary.grade',\n    defaultMessage: 'Grade',\n    description: 'Headline for (grade column) in grade summary table',\n  },\n  grades: {\n    id: 'progress.courseGrade.grades',\n    defaultMessage: 'Grades',\n    description: 'Headline for grades section in progress tab',\n  },\n  gradesAndCredit: {\n    id: 'progress.courseGrade.gradesAndCredit',\n    defaultMessage: 'Grades & Credit',\n    description: 'Headline for (grades and credit) section in progress tab',\n  },\n  gradeRangeTooltipAlt: {\n    id: 'progress.courseGrade.gradeRange.Tooltip',\n    defaultMessage: 'Grade range tooltip',\n    description: 'Alt text for icon which that triggers (tip box) for grade range',\n  },\n  gradeSummary: {\n    id: 'progress.gradeSummary',\n    defaultMessage: 'Grade summary',\n    description: 'Headline for the (grade summary) section in (grades) section in progress tab',\n  },\n  gradeSummaryLimitedAccessExplanation: {\n    id: 'progress.gradeSummary.limitedAccessExplanation',\n    defaultMessage: 'You have limited access to graded assignments as part of the audit track in this course.',\n    description: 'Text shown when learner has limited access to grade feature',\n  },\n  gradeSummaryTooltipAlt: {\n    id: 'progress.gradeSummary.tooltip.alt',\n    defaultMessage: 'Grade summary tooltip',\n    description: 'Alt text for icon which that triggers (tip box) for grade summary',\n  },\n  gradeSummaryTooltipBody: {\n    id: 'progress.gradeSummary.tooltip.body',\n    defaultMessage: \"Your course assignment's weight is determined by your instructor. \"\n      + 'By multiplying your grade by the weight for that assignment type, your weighted grade is calculated. '\n      + \"Your weighted grade is what's used to determine if you pass the course.\",\n    description: 'The content of (tip box) for the grade summary section',\n  },\n  noAccessToAssignmentType: {\n    id: 'progress.noAcessToAssignmentType',\n    defaultMessage: 'You do not have access to assignments of type {assignmentType}',\n    description: 'Its alt text for locked icon which is shown if assignment type in (grade summary table) is locked',\n  },\n  noAccessToSubsection: {\n    id: 'progress.noAcessToSubsection',\n    defaultMessage: 'You do not have access to subsection {displayName}',\n    description: 'Text shown when learner have limited access to grades feature',\n  },\n  passingGradeLabel: {\n    id: 'progress.courseGrade.label.passingGrade',\n    defaultMessage: 'Passing grade',\n    description: 'Label for mark on the (grade bar) chart which indicate the poisition of passing grade on the bar',\n  },\n  problemScoreLabel: {\n    id: 'progress.detailedGrades.problemScore.label',\n    defaultMessage: 'Problem Scores:',\n    description: 'Label text which precedes detailed view of all scores per assignment',\n  },\n  problemScoreToggleAltText: {\n    id: 'progress.detailedGrades.problemScore.toggleButton',\n    defaultMessage: 'Toggle individual problem scores for {subsectionTitle}',\n    description: 'Alt text for button which switches detailed view per module',\n  },\n  sectionGradeOverridden: {\n    id: 'progress.detailedGrades.overridden',\n    defaultMessage: 'Section grade has been overridden.',\n    description: 'This indicate that the graded score has been changed, it can happen if leaner initial assessment was not fair, might be for other reasons as well',\n  },\n  score: {\n    id: 'progress.score',\n    defaultMessage: 'Score',\n    description: 'It indicate how many points the learner have socred scored in particular assignment, or exam',\n  },\n  weight: {\n    id: 'progress.weight',\n    defaultMessage: 'Weight',\n    description: 'It indicate the weight of particular assignment on overall course grade, it is demeterined by course author',\n  },\n  weightedGrade: {\n    id: 'progress.weightedGrade',\n    defaultMessage: 'Weighted grade',\n    description: 'Weighed grade is calculated by (weight %) * (grade score) ',\n  },\n  weightedGradeSummary: {\n    id: 'progress.weightedGradeSummary',\n    defaultMessage: 'Your current weighted grade summary',\n    description: 'It the text precede the sum of weighted grades of all the assignment',\n  },\n\n});\n\nexport default messages;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { InfoOutline } from '@edx/paragon/icons';\nimport {\n  Icon, IconButton, OverlayTrigger, Popover,\n} from '@edx/paragon';\nimport { useModel } from '../../../../generic/model-store';\n\nimport messages from '../messages';\n\nconst GradeRangeTooltip = ({ intl, iconButtonClassName, passingGrade }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    gradesFeatureIsFullyLocked,\n    gradingPolicy: {\n      gradeRange,\n    },\n  } = useModel('progress', courseId);\n\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const orderedGradeRange = Object.entries(gradeRange).sort((a, b) => (\n    gradeRange[b[0]] - gradeRange[a[0]]\n  ));\n\n  return (\n    <OverlayTrigger\n      placement=\"top\"\n      trigger=\"click\"\n      show={showTooltip}\n      overlay={(\n        <Popover>\n          <Popover.Content className=\"px-3\">\n            {intl.formatMessage(messages.courseGradeRangeTooltip)}\n            <ul className=\"list-unstyled m-0\">\n              {orderedGradeRange.map((range, index) => {\n                if (index === 0) {\n                  return (\n                    <li key={range[0]}>\n                      {range[0]}: {(range[1] * 100).toFixed(0)}%-100%\n                    </li>\n                  );\n                }\n                const previousGrade = orderedGradeRange[index - 1];\n                return (\n                  <li key={range[0]}>\n                    {range[0]}: {(range[1] * 100).toFixed(0)}%-{(previousGrade[1] * 100).toFixed(0)}%\n                  </li>\n                );\n              })}\n              <li>F: {'<'}{passingGrade}%</li>\n            </ul>\n          </Popover.Content>\n        </Popover>\n      )}\n    >\n      <IconButton\n        onClick={() => setShowTooltip(!showTooltip)}\n        onBlur={() => setShowTooltip(false)}\n        alt={intl.formatMessage(messages.gradeRangeTooltipAlt)}\n        className={`mb-0 mt-n1 ${iconButtonClassName}`}\n        src={InfoOutline}\n        iconAs={Icon}\n        size=\"inline\"\n        disabled={gradesFeatureIsFullyLocked}\n      />\n    </OverlayTrigger>\n  );\n};\n\nGradeRangeTooltip.defaultProps = {\n  iconButtonClassName: '',\n};\n\nGradeRangeTooltip.propTypes = {\n  iconButtonClassName: PropTypes.string,\n  intl: intlShape.isRequired,\n  passingGrade: PropTypes.number.isRequired,\n};\n\nexport default injectIntl(GradeRangeTooltip);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { CheckCircle, WarningFilled } from '@edx/paragon/icons';\nimport { breakpoints, Icon, useWindowSize } from '@edx/paragon';\nimport { useModel } from '../../../../generic/model-store';\n\nimport GradeRangeTooltip from './GradeRangeTooltip';\nimport messages from '../messages';\n\nconst CourseGradeFooter = ({ intl, passingGrade }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    courseGrade: {\n      isPassing,\n      letterGrade,\n    },\n    gradingPolicy: {\n      gradeRange,\n    },\n  } = useModel('progress', courseId);\n\n  const wideScreen = useWindowSize().width >= breakpoints.medium.minWidth;\n\n  const hasLetterGrades = Object.keys(gradeRange).length > 1; // A pass/fail course will only have one key\n  let footerText = intl.formatMessage(messages.courseGradeFooterNonPassing, { passingGrade });\n\n  if (isPassing) {\n    if (hasLetterGrades) {\n      const minGradeRangeCutoff = gradeRange[letterGrade] * 100;\n      const possibleMaxGradeRangeValues = [...Object.values(gradeRange).filter(\n        (grade) => (grade * 100 > minGradeRangeCutoff),\n      )];\n      const maxGradeRangeCutoff = possibleMaxGradeRangeValues.length ? Math.min(...possibleMaxGradeRangeValues) * 100\n        : 100;\n\n      footerText = intl.formatMessage(messages.courseGradeFooterPassingWithGrade, {\n        letterGrade,\n        minGrade: minGradeRangeCutoff.toFixed(0),\n        maxGrade: maxGradeRangeCutoff.toFixed(0),\n      });\n    } else {\n      footerText = intl.formatMessage(messages.courseGradeFooterGenericPassing);\n    }\n  }\n\n  const icon = isPassing ? <Icon src={CheckCircle} className=\"text-success-300 d-inline-flex align-bottom\" />\n    : <Icon src={WarningFilled} className=\"d-inline-flex align-bottom\" />;\n\n  return (\n    <div className={`row w-100 m-0 px-4 py-3 py-md-4 rounded-bottom ${isPassing ? 'bg-success-100' : 'bg-warning-100'}`}>\n      <div className=\"col-auto p-0\">\n        {icon}\n      </div>\n      <div className=\"col-11 pl-2 px-0\">\n        {!wideScreen && (\n          <span className=\"h5 align-bottom\">\n            {footerText}\n            {hasLetterGrades && (\n              <span style={{ whiteSpace: 'nowrap' }}>\n                &nbsp;\n                <GradeRangeTooltip iconButtonClassName=\"h4\" passingGrade={passingGrade} />\n              </span>\n            )}\n          </span>\n        )}\n        {wideScreen && (\n          <span className=\"h4 m-0 align-bottom\">\n            {footerText}\n            {hasLetterGrades && (\n              <span style={{ whiteSpace: 'nowrap' }}>\n                &nbsp;\n                <GradeRangeTooltip iconButtonClassName=\"h3\" passingGrade={passingGrade} />\n              </span>\n            )}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nCourseGradeFooter.propTypes = {\n  intl: intlShape.isRequired,\n  passingGrade: PropTypes.number.isRequired,\n};\n\nexport default injectIntl(CourseGradeFooter);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Locked } from '@edx/paragon/icons';\nimport { Button, Icon } from '@edx/paragon';\n\nimport { useModel } from '../../../../generic/model-store';\nimport messages from '../messages';\n\nconst CourseGradeHeader = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    org,\n  } = useModel('courseHomeMeta', courseId);\n  const {\n    verifiedMode,\n    gradesFeatureIsFullyLocked,\n  } = useModel('progress', courseId);\n\n  const eventProperties = {\n    org_key: org,\n    courserun_key: courseId,\n  };\n\n  const { administrator } = getAuthenticatedUser();\n  const logUpgradeButtonClick = () => {\n    sendTrackEvent('edx.ui.lms.course_progress.grades_upgrade.clicked', {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n    });\n    sendTrackEvent('edx.bi.ecommerce.upsell_links_clicked', {\n      ...eventProperties,\n      linkCategory: '(none)',\n      linkName: 'progress_locked',\n      linkType: 'button',\n      pageName: 'progress',\n    });\n  };\n  let previewText;\n  if (verifiedMode) {\n    previewText = gradesFeatureIsFullyLocked\n      ? intl.formatMessage(messages.courseGradePreviewUnlockCertificateBody)\n      : intl.formatMessage(messages.courseGradePartialPreviewUnlockCertificateBody);\n  } else {\n    previewText = intl.formatMessage(messages.courseGradePreviewUpgradeDeadlinePassedBody);\n  }\n  return (\n    <div className=\"row w-100 m-0 p-4 rounded-top bg-primary-500 text-white\">\n      <div className={`col-12 ${verifiedMode ? 'col-md-9' : ''} p-0`}>\n        <div className=\"row w-100 m-0 p-0\">\n          <div className=\"col-1 p-0\">\n            <Icon src={Locked} />\n          </div>\n          <div className=\"col-11 px-2 p-sm-0 h4 text-white\">\n            <span aria-hidden=\"true\">\n              {intl.formatMessage(messages.courseGradePreviewHeaderAriaHidden)}\n            </span>\n            {gradesFeatureIsFullyLocked\n              ? intl.formatMessage(messages.courseGradePreviewHeaderLocked)\n              : intl.formatMessage(messages.courseGradePreviewHeaderLimited)}\n          </div>\n        </div>\n        <div className=\"row w-100 m-0 p-0 justify-content-end\">\n          <div className=\"col-11 px-2 p-sm-0 small\">\n            {previewText}\n          </div>\n        </div>\n      </div>\n      {verifiedMode && (\n        <div className=\"col-12 col-md-3 mt-3 mt-md-0 p-0 align-self-center text-right\">\n          <Button variant=\"brand\" size=\"sm\" href={verifiedMode.upgradeUrl} onClick={logUpgradeButtonClick}>\n            {intl.formatMessage(messages.courseGradePreviewUpgradeButton)}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nCourseGradeHeader.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseGradeHeader);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport {\n  getLocale, injectIntl, intlShape, isRtl,\n} from '@edx/frontend-platform/i18n';\nimport { OverlayTrigger, Popover } from '@edx/paragon';\n\nimport { useModel } from '../../../../generic/model-store';\n\nimport messages from '../messages';\n\nconst CurrentGradeTooltip = ({ intl, tooltipClassName }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    courseGrade: {\n      isPassing,\n      percent,\n    },\n  } = useModel('progress', courseId);\n\n  const currentGrade = Number((percent * 100).toFixed(0));\n\n  let currentGradeDirection = currentGrade < 50 ? '' : '-';\n\n  const isLocaleRtl = isRtl(getLocale());\n\n  if (isLocaleRtl) {\n    currentGradeDirection = currentGrade < 50 ? '-' : '';\n  }\n\n  return (\n    <>\n      <OverlayTrigger\n        show\n        placement=\"top\"\n        overlay={(\n          <Popover id={`${isPassing ? 'passing' : 'non-passing'}-grade-tooltip`} aria-hidden=\"true\" className={tooltipClassName}>\n            <Popover.Content data-testid=\"currentGradeTooltipContent\" className={isPassing ? 'text-white' : 'text-dark-700'}>\n              {currentGrade.toFixed(0)}{isLocaleRtl ? '\\u200f' : ''}%\n            </Popover.Content>\n          </Popover>\n        )}\n      >\n        <g>\n          <circle cx={`${Math.min(...[isLocaleRtl ? 100 - currentGrade : currentGrade, 100])}%`} cy=\"50%\" r=\"8.5\" fill=\"transparent\" />\n          <rect className=\"grade-bar__divider\" x={`${Math.min(...[isLocaleRtl ? 100 - currentGrade : currentGrade, 100])}%`} style={{ transform: 'translateY(2.61em)' }} />\n        </g>\n      </OverlayTrigger>\n      <text\n        className=\"x-small\"\n        textAnchor={currentGrade < 50 ? 'start' : 'end'}\n        x={`${Math.min(...[isLocaleRtl ? 100 - currentGrade : currentGrade, 100])}%`}\n        y=\"20px\"\n        style={{ transform: `translateX(${currentGradeDirection}3.4em)` }}\n      >\n        {intl.formatMessage(messages.currentGradeLabel)}\n      </text>\n    </>\n  );\n};\n\nCurrentGradeTooltip.defaultProps = {\n  tooltipClassName: '',\n};\n\nCurrentGradeTooltip.propTypes = {\n  intl: intlShape.isRequired,\n  tooltipClassName: PropTypes.string,\n};\n\nexport default injectIntl(CurrentGradeTooltip);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  getLocale, injectIntl, intlShape, isRtl,\n} from '@edx/frontend-platform/i18n';\nimport { OverlayTrigger, Popover } from '@edx/paragon';\n\nimport messages from '../messages';\n\nconst PassingGradeTooltip = ({ intl, passingGrade, tooltipClassName }) => {\n  const isLocaleRtl = isRtl(getLocale());\n\n  let passingGradeDirection = passingGrade < 50 ? '' : '-';\n\n  if (isLocaleRtl) {\n    passingGradeDirection = passingGrade < 50 ? '-' : '';\n  }\n\n  return (\n    <>\n      <OverlayTrigger\n        show\n        placement=\"bottom\"\n        overlay={(\n          <Popover id=\"minimum-grade-tooltip\" className={`bg-primary-500 ${tooltipClassName}`} aria-hidden=\"true\">\n            <Popover.Content className=\"text-white\">\n              {passingGrade}{isLocaleRtl && '\\u200f'}%\n            </Popover.Content>\n          </Popover>\n        )}\n      >\n        <g>\n          <circle cx={`${isLocaleRtl ? 100 - passingGrade : passingGrade}%`} cy=\"50%\" r=\"8.5\" fill=\"transparent\" />\n          <circle className=\"grade-bar--passing\" cx={`${isLocaleRtl ? 100 - passingGrade : passingGrade}%`} cy=\"50%\" r=\"4.5\" />\n        </g>\n      </OverlayTrigger>\n\n      <text\n        className=\"x-small\"\n        textAnchor={passingGrade < 50 ? 'start' : 'end'}\n        x={`${isLocaleRtl ? 100 - passingGrade : passingGrade}%`}\n        y=\"90px\"\n        style={{ transform: `translateX(${passingGradeDirection}3.4em)` }}\n      >\n        {intl.formatMessage(messages.passingGradeLabel)}\n      </text>\n    </>\n  );\n};\n\nPassingGradeTooltip.defaultProps = {\n  tooltipClassName: '',\n};\n\nPassingGradeTooltip.propTypes = {\n  intl: intlShape.isRequired,\n  passingGrade: PropTypes.number.isRequired,\n  tooltipClassName: PropTypes.string,\n};\n\nexport default injectIntl(PassingGradeTooltip);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  getLocale, injectIntl, intlShape, isRtl,\n} from '@edx/frontend-platform/i18n';\nimport { useModel } from '../../../../generic/model-store';\nimport CurrentGradeTooltip from './CurrentGradeTooltip';\nimport PassingGradeTooltip from './PassingGradeTooltip';\n\nimport messages from '../messages';\n\nconst GradeBar = ({ intl, passingGrade }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    courseGrade: {\n      isPassing,\n      percent,\n    },\n    gradesFeatureIsFullyLocked,\n  } = useModel('progress', courseId);\n\n  const currentGrade = Number((percent * 100).toFixed(0));\n\n  const lockedTooltipClassName = gradesFeatureIsFullyLocked ? 'locked-overlay' : '';\n\n  const adjustedRtlStyle = (percentOffest) => (isRtl(getLocale()) ? { transform: `translateX(${100 - percentOffest}%)` } : {});\n\n  return (\n    <div className=\"col-12 col-sm-6 align-self-center p-0\">\n      <div className=\"sr-only\">{intl.formatMessage(messages.courseGradeBarAltText, { currentGrade, passingGrade })}</div>\n      <svg width=\"100%\" height=\"100px\" className=\"grade-bar\" aria-hidden=\"true\">\n        <g style={{ transform: 'translateY(2.61em)' }}>\n          <rect className=\"grade-bar__base\" width=\"100%\" />\n          <rect className=\"grade-bar--passing\" width={`${passingGrade}%`} style={adjustedRtlStyle(passingGrade)} />\n          <rect className={`grade-bar--current-${isPassing ? 'passing' : 'non-passing'}`} width={`${currentGrade}%`} style={adjustedRtlStyle(currentGrade)} />\n\n          {/* Start divider */}\n          <rect className=\"grade-bar__divider\" />\n          {/* End divider */}\n          <rect className=\"grade-bar__divider\" x=\"99.7%\" />\n        </g>\n        <PassingGradeTooltip passingGrade={passingGrade} tooltipClassName={lockedTooltipClassName} />\n        <CurrentGradeTooltip tooltipClassName={lockedTooltipClassName} />\n      </svg>\n    </div>\n  );\n};\n\nGradeBar.propTypes = {\n  intl: intlShape.isRequired,\n  passingGrade: PropTypes.number.isRequired,\n};\n\nexport default injectIntl(GradeBar);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  completed: {\n    id: 'progress.creditInformation.completed',\n    defaultMessage: 'Completed',\n    description: 'Label text if a requirement for (course credit) is satisfied',\n  },\n  courseCredit: {\n    id: 'progress.creditInformation.courseCredit',\n    defaultMessage: 'course credit',\n    description: 'Anchor text for link that redirects (course credit) help page',\n  },\n  minimumGrade: {\n    id: 'progress.creditInformation.minimumGrade',\n    defaultMessage: 'Minimum grade for credit ({minGrade}%)',\n  },\n  requirementsHeader: {\n    id: 'progress.creditInformation.requirementsHeader',\n    defaultMessage: 'Requirements for course credit',\n    description: 'Header for the requirements section in course credit',\n  },\n  upcoming: {\n    id: 'progress.creditInformation.upcoming',\n    defaultMessage: 'Upcoming',\n    description: 'It indicate that the a (credit requirement) status is not known yet',\n  },\n  verificationFailed: {\n    id: 'progress.creditInformation.verificationFailed',\n    defaultMessage: 'Verification failed',\n    description: 'It indicate that the learner submitted a requirement but is either failed or declined',\n  },\n  verificationSubmitted: {\n    id: 'progress.creditInformation.verificationSubmitted',\n    defaultMessage: 'Verification submitted',\n    description: 'It indicate that the learner submitted a requirement but is not graded or reviewed yet',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getConfig } from '@edx/frontend-platform';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { CheckCircle, WarningFilled, WatchFilled } from '@edx/paragon/icons';\nimport { Hyperlink, Icon } from '@edx/paragon';\n\nimport { useModel } from '../../../generic/model-store';\nimport { DashboardLink } from '../../../shared/links';\n\nimport messages from './messages';\n\nconst CreditInformation = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    creditCourseRequirements,\n  } = useModel('progress', courseId);\n\n  if (!creditCourseRequirements) { return null; }\n\n  let eligibilityStatus;\n  let requirementStatus;\n  const requirements = [];\n  const dashboardLink = <DashboardLink />;\n  const creditLink = (\n    <Hyperlink\n      variant=\"muted\"\n      isInline\n      destination={getConfig().CREDIT_HELP_LINK_URL}\n    >{intl.formatMessage(messages.courseCredit)}\n    </Hyperlink>\n  );\n\n  switch (creditCourseRequirements.eligibilityStatus) {\n    case 'not_eligible':\n      eligibilityStatus = (\n        <FormattedMessage\n          id=\"progress.creditInformation.creditNotEligible\"\n          defaultMessage=\"You are no longer eligible for credit in this course. Learn more about {creditLink}.\"\n          description=\"Message to learner who are not eligible for course credit, it can because the a requirement deadline have passed\"\n          values={{ creditLink }}\n        />\n      );\n      break;\n    case 'eligible':\n      eligibilityStatus = (\n        <FormattedMessage\n          id=\"progress.creditInformation.creditEligible\"\n          defaultMessage=\"\n          You have met the requirements for credit in this course. Go to your\n          {dashboardLink} to purchase course credit. Or learn more about {creditLink}.\"\n          description=\"After the credit requirements are met, leaners can then do the last step which purchasing the credit. Note that is only doable for leaners after they met all the requirements\"\n          values={{ dashboardLink, creditLink }}\n        />\n      );\n      break;\n    case 'partial_eligible':\n      eligibilityStatus = (\n        <FormattedMessage\n          id=\"progress.creditInformation.creditPartialEligible\"\n          defaultMessage=\"You have not yet met the requirements for credit. Learn more about {creditLink}.\"\n          description=\"This means that one or more requirements is not satisfied yet\"\n          values={{ creditLink }}\n        />\n      );\n      break;\n    default:\n      break;\n  }\n  creditCourseRequirements.requirements.forEach(requirement => {\n    switch (requirement.status) {\n      case 'submitted':\n        requirementStatus = (<>{intl.formatMessage(messages.verificationSubmitted)} <Icon src={CheckCircle} className=\"text-success-500 d-inline-flex align-bottom\" /></>);\n        break;\n      case 'failed':\n      case 'declined':\n        requirementStatus = (<>{intl.formatMessage(messages.verificationFailed)} <Icon src={WarningFilled} className=\"d-inline-flex align-bottom\" /></>);\n        break;\n      case 'satisfied':\n        requirementStatus = (<>{intl.formatMessage(messages.completed)} <Icon src={CheckCircle} className=\"text-success-500 d-inline-flex align-bottom\" /></>);\n        break;\n      default:\n        requirementStatus = (<>{intl.formatMessage(messages.upcoming)} <Icon src={WatchFilled} className=\"text-gray-500 d-inline-flex align-bottom\" /></>);\n    }\n    requirements.push((\n      <div className=\"row w-100 m-0 small\" key={`requirement-${requirement.order}`}>\n        <p className=\"font-weight-bold\">\n          {requirement.namespace === 'grade'\n            ? `${intl.formatMessage(messages.minimumGrade, { minGrade: Number(requirement.criteria.minGrade) * 100 })}:`\n            : `${requirement.displayName}:`}\n        </p>\n        <div className=\"ml-1\">\n          {requirementStatus}\n        </div>\n      </div>\n    ));\n  });\n\n  return (\n    <>\n      <h3 className=\"h4 col-12 p-0\">{intl.formatMessage(messages.requirementsHeader)}</h3>\n      <p className=\"small\">{eligibilityStatus}</p>\n      {requirements}\n    </>\n  );\n};\n\nCreditInformation.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CreditInformation);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { useModel } from '../../../../generic/model-store';\n\nimport CourseGradeFooter from './CourseGradeFooter';\nimport CourseGradeHeader from './CourseGradeHeader';\nimport GradeBar from './GradeBar';\nimport CreditInformation from '../../credit-information/CreditInformation';\n\nimport messages from '../messages';\n\nconst CourseGrade = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    creditCourseRequirements,\n    gradesFeatureIsFullyLocked,\n    gradesFeatureIsPartiallyLocked,\n    gradingPolicy: {\n      gradeRange,\n    },\n  } = useModel('progress', courseId);\n\n  const passingGrade = Number((Math.min(...Object.values(gradeRange)) * 100).toFixed(0));\n\n  const applyLockedOverlay = gradesFeatureIsFullyLocked ? 'locked-overlay' : '';\n\n  return (\n    <section className=\"text-dark-700 my-4 rounded raised-card\">\n      {(gradesFeatureIsFullyLocked || gradesFeatureIsPartiallyLocked) && <CourseGradeHeader />}\n      <div className={applyLockedOverlay} aria-hidden={gradesFeatureIsFullyLocked}>\n        <div className=\"row w-100 m-0 p-4\">\n          <div className=\"col-12 col-sm-6 p-0 pr-sm-5.5\">\n            <h2>{creditCourseRequirements\n              ? intl.formatMessage(messages.gradesAndCredit)\n              : intl.formatMessage(messages.grades)}\n            </h2>\n            <p className=\"small\">\n              {intl.formatMessage(messages.courseGradeBody)}\n            </p>\n          </div>\n          <GradeBar passingGrade={passingGrade} />\n        </div>\n        <div className=\"row w-100 m-0 px-4\">\n          <CreditInformation />\n        </div>\n        <CourseGradeFooter passingGrade={passingGrade} />\n      </div>\n    </section>\n  );\n};\n\nCourseGrade.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseGrade);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport {\n  getLocale, injectIntl, intlShape, isRtl,\n} from '@edx/frontend-platform/i18n';\n\nimport messages from '../messages';\n\nconst ProblemScoreDrawer = ({ intl, problemScores, subsection }) => {\n  const isLocaleRtl = isRtl(getLocale());\n  return (\n    <span className=\"row w-100 m-0 x-small ml-4 pt-2 pl-1 text-gray-700 flex-nowrap\">\n      <span id=\"problem-score-label\" className=\"col-auto p-0\">{intl.formatMessage(messages.problemScoreLabel)}</span>\n      <div className={classNames('col', 'p-0', { 'greyed-out': !subsection.learnerHasAccess })}>\n        <ul className=\"list-unstyled row w-100 m-0\" aria-labelledby=\"problem-score-label\">\n          {problemScores.map(problemScore => (\n            <li className=\"ml-3\">{problemScore.earned}{isLocaleRtl ? '\\\\' : '/'}{problemScore.possible}</li>\n          ))}\n        </ul>\n      </div>\n    </span>\n  );\n};\n\nProblemScoreDrawer.propTypes = {\n  intl: intlShape.isRequired,\n  problemScores: PropTypes.arrayOf(PropTypes.shape({\n    earned: PropTypes.number.isRequired,\n    possible: PropTypes.number.isRequired,\n  })).isRequired,\n  subsection: PropTypes.shape({ learnerHasAccess: PropTypes.bool }).isRequired,\n};\n\nexport default injectIntl(ProblemScoreDrawer);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Collapsible, Icon, Row } from '@edx/paragon';\nimport {\n  ArrowDropDown, ArrowDropUp, Blocked, Info,\n} from '@edx/paragon/icons';\n\nimport messages from '../messages';\nimport { useModel } from '../../../../generic/model-store';\nimport ProblemScoreDrawer from './ProblemScoreDrawer';\n\nconst SubsectionTitleCell = ({ intl, subsection }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    org,\n  } = useModel('courseHomeMeta', courseId);\n  const {\n    gradesFeatureIsFullyLocked,\n  } = useModel('progress', courseId);\n\n  const {\n    blockKey,\n    displayName,\n    problemScores,\n    url,\n  } = subsection;\n\n  const { administrator } = getAuthenticatedUser();\n  const logSubsectionClicked = () => {\n    sendTrackEvent('edx.ui.lms.course_progress.detailed_grades_assignment.clicked', {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n      assignment_block_key: blockKey,\n    });\n  };\n\n  return (\n    <Collapsible.Advanced>\n      <Row className=\"w-100 m-0\">\n        <Collapsible.Trigger\n          className=\"mr-1 position-absolute\"\n          aria-label={intl.formatMessage(messages.problemScoreToggleAltText, { subsectionTitle: displayName })}\n          tabIndex={gradesFeatureIsFullyLocked ? '-1' : '0'}\n        >\n          <Collapsible.Visible whenClosed><Icon src={ArrowDropDown} /></Collapsible.Visible>\n          <Collapsible.Visible whenOpen><Icon src={ArrowDropUp} /></Collapsible.Visible>\n        </Collapsible.Trigger>\n        <span className=\"small d-inline ml-4 pl-1\">\n          {gradesFeatureIsFullyLocked || subsection.learnerHasAccess ? ''\n            : (\n              <Icon\n                id={`detailedGradesBlockedIcon${subsection.blockKey}`}\n                aria-label={intl.formatMessage(messages.noAccessToSubsection, { displayName })}\n                className=\"mr-1 mt-1 d-inline-flex\"\n                style={{ height: '1rem', width: '1rem' }}\n                src={Blocked}\n                data-testid=\"blocked-icon\"\n              />\n            )}\n          {url ? (\n            <a\n              href={url}\n              className=\"muted-link small\"\n              onClick={logSubsectionClicked}\n              tabIndex={gradesFeatureIsFullyLocked ? '-1' : '0'}\n              aria-labelledby={`detailedGradesBlockedIcon${subsection.blockKey}`}\n            >\n              {displayName}\n            </a>\n          ) : (\n            <span className=\"greyed-out small\">{displayName}</span>\n          )}\n        </span>\n      </Row>\n      <Collapsible.Body className=\"d-flex w-100\">\n        <div className=\"col\">\n          { subsection.override && (\n            <div className=\"row w-100 m-0 x-small ml-4 pt-2 pl-1 text-gray-700 flex-nowrap\">\n              <div>\n                <Icon\n                  src={Info}\n                  className=\"x-small mr-1 text-primary-500\"\n                  style={{ height: '1.3em', width: '1.3em' }}\n                />\n              </div>\n              <div>{intl.formatMessage(messages.sectionGradeOverridden)}</div>\n            </div>\n          )}\n          <ProblemScoreDrawer problemScores={problemScores} subsection={subsection} />\n        </div>\n      </Collapsible.Body>\n    </Collapsible.Advanced>\n  );\n};\n\nSubsectionTitleCell.propTypes = {\n  intl: intlShape.isRequired,\n  subsection: PropTypes.shape({\n    blockKey: PropTypes.string.isRequired,\n    displayName: PropTypes.string.isRequired,\n    learnerHasAccess: PropTypes.bool.isRequired,\n    override: PropTypes.shape({\n      system: PropTypes.string,\n      reason: PropTypes.string,\n    }),\n    problemScores: PropTypes.arrayOf(PropTypes.shape({\n      earned: PropTypes.number.isRequired,\n      possible: PropTypes.number.isRequired,\n    })).isRequired,\n    url: PropTypes.string,\n  }).isRequired,\n};\n\nexport default injectIntl(SubsectionTitleCell);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {\n  getLocale, injectIntl, intlShape, isRtl,\n} from '@edx/frontend-platform/i18n';\nimport { DataTable } from '@edx/paragon';\n\nimport { useModel } from '../../../../generic/model-store';\nimport messages from '../messages';\nimport SubsectionTitleCell from './SubsectionTitleCell';\n\nconst DetailedGradesTable = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    sectionScores,\n  } = useModel('progress', courseId);\n\n  const isLocaleRtl = isRtl(getLocale());\n  return (\n    sectionScores.map((chapter) => {\n      const subsectionScores = chapter.subsections.filter(\n        (subsection) => !!(\n          subsection.hasGradedAssignment\n          && subsection.showGrades\n          && (subsection.numPointsPossible > 0 || subsection.numPointsEarned > 0)),\n      );\n\n      if (subsectionScores.length === 0) {\n        return null;\n      }\n\n      const detailedGradesData = subsectionScores.map((subsection) => ({\n        subsectionTitle: <SubsectionTitleCell subsection={subsection} />,\n        score: <span className={subsection.learnerHasAccess ? '' : 'greyed-out'}>{subsection.numPointsEarned}{isLocaleRtl ? '\\\\' : '/'}{subsection.numPointsPossible}</span>,\n      }));\n\n      return (\n        <div className=\"my-3\" key={`${chapter.displayName}-grades-table`}>\n          <DataTable\n            data={detailedGradesData}\n            itemCount={detailedGradesData.length}\n            columns={[\n              {\n                Header: chapter.displayName,\n                accessor: 'subsectionTitle',\n                headerClassName: 'h5 mb-0',\n                cellClassName: 'mw-100',\n              },\n              {\n                Header: `${intl.formatMessage(messages.score)}`,\n                accessor: 'score',\n                headerClassName: 'justify-content-end h5 mb-0',\n                cellClassName: 'align-top text-right small',\n              },\n            ]}\n          >\n            <DataTable.Table />\n          </DataTable>\n        </div>\n      );\n    })\n  );\n};\n\nDetailedGradesTable.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(DetailedGradesTable);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Blocked } from '@edx/paragon/icons';\nimport { Icon, Hyperlink } from '@edx/paragon';\nimport { useModel } from '../../../../generic/model-store';\n\nimport DetailedGradesTable from './DetailedGradesTable';\n\nimport messages from '../messages';\n\nconst DetailedGrades = ({ intl }) => {\n  const { administrator } = getAuthenticatedUser();\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    org,\n    tabs,\n  } = useModel('courseHomeMeta', courseId);\n  const {\n    gradesFeatureIsFullyLocked,\n    gradesFeatureIsPartiallyLocked,\n    sectionScores,\n  } = useModel('progress', courseId);\n\n  const hasSectionScores = sectionScores.length > 0;\n\n  const logOutlineLinkClick = () => {\n    sendTrackEvent('edx.ui.lms.course_progress.detailed_grades.course_outline_link.clicked', {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n    });\n  };\n\n  const overviewTab = tabs.find(tab => tab.slug === 'outline');\n  const overviewTabUrl = overviewTab && overviewTab.url;\n\n  const outlineLink = overviewTabUrl && (\n    <Hyperlink\n      variant=\"muted\"\n      isInline\n      destination={overviewTabUrl}\n      onClick={logOutlineLinkClick}\n      tabIndex={gradesFeatureIsFullyLocked ? '-1' : '0'}\n    >\n      {intl.formatMessage(messages.courseOutline)}\n    </Hyperlink>\n  );\n\n  return (\n    <section className=\"text-dark-700\">\n      <h3 className=\"h4 mb-3\">{intl.formatMessage(messages.detailedGrades)}</h3>\n      {gradesFeatureIsPartiallyLocked && (\n        <div className=\"mb-3 small ml-0 d-inline\">\n          <Icon className=\"mr-1 mt-1 d-inline-flex\" style={{ height: '1rem', width: '1rem' }} src={Blocked} data-testid=\"blocked-icon\" />\n          {intl.formatMessage(messages.gradeSummaryLimitedAccessExplanation)}\n        </div>\n      )}\n      {hasSectionScores && (\n        <DetailedGradesTable />\n      )}\n      {!hasSectionScores && (\n        <p className=\"small\">{intl.formatMessage(messages.detailedGradesEmpty)}</p>\n      )}\n      {overviewTabUrl && (\n        <p className=\"x-small m-0\">\n          <FormattedMessage\n            id=\"progress.ungradedAlert\"\n            defaultMessage=\"For progress on ungraded aspects of the course, view your {outlineLink}.\"\n            description=\"Text that precede link that redirect to course outline page\"\n            values={{ outlineLink }}\n          />\n        </p>\n      )}\n    </section>\n  );\n};\n\nDetailedGrades.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(DetailedGrades);\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Icon, IconButton, OverlayTrigger, Popover,\n} from '@edx/paragon';\nimport { Blocked, InfoOutline } from '@edx/paragon/icons';\n\nimport messages from '../messages';\nimport { useModel } from '../../../../generic/model-store';\n\nconst GradeSummaryHeader = ({ intl, allOfSomeAssignmentTypeIsLocked }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    gradesFeatureIsFullyLocked,\n  } = useModel('progress', courseId);\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  return (\n    <div className=\"row w-100 m-0 align-items-center\">\n      <h3 className=\"h4 mb-3 mr-1\">{intl.formatMessage(messages.gradeSummary)}</h3>\n      <OverlayTrigger\n        trigger=\"click\"\n        placement=\"top\"\n        show={showTooltip}\n        overlay={(\n          <Popover>\n            <Popover.Content className=\"small text-dark-700\">\n              {intl.formatMessage(messages.gradeSummaryTooltipBody)}\n            </Popover.Content>\n          </Popover>\n        )}\n      >\n        <IconButton\n          onClick={() => { setShowTooltip(!showTooltip); }}\n          onBlur={() => { setShowTooltip(false); }}\n          alt={intl.formatMessage(messages.gradeSummaryTooltipAlt)}\n          src={InfoOutline}\n          iconAs={Icon}\n          className=\"mb-3\"\n          size=\"sm\"\n          disabled={gradesFeatureIsFullyLocked}\n        />\n      </OverlayTrigger>\n      {!gradesFeatureIsFullyLocked && allOfSomeAssignmentTypeIsLocked && (\n        <div className=\"mb-3 small ml-0 d-inline\">\n          <Icon className=\"mr-1 mt-1 d-inline-flex\" style={{ height: '1rem', width: '1rem' }} src={Blocked} data-testid=\"blocked-icon\" />\n          {intl.formatMessage(messages.gradeSummaryLimitedAccessExplanation)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nGradeSummaryHeader.propTypes = {\n  intl: intlShape.isRequired,\n  allOfSomeAssignmentTypeIsLocked: PropTypes.bool.isRequired,\n};\n\nexport default injectIntl(GradeSummaryHeader);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Blocked } from '@edx/paragon/icons';\nimport { Icon } from '@edx/paragon';\nimport { useModel } from '../../../../generic/model-store';\nimport messages from '../messages';\n\nconst AssignmentTypeCell = ({\n  intl, assignmentType, footnoteMarker, footnoteId, locked,\n}) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    gradesFeatureIsFullyLocked,\n  } = useModel('progress', courseId);\n\n  const lockedIcon = locked ? <Icon id={`assignmentTypeBlockedIcon${assignmentType}`} aria-label={intl.formatMessage(messages.noAccessToAssignmentType, { assignmentType })} className=\"mr-1 mt-1 d-inline-flex\" style={{ height: '1rem', width: '1rem' }} src={Blocked} data-testid=\"blocked-icon\" /> : '';\n\n  return (\n    <div className=\"d-flex small\">\n      <div className=\"d-flex\">{lockedIcon}</div>\n      <div>\n        {assignmentType}&nbsp;\n        {footnoteId && footnoteMarker && (\n          <sup>\n            <a\n              id={`${footnoteId}-ref`}\n              className=\"muted-link\"\n              href={`#${footnoteId}-footnote`}\n              aria-describedby=\"grade-summary-footnote-label\"\n              tabIndex={gradesFeatureIsFullyLocked ? '-1' : '0'}\n              aria-labelledby={`assignmentTypeBlockedIcon${assignmentType}`}\n            >\n              {footnoteMarker}\n            </a>\n          </sup>\n        )}\n      </div>\n    </div>\n  );\n};\n\nAssignmentTypeCell.propTypes = {\n  intl: intlShape.isRequired,\n  assignmentType: PropTypes.string.isRequired,\n  footnoteId: PropTypes.string,\n  footnoteMarker: PropTypes.number,\n  locked: PropTypes.bool,\n};\n\nAssignmentTypeCell.defaultProps = {\n  footnoteId: '',\n  footnoteMarker: null,\n  locked: false,\n};\n\nexport default injectIntl(AssignmentTypeCell);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport messages from '../messages';\nimport { useModel } from '../../../../generic/model-store';\n\nconst DroppableAssignmentFootnote = ({ footnotes, intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    gradesFeatureIsFullyLocked,\n  } = useModel('progress', courseId);\n  return (\n    <>\n      <span id=\"grade-summary-footnote-label\" className=\"sr-only\">{intl.formatMessage(messages.footnotesTitle)}</span>\n      <ul className=\"list-unstyled mt-2\">\n        {footnotes.map((footnote, index) => (\n          <li id={`${footnote.id}-footnote`} key={footnote.id} className=\"x-small mt-1\">\n            <sup>{index + 1}</sup>\n            <FormattedMessage\n              id=\"progress.footnotes.droppableAssignments\"\n              defaultMessage=\"The lowest {numDroppable, plural, one{# {assignmentType} score is} other{# {assignmentType} scores are}} dropped.\"\n              values={{\n                numDroppable: footnote.numDroppable,\n                assignmentType: footnote.assignmentType,\n              }}\n            />\n            <a className=\"sr-only\" href={`#${footnote.id}-ref`} tabIndex={gradesFeatureIsFullyLocked ? '-1' : '0'}>\n              {intl.formatMessage(messages.backToContent)}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nDroppableAssignmentFootnote.propTypes = {\n  footnotes: PropTypes.arrayOf(PropTypes.shape({\n    assignmentType: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    numDroppable: PropTypes.number.isRequired,\n  })).isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(DroppableAssignmentFootnote);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {\n  getLocale, injectIntl, intlShape, isRtl,\n} from '@edx/frontend-platform/i18n';\nimport { DataTable } from '@edx/paragon';\nimport { useModel } from '../../../../generic/model-store';\n\nimport messages from '../messages';\n\nconst GradeSummaryTableFooter = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    courseGrade: {\n      isPassing,\n      percent,\n    },\n  } = useModel('progress', courseId);\n\n  const bgColor = isPassing ? 'bg-success-100' : 'bg-warning-100';\n  const totalGrade = (percent * 100).toFixed(0);\n\n  const isLocaleRtl = isRtl(getLocale());\n\n  return (\n    <DataTable.TableFooter className={`border-top border-primary ${bgColor}`}>\n      <div className=\"row w-100 m-0\">\n        <div id=\"weighted-grade-summary\" className=\"col-8 p-0 small\">{intl.formatMessage(messages.weightedGradeSummary)}</div>\n        <div data-testid=\"gradeSummaryFooterTotalWeightedGrade\" aria-labelledby=\"weighted-grade-summary\" className=\"col-4 p-0 text-right font-weight-bold small\">{totalGrade}{isLocaleRtl && '\\u200f'}%</div>\n      </div>\n    </DataTable.TableFooter>\n  );\n};\n\nGradeSummaryTableFooter.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(GradeSummaryTableFooter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport {\n  getLocale, injectIntl, intlShape, isRtl,\n} from '@edx/frontend-platform/i18n';\nimport { DataTable } from '@edx/paragon';\nimport { useModel } from '../../../../generic/model-store';\n\nimport AssignmentTypeCell from './AssignmentTypeCell';\nimport DroppableAssignmentFootnote from './DroppableAssignmentFootnote';\nimport GradeSummaryTableFooter from './GradeSummaryTableFooter';\n\nimport messages from '../messages';\n\nconst GradeSummaryTable = ({ intl, setAllOfSomeAssignmentTypeIsLocked }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    gradingPolicy: {\n      assignmentPolicies,\n    },\n    gradesFeatureIsFullyLocked,\n    sectionScores,\n  } = useModel('progress', courseId);\n\n  const footnotes = [];\n\n  const getFootnoteId = (assignment) => {\n    const footnoteId = assignment.shortLabel ? assignment.shortLabel : assignment.type;\n    return footnoteId.replace(/[^A-Za-z0-9.-_]+/g, '-');\n  };\n\n  const hasNoAccessToAssignmentsOfType = (assignmentType) => {\n    const subsectionAssignmentsOfType = sectionScores.map((chapter) => chapter.subsections.filter((subsection) => (\n      subsection.assignmentType === assignmentType && subsection.hasGradedAssignment\n      && (subsection.numPointsPossible > 0 || subsection.numPointsEarned > 0)\n    ))).flat();\n    if (subsectionAssignmentsOfType.length) {\n      const noAccessToAssignmentsOfType = !subsectionAssignmentsOfType.some((subsection) => (\n        subsection.learnerHasAccess === true\n      ));\n      if (noAccessToAssignmentsOfType) {\n        setAllOfSomeAssignmentTypeIsLocked(true);\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const gradeSummaryData = assignmentPolicies.map((assignment) => {\n    let footnoteId = '';\n    let footnoteMarker;\n\n    if (assignment.numDroppable > 0) {\n      footnoteId = getFootnoteId(assignment);\n      footnotes.push({\n        id: footnoteId,\n        numDroppable: assignment.numDroppable,\n        assignmentType: assignment.type,\n      });\n\n      footnoteMarker = footnotes.length;\n    }\n\n    const locked = !gradesFeatureIsFullyLocked && hasNoAccessToAssignmentsOfType(assignment.type);\n\n    const isLocaleRtl = isRtl(getLocale());\n\n    return {\n      type: {\n        footnoteId, footnoteMarker, type: assignment.type, locked,\n      },\n      weight: { weight: `${(assignment.weight * 100).toFixed(0)}${isLocaleRtl ? '\\u200f' : ''}%`, locked },\n      grade: { grade: `${(assignment.averageGrade * 100).toFixed(0)}${isLocaleRtl ? '\\u200f' : ''}%`, locked },\n      weightedGrade: { weightedGrade: `${(assignment.weightedGrade * 100).toFixed(0)}${isLocaleRtl ? '\\u200f' : ''}%`, locked },\n    };\n  });\n  const getAssignmentTypeCell = (value) => (\n    <AssignmentTypeCell\n      assignmentType={value.type} // eslint-disable-line react/prop-types\n      footnoteId={value.footnoteId} // eslint-disable-line react/prop-types\n      footnoteMarker={value.footnoteMarker} // eslint-disable-line react/prop-types\n      locked={value.locked} // eslint-disable-line react/prop-types\n    />\n  );\n\n  const getCell = (locked, value) => <span className={locked ? 'greyed-out' : ''}>{value}</span>;\n\n  return (\n    <>\n      <DataTable\n        data={gradeSummaryData}\n        itemCount={gradeSummaryData.length}\n        columns={[\n          {\n            Header: `${intl.formatMessage(messages.assignmentType)}`,\n            accessor: 'type',\n            Cell: ({ value }) => getAssignmentTypeCell(value),\n            headerClassName: 'h5 mb-0',\n          },\n          {\n            Header: `${intl.formatMessage(messages.weight)}`,\n            accessor: 'weight',\n            headerClassName: 'justify-content-end h5 mb-0',\n            Cell: ({ value }) => getCell(value.locked, value.weight),\n            cellClassName: 'text-right small',\n          },\n          {\n            Header: `${intl.formatMessage(messages.grade)}`,\n            accessor: 'grade',\n            headerClassName: 'justify-content-end h5 mb-0',\n            Cell: ({ value }) => getCell(value.locked, value.grade),\n            cellClassName: 'text-right small',\n          },\n          {\n            Header: `${intl.formatMessage(messages.weightedGrade)}`,\n            accessor: 'weightedGrade',\n            headerClassName: 'justify-content-end h5 mb-0 text-right',\n            Cell: ({ value }) => getCell(value.locked, value.weightedGrade),\n            cellClassName: 'text-right font-weight-bold small',\n          },\n        ]}\n      >\n        <DataTable.Table />\n        <GradeSummaryTableFooter />\n      </DataTable>\n\n      {footnotes && (\n        <DroppableAssignmentFootnote footnotes={footnotes} />\n      )}\n    </>\n  );\n};\n\nGradeSummaryTable.propTypes = {\n  intl: intlShape.isRequired,\n  setAllOfSomeAssignmentTypeIsLocked: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(GradeSummaryTable);\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useModel } from '../../../../generic/model-store';\n\nimport GradeSummaryHeader from './GradeSummaryHeader';\nimport GradeSummaryTable from './GradeSummaryTable';\n\nconst GradeSummary = () => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    gradingPolicy: {\n      assignmentPolicies,\n    },\n  } = useModel('progress', courseId);\n\n  const [allOfSomeAssignmentTypeIsLocked, setAllOfSomeAssignmentTypeIsLocked] = useState(false);\n\n  if (assignmentPolicies.length === 0) {\n    return null;\n  }\n\n  return (\n    <section className=\"text-dark-700 mb-4\">\n      <GradeSummaryHeader allOfSomeAssignmentTypeIsLocked={allOfSomeAssignmentTypeIsLocked} />\n      <GradeSummaryTable setAllOfSomeAssignmentTypeIsLocked={setAllOfSomeAssignmentTypeIsLocked} />\n    </section>\n  );\n};\n\nexport default GradeSummary;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  progressHeader: {\n    id: 'progress.header',\n    defaultMessage: 'Your progress',\n    description: 'Headline or title for the progress tab',\n  },\n  progressHeaderForTargetUser: {\n    id: 'progress.header.targetUser',\n    defaultMessage: 'Course progress for {username}',\n    description: 'Header when displaying the progress for a different user',\n  },\n  studioLink: {\n    id: 'progress.link.studio',\n    defaultMessage: 'View grading in Studio',\n    description: 'Text shown for button that redirects to the studio if the user is a staff memember',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\n\nimport { useModel } from '../../generic/model-store';\n\nimport messages from './messages';\n\nconst ProgressHeader = ({ intl }) => {\n  const {\n    courseId,\n    targetUserId,\n  } = useSelector(state => state.courseHome);\n\n  const { administrator, userId } = getAuthenticatedUser();\n\n  const { studioUrl, username } = useModel('progress', courseId);\n\n  const viewingOtherStudentsProgressPage = (targetUserId && targetUserId !== userId);\n\n  const pageTitle = viewingOtherStudentsProgressPage\n    ? intl.formatMessage(messages.progressHeaderForTargetUser, { username })\n    : intl.formatMessage(messages.progressHeader);\n\n  return (\n    <div className=\"row w-100 m-0 mt-3 mb-4 justify-content-between\">\n      <h1>{pageTitle}</h1>\n      {administrator && studioUrl && (\n      <Button variant=\"outline-primary\" size=\"sm\" className=\"align-self-center\" href={studioUrl}>\n        {intl.formatMessage(messages.studioLink)}\n      </Button>\n      )}\n    </div>\n  );\n};\n\nProgressHeader.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ProgressHeader);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  datesCardDescription: {\n    id: 'progress.relatedLinks.datesCard.description',\n    defaultMessage: 'A schedule view of your course due dates and upcoming assignments.',\n    description: 'It explain the content of the dates tab',\n  },\n  datesCardLink: {\n    id: 'progress.relatedLinks.datesCard.link',\n    defaultMessage: 'Dates',\n    description: 'Anchor text for link that redirects to dates tab',\n  },\n  outlineCardDescription: {\n    id: 'progress.relatedLinks.outlineCard.description',\n    defaultMessage: 'A birds-eye view of your course content.',\n    description: 'It explain the content of the course outline tab',\n  },\n  outlineCardLink: {\n    id: 'progress.relatedLinks.outlineCard.link',\n    defaultMessage: 'Course Outline',\n    description: 'Anchor text for link that redirects to course outline tab',\n  },\n  relatedLinks: {\n    id: 'progress.relatedLinks',\n    defaultMessage: 'Related links',\n    description: 'Headline for (related links) section in progress tab',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Hyperlink } from '@edx/paragon';\n\nimport messages from './messages';\nimport { useModel } from '../../../generic/model-store';\n\nconst RelatedLinks = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    org,\n    tabs,\n  } = useModel('courseHomeMeta', courseId);\n\n  const { administrator } = getAuthenticatedUser();\n  const logLinkClicked = (linkName) => {\n    sendTrackEvent('edx.ui.lms.course_progress.related_links.clicked', {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n      link_clicked: linkName,\n    });\n  };\n\n  const overviewTab = tabs.find(tab => tab.slug === 'outline');\n  const overviewTabUrl = overviewTab && overviewTab.url;\n  const datesTab = tabs.find(tab => tab.slug === 'dates');\n  const datesTabUrl = datesTab && datesTab.url;\n\n  return (\n    <section className=\"mb-4 x-small\">\n      <h3 className=\"h4\">{intl.formatMessage(messages.relatedLinks)}</h3>\n      <ul className=\"pl-4\">\n        {datesTabUrl && (\n        <li>\n          <Hyperlink destination={datesTabUrl} onClick={() => logLinkClicked('dates')}>\n            {intl.formatMessage(messages.datesCardLink)}\n          </Hyperlink>\n          <p>{intl.formatMessage(messages.datesCardDescription)}</p>\n        </li>\n        )}\n        {overviewTabUrl && (\n        <li>\n          <Hyperlink destination={overviewTabUrl} onClick={() => logLinkClicked('course_outline')}>\n            {intl.formatMessage(messages.outlineCardLink)}\n          </Hyperlink>\n          <p>{intl.formatMessage(messages.outlineCardDescription)}</p>\n        </li>\n        )}\n      </ul>\n    </section>\n  );\n};\n\nRelatedLinks.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(RelatedLinks);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { breakpoints, useWindowSize } from '@edx/paragon';\n\nimport CertificateStatus from './certificate-status/CertificateStatus';\nimport CourseCompletion from './course-completion/CourseCompletion';\nimport CourseGrade from './grades/course-grade/CourseGrade';\nimport DetailedGrades from './grades/detailed-grades/DetailedGrades';\nimport GradeSummary from './grades/grade-summary/GradeSummary';\nimport ProgressHeader from './ProgressHeader';\nimport RelatedLinks from './related-links/RelatedLinks';\n\nimport { useModel } from '../../generic/model-store';\n\nconst ProgressTab = () => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    gradesFeatureIsFullyLocked,\n  } = useModel('progress', courseId);\n\n  const applyLockedOverlay = gradesFeatureIsFullyLocked ? 'locked-overlay' : '';\n\n  const windowWidth = useWindowSize().width;\n  if (windowWidth === undefined) {\n    // Bail because we don't want to load <CertificateStatus/> twice, emitting 'visited' events both times.\n    // This is a hacky solution, since the user can resize the screen and still get two visited events.\n    // But I'm leaving a larger refactor as an exercise to a future reader.\n    return null;\n  }\n\n  const wideScreen = windowWidth >= breakpoints.large.minWidth;\n  return (\n    <>\n      <ProgressHeader />\n      <div className=\"row w-100 m-0\">\n        {/* Main body */}\n        <div className=\"col-12 col-md-8 p-0\">\n          <CourseCompletion />\n          {!wideScreen && <CertificateStatus />}\n          <CourseGrade />\n          <div className={`grades my-4 p-4 rounded raised-card ${applyLockedOverlay}`} aria-hidden={gradesFeatureIsFullyLocked}>\n            <GradeSummary />\n            <DetailedGrades />\n          </div>\n        </div>\n\n        {/* Side panel */}\n        <div className=\"col-12 col-md-4 p-0 px-md-4\">\n          {wideScreen && <CertificateStatus />}\n          <RelatedLinks />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ProgressTab;\n","import React, { useEffect, useState } from 'react';\nimport { getConfig } from '@edx/frontend-platform';\nimport PropTypes from 'prop-types';\nimport { getNotices } from './api';\n/**\n * This component uses the platform-plugin-notices plugin to function.\n * If the user has an unacknowledged notice, they will be rerouted off\n * course home and onto a full-screen notice page. If the plugin is not\n * installed, or there are no notices, we just passthrough this component.\n */\nconst NoticesProvider = ({ children }) => {\n  const [isRedirected, setIsRedirected] = useState();\n\n  useEffect(() => {\n    async function getData() {\n      if (getConfig().ENABLE_NOTICES) {\n        const data = await getNotices();\n        if (data && data.results && data.results.length > 0) {\n          const { results } = data;\n          setIsRedirected(true);\n          window.location.replace(`${results[0]}?next=${window.location.href}`);\n        }\n      }\n    }\n    getData();\n  }, []);\n\n  return (\n    <div>\n      {isRedirected === true ? null : children}\n    </div>\n  );\n};\n\nNoticesProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default NoticesProvider;\n","/* eslint-disable import/prefer-default-export */\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient, getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { logError, logInfo } from '@edx/frontend-platform/logging';\n\nexport const getNotices = async () => {\n  const authenticatedUser = getAuthenticatedUser();\n  const url = new URL(`${getConfig().LMS_BASE_URL}/notices/api/v1/unacknowledged`);\n  if (authenticatedUser) {\n    try {\n      const { data } = await getAuthenticatedHttpClient().get(url.href, {});\n      return data;\n    } catch (e) {\n      // we will just swallow error, as that probably means the notices app is not installed.\n      // Notices are not necessary for the rest of courseware to function.\n      const { customAttributes: { httpErrorStatus } } = e;\n      if (httpErrorStatus === 404) {\n        logInfo(`${e}. This probably happened because the notices plugin is not installed on platform.`);\n      } else {\n        logError(e);\n      }\n    }\n  }\n  return null;\n};\n","import { Navigate, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\n\n/**\n * We have seen evidence of learners hitting MFE pages with spaces instead of plus signs (which are used commonly\n * in our course keys). It's possible something out there is un-escaping our paths before sending learners to them.\n *\n * So this provider fixes those paths up and logs it so that we can try to fix the source.\n *\n * This might be temporary, based on how much we can fix the sources of these urls-with-spaces.\n */\nconst PathFixesProvider = ({ children }) => {\n  const location = useLocation();\n\n  // We only check for spaces. That's not the only kind of character that is escaped in URLs, but it would always be\n  // present for our cases, and I believe it's the only one we use normally.\n  if (location.pathname.includes(' ') || location.pathname.includes('%20')) {\n    const newLocation = {\n      ...location,\n      pathname: (location.pathname.replaceAll(' ', '+')).replaceAll('%20', '+'),\n    };\n\n    sendTrackEvent('edx.ui.lms.path_fixed', {\n      new_path: newLocation.pathname,\n      old_path: location.pathname,\n      referrer: document.referrer,\n      search: location.search,\n    });\n\n    return (<Navigate to={newLocation} replace />);\n  }\n\n  return children; // pass through\n};\n\nPathFixesProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default PathFixesProvider;\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst LiveTab = () => {\n  const { courseId } = useSelector(state => state.courseHome);\n  const liveModel = useSelector(state => state.models.live);\n  useEffect(() => {\n    const iframe = document.getElementById('lti-tab-embed');\n    if (iframe) {\n      iframe.className += ' vh-100 w-100 border-0';\n    }\n  }, []);\n  return (\n    <div\n      id=\"live_tab\"\n      // eslint-disable-next-line react/no-danger\n      dangerouslySetInnerHTML={{ __html: liveModel[courseId]?.iframe }}\n    />\n  );\n};\n\nexport default LiveTab;\n","import React, { useMemo } from 'react';\nimport { ALERT_TYPES, useAlert } from '../../generic/user-messages';\nimport { useModel } from '../../generic/model-store';\n\nconst ActiveEnterpriseAlert = React.lazy(() => import('./ActiveEnterpriseAlert'));\n\nexport default function useActiveEnterpriseAlert(courseId) {\n  const { courseAccess } = useModel('courseHomeMeta', courseId);\n  /**\n   * This alert should render if\n   *    1. course access code is incorrect_active_enterprise\n   */\n  const isVisible = courseAccess && !courseAccess.hasAccess && courseAccess.errorCode === 'incorrect_active_enterprise';\n\n  const payload = useMemo(() => ({\n    text: courseAccess && courseAccess.userMessage,\n    courseId,\n  }), [courseAccess, courseId]);\n  useAlert(isVisible, {\n    code: 'clientActiveEnterpriseAlert',\n    topic: 'outline',\n    dismissible: false,\n    type: ALERT_TYPES.ERROR,\n    payload,\n  });\n\n  return { clientActiveEnterpriseAlert: ActiveEnterpriseAlert };\n}\n","import React, { useEffect } from 'react';\nimport { LearningHeader as Header } from '@edx/frontend-component-header';\nimport Footer from '@edx/frontend-component-footer';\nimport { useParams, Navigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport useActiveEnterpriseAlert from '../alerts/active-enteprise-alert';\nimport { AlertList } from './user-messages';\nimport { fetchDiscussionTab } from '../course-home/data/thunks';\nimport { LOADED, LOADING } from '../course-home/data/slice';\nimport PageLoading from './PageLoading';\nimport messages from '../tab-page/messages';\n\nconst CourseAccessErrorPage = ({ intl }) => {\n  const { courseId } = useParams();\n\n  const dispatch = useDispatch();\n  const activeEnterpriseAlert = useActiveEnterpriseAlert(courseId);\n  useEffect(() => {\n    dispatch(fetchDiscussionTab(courseId));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [courseId]);\n\n  const {\n    courseStatus,\n  } = useSelector(state => state.courseHome);\n\n  if (courseStatus === LOADING) {\n    return (\n      <>\n        <Header />\n        <PageLoading\n          srMessage={intl.formatMessage(messages.loading)}\n        />\n        <Footer />\n      </>\n    );\n  }\n  if (courseStatus === LOADED) {\n    return <Navigate to={`/redirect/home/${courseId}`} replace />;\n  }\n  return (\n    <>\n      <Header />\n      <main id=\"main-content\" className=\"container my-5 text-center\" data-testid=\"access-denied-main\">\n        <AlertList\n          topic=\"outline\"\n          className=\"mx-5 mt-3\"\n          customAlerts={{\n            ...activeEnterpriseAlert,\n          }}\n        />\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nCourseAccessErrorPage.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseAccessErrorPage);\n","import 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport {\n  APP_INIT_ERROR, APP_READY, subscribe, initialize,\n  mergeConfig,\n  getConfig,\n} from '@edx/frontend-platform';\nimport { AppProvider, ErrorPage, PageWrap } from '@edx/frontend-platform/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Routes, Route } from 'react-router-dom';\n\nimport { Helmet } from 'react-helmet';\nimport { fetchDiscussionTab, fetchLiveTab } from './course-home/data/thunks';\nimport DiscussionTab from './course-home/discussion-tab/DiscussionTab';\n\nimport messages from './i18n';\nimport { UserMessagesProvider } from './generic/user-messages';\n\nimport './index.scss';\nimport OutlineTab from './course-home/outline-tab';\nimport { CourseExit } from './courseware/course/course-exit';\nimport CoursewareContainer from './courseware';\nimport CoursewareRedirectLandingPage from './courseware/CoursewareRedirectLandingPage';\nimport DatesTab from './course-home/dates-tab';\nimport GoalUnsubscribe from './course-home/goal-unsubscribe';\nimport ProgressTab from './course-home/progress-tab/ProgressTab';\nimport { TabContainer } from './tab-page';\n\nimport { fetchDatesTab, fetchOutlineTab, fetchProgressTab } from './course-home/data';\nimport { fetchCourse } from './courseware/data';\nimport initializeStore from './store';\nimport NoticesProvider from './generic/notices';\nimport PathFixesProvider from './generic/path-fixes';\nimport LiveTab from './course-home/live-tab/LiveTab';\nimport CourseAccessErrorPage from './generic/CourseAccessErrorPage';\nimport DecodePageRoute from './decode-page-route';\nimport { DECODE_ROUTES, ROUTES } from './constants';\n\nsubscribe(APP_READY, () => {\n  ReactDOM.render(\n    <AppProvider store={initializeStore()}>\n      <Helmet>\n        <link rel=\"shortcut icon\" href={getConfig().FAVICON_URL} type=\"image/x-icon\" />\n      </Helmet>\n      <PathFixesProvider>\n        <NoticesProvider>\n          <UserMessagesProvider>\n            <Routes>\n              <Route path={ROUTES.UNSUBSCRIBE} element={<PageWrap><GoalUnsubscribe /></PageWrap>} />\n              <Route path={ROUTES.REDIRECT} element={<PageWrap><CoursewareRedirectLandingPage /></PageWrap>} />\n              <Route\n                path={DECODE_ROUTES.ACCESS_DENIED}\n                element={<DecodePageRoute><CourseAccessErrorPage /></DecodePageRoute>}\n              />\n              <Route\n                path={DECODE_ROUTES.HOME}\n                element={(\n                  <DecodePageRoute>\n                    <TabContainer tab=\"outline\" fetch={fetchOutlineTab} slice=\"courseHome\">\n                      <OutlineTab />\n                    </TabContainer>\n                  </DecodePageRoute>\n              )}\n              />\n              <Route\n                path={DECODE_ROUTES.LIVE}\n                element={(\n                  <DecodePageRoute>\n                    <TabContainer tab=\"lti_live\" fetch={fetchLiveTab} slice=\"courseHome\">\n                      <LiveTab />\n                    </TabContainer>\n                  </DecodePageRoute>\n                )}\n              />\n              <Route\n                path={DECODE_ROUTES.DATES}\n                element={(\n                  <DecodePageRoute>\n                    <TabContainer tab=\"dates\" fetch={fetchDatesTab} slice=\"courseHome\">\n                      <DatesTab />\n                    </TabContainer>\n                  </DecodePageRoute>\n                )}\n              />\n              <Route\n                path={DECODE_ROUTES.DISCUSSION}\n                element={(\n                  <DecodePageRoute>\n                    <TabContainer tab=\"discussion\" fetch={fetchDiscussionTab} slice=\"courseHome\">\n                      <DiscussionTab />\n                    </TabContainer>\n                  </DecodePageRoute>\n                )}\n              />\n              {DECODE_ROUTES.PROGRESS.map((route) => (\n                <Route\n                  path={route}\n                  element={(\n                    <DecodePageRoute>\n                      <TabContainer\n                        tab=\"progress\"\n                        fetch={fetchProgressTab}\n                        slice=\"courseHome\"\n                        isProgressTab\n                      >\n                        <ProgressTab />\n                      </TabContainer>\n                    </DecodePageRoute>\n                  )}\n                />\n              ))}\n              <Route\n                path={DECODE_ROUTES.COURSE_END}\n                element={(\n                  <DecodePageRoute>\n                    <TabContainer tab=\"courseware\" fetch={fetchCourse} slice=\"courseware\">\n                      <CourseExit />\n                    </TabContainer>\n                  </DecodePageRoute>\n                )}\n              />\n              {DECODE_ROUTES.COURSEWARE.map((route) => (\n                <Route\n                  path={route}\n                  element={(\n                    <DecodePageRoute>\n                      <CoursewareContainer />\n                    </DecodePageRoute>\n                  )}\n                />\n              ))}\n            </Routes>\n          </UserMessagesProvider>\n        </NoticesProvider>\n      </PathFixesProvider>\n    </AppProvider>,\n    document.getElementById('root'),\n  );\n});\n\nsubscribe(APP_INIT_ERROR, (error) => {\n  ReactDOM.render(<ErrorPage message={error.message} />, document.getElementById('root'));\n});\n\ninitialize({\n  handlers: {\n    config: () => {\n      mergeConfig({\n        CONTACT_URL: process.env.CONTACT_URL || null,\n        CREDENTIALS_BASE_URL: process.env.CREDENTIALS_BASE_URL || null,\n        CREDIT_HELP_LINK_URL: process.env.CREDIT_HELP_LINK_URL || null,\n        DISCUSSIONS_MFE_BASE_URL: process.env.DISCUSSIONS_MFE_BASE_URL || null,\n        ENTERPRISE_LEARNER_PORTAL_HOSTNAME: process.env.ENTERPRISE_LEARNER_PORTAL_HOSTNAME || null,\n        ENABLE_JUMPNAV: process.env.ENABLE_JUMPNAV || null,\n        ENABLE_NOTICES: process.env.ENABLE_NOTICES || null,\n        INSIGHTS_BASE_URL: process.env.INSIGHTS_BASE_URL || null,\n        SEARCH_CATALOG_URL: process.env.SEARCH_CATALOG_URL || null,\n        SOCIAL_UTM_MILESTONE_CAMPAIGN: process.env.SOCIAL_UTM_MILESTONE_CAMPAIGN || null,\n        STUDIO_BASE_URL: process.env.STUDIO_BASE_URL || null,\n        SUPPORT_URL: process.env.SUPPORT_URL || null,\n        SUPPORT_URL_CALCULATOR_MATH: process.env.SUPPORT_URL_CALCULATOR_MATH || null,\n        SUPPORT_URL_ID_VERIFICATION: process.env.SUPPORT_URL_ID_VERIFICATION || null,\n        SUPPORT_URL_VERIFIED_CERTIFICATE: process.env.SUPPORT_URL_VERIFIED_CERTIFICATE || null,\n        TERMS_OF_SERVICE_URL: process.env.TERMS_OF_SERVICE_URL || null,\n        TWITTER_HASHTAG: process.env.TWITTER_HASHTAG || null,\n        TWITTER_URL: process.env.TWITTER_URL || null,\n        LEGACY_THEME_NAME: process.env.LEGACY_THEME_NAME || null,\n        EXAMS_BASE_URL: process.env.EXAMS_BASE_URL || null,\n        PROCTORED_EXAM_FAQ_URL: process.env.PROCTORED_EXAM_FAQ_URL || null,\n        PROCTORED_EXAM_RULES_URL: process.env.PROCTORED_EXAM_RULES_URL || null,\n        CHAT_RESPONSE_URL: process.env.CHAT_RESPONSE_URL || null,\n        PRIVACY_POLICY_URL: process.env.PRIVACY_POLICY_URL || null,\n      }, 'LearnerAppConfig');\n    },\n  },\n  messages,\n});\n","import { reducer as learningAssistantReducer } from '@edx/frontend-lib-learning-assistant';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { reducer as courseHomeReducer } from './course-home/data';\nimport { reducer as coursewareReducer } from './courseware/data/slice';\nimport { reducer as recommendationsReducer } from './courseware/course/course-exit/data/slice';\nimport { reducer as toursReducer } from './product-tours/data';\nimport { reducer as modelsReducer } from './generic/model-store';\n\nexport default function initializeStore() {\n  return configureStore({\n    reducer: {\n      models: modelsReducer,\n      courseware: coursewareReducer,\n      courseHome: courseHomeReducer,\n      learningAssistant: learningAssistantReducer,\n      recommendations: recommendationsReducer,\n      tours: toursReducer,\n    },\n  });\n}\n"],"names":["calculateAssignmentTypeGrades","points","assignmentWeight","numDroppable","dropCount","length","lowestScore","Math","min","lowestScoreIndex","indexOf","splice","averageGrade","weightedGrade","reduce","a","b","toFixed","async","getCourseHomeCourseMetadata","courseId","rootSlug","url","getConfig","LMS_BASE_URL","appendBrowserTimezoneToUrl","data","getAuthenticatedHttpClient","get","metadata","camelCaseObject","_objectSpread","tabs","map","tab","slug","tabId","title","isMasquerading","originalUserIsStaff","isStaff","normalizeCourseHomeCourseMetadata","getDatesTabData","error","httpErrorStatus","response","status","getProgressTabData","targetUserId","camelCasedData","gradingPolicy","assignmentPolicies","sectionScores","gradeByAssignmentType","forEach","assignment","type","grades","Array","numTotal","fill","numAssignmentsCreated","numTotalExpectedAssignments","chapter","subsections","subsection","hasGradedAssignment","showGrades","numPointsPossible","assignmentType","numPointsEarned","shift","push","weight","shortLabel","normalizeAssignmentPolicies","gradeRange","grading_policy","grade_range","gradesFeatureIsFullyLocked","completionSummary","lockedCount","gradesFeatureIsPartiallyLocked","learnerHasAccess","global","location","replace","getProctoringInfoData","username","encodeURIComponent","customAttributes","getLiveTabIframe","getTimeOffsetMillis","headerDate","requestTime","responseTime","timeOffsetMillis","undefined","Date","parse","getOutlineTabData","now","tabData","headers","accessExpiration","access_expiration","canShowUpgradeSock","can_show_upgrade_sock","certData","cert_data","courseBlocks","course_blocks","blocks","models","courses","sections","sequences","Object","values","block","id","display_name","sectionIds","children","hasScheduledContent","has_scheduled_content","complete","resumeBlock","resume_block","sequenceIds","description","due","effortActivities","effort_activities","effortTime","effort_time","icon","showLink","lms_web_url","logInfo","course","isArray","sectionId","section","sequenceId","normalizeOutlineBlocks","courseGoals","course_goals","courseTools","course_tools","datesBannerInfo","dates_banner_info","datesWidget","dates_widget","enableProctoredExams","enable_proctored_exams","enrollAlert","enroll_alert","enrollmentMode","enrollment_mode","handoutsHtml","handouts_html","hasEnded","has_ended","offer","resumeCourse","resume_course","date","userHasPassingGrade","user_has_passing_grade","verifiedMode","verified_mode","welcomeMessageHtml","welcome_message_html","postCourseDeadlines","model","URL","post","href","course_key","research_event_data","postWeeklyLearningGoal","daysPerWeek","subscribedToReminders","course_id","days_per_week","subscribed_to_reminders","postDismissWelcomeMessage","postRequestCert","executePostFromPostEvent","postData","researchEventData","bodyParams","unsubscribeFromCourseGoal","token","then","res","LOADING","LOADED","slice","createSlice","name","initialState","courseStatus","proctoringPanelStatus","toastBodyText","toastBodyLink","toastHeader","reducers","fetchProctoringInfoResolved","state","fetchTabDenied","_ref","payload","fetchTabFailure","_ref2","fetchTabRequest","_ref3","fetchTabSuccess","_ref4","setCallToActionToast","_ref5","header","link","linkText","actions","reducer","eventTypes","POST_EVENT","fetchTab","getTabData","dispatch","courseHomeCourseMetadata","addModel","modelType","tabDataResult","courseAccess","hasAccess","e","logError","fetchDatesTab","fetchProgressTab","parseInt","fetchOutlineTab","fetchLiveTab","fetchDiscussionTab","dismissWelcomeMessage","requestCert","resetDeadlines","link_text","saveWeeklyLearningGoal","processEvent","eventData","event","eventName","defineMessages","allDates","defaultMessage","casualGoalButtonText","casualGoalButtonTitle","certAlt","collapseAll","completedAssignment","completedSection","dates","editGoal","expandAll","goal","goalReminderDetail","goalUnsure","handouts","incompleteAssignment","incompleteSection","intenseGoalButtonText","intenseGoalButtonTitle","learnMore","openSection","proctoringInfoPanel","regularGoalButtonText","regularGoalButtonTitle","resumeBlurb","resume","setGoal","setGoalReminder","setLearningGoalButtonScreenReaderText","setWeeklyGoal","setWeeklyGoalDetail","start","startBlurb","tools","upgradeButton","upgradeTitle","welcomeMessage","welcomeMessageShowMoreButton","welcomeMessageShowLessButton","welcomeTo","notStartedProctoringStatus","startedProctoringStatus","submittedProctoringStatus","verifiedProctoringStatus","rejectedProctoringStatus","errorProctoringStatus","otherCourseApprovedProctoringStatus","expiringSoonProctoringStatus","expiredProctoringStatus","proctoringCurrentStatus","notStartedProctoringMessage","startedProctoringMessage","submittedProctoringMessage","verifiedProctoringMessage","rejectedProctoringMessage","errorProctoringMessage","otherCourseApprovedProctoringMessage","otherCourseApprovedProctoringDetail","expiringSoonProctoringMessage","expiredProctoringMessage","proctoringPanelGeneralInfo","proctoringPanelGeneralInfoSubmitted","proctoringPanelGeneralTime","proctoringOnboardingButton","proctoringOnboardingPracticeButton","proctoringOnboardingButtonNotOpen","proctoringReviewRequirementsButton","proctoringOnboardingButtonPastDue","notPassingHeader","notPassingBody","inProgressHeader","inProgressBody","requestableHeader","requestableBody","requestableButton","unverifiedHeader","unverifiedButton","unverifiedPendingBody","downloadableHeader","downloadableBody","viewableButton","notAvailableHeader","notAvailableEndDateBody","upgradeHeader","upgradeBody","unverifiedHomeHeader","unverifiedHomeButton","unverifiedHomeBody","getLocalStorage","key","localStorage","rawItem","getItem","JSON","setLocalStorage","value","setItem","stringify","clearLocalStorage","removeItem","popLocalStorage","close","registerLowercase","signInLowercase","signInSentenceCase","add","idField","update","remove","addModels","addModelsMap","modelsMap","updateModel","updateModels","updateModelsMap","_ref6","removeModel","_ref7","removeModels","_ref8","ids","useModel","useSelector","shallowEqual","useModels","React","AlertList","topic","className","customAlerts","customProps","messages","useContext","UserMessagesContext","getAlertComponent","useCallback","code","Alert","topicMessages","filter","message","_jsx","AlertComponent","Suspense","fallback","dismissible","onDismiss","text","propTypes","PropTypes","defaultProps","useAlert","isVisible","useEffect","cleanupId","browserTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","urlObject","searchParams","append","certStatusEarnedNotAvailableHeader","certStatusDownloadableHeader","certStatusNotPassingHeader","certStatusNotPassingButton","CERT_STATUS_TYPE","EARNED_NOT_AVAILABLE","DOWNLOADABLE","REQUESTING","UNVERIFIED","CertificateStatusAlert","intl","useDispatch","certificateAvailableDate","certStatus","courseEndDate","certURL","userTimezone","org","notPassingCourseEnded","AlertWrapper","props","sendAlertClickTracking","administrator","getAuthenticatedUser","sendTrackEvent","org_key","courserun_key","is_staff","alertProps","renderCertAwardedStatus","variant","faCheckCircle","iconClassName","timezoneFormatArgs","certificateAvailableDateFormatted","FormattedDate","day","month","year","courseEndDateFormatted","formatMessage","certMessages","body","FormattedMessage","buttonMessage","certStatusMessages","buttonVisible","buttonLink","buttonAction","faExclamationTriangle","SUPPORT_URL_ID_VERIFICATION","renderNotPassingCourseEnded","progressTab","find","progressLink","_jsxs","FontAwesomeIcon","Heading","Button","onClick","intlShape","isRequired","tab_id","injectIntl","getAlertVariant","ALERT_TYPES","ERROR","DANGER","SUCCESS","getAlertIcon","WarningFilled","CheckCircle","Info","stacked","ParagonAlert","onClose","INFO","WELCOME","FLASH_MESSAGES_LOCAL_STORAGE_KEY","UserMessagesProvider","setMessages","useState","nextId","setNextId","refId","useRef","addFlash","flashMessages","addFlashMessage","others","_objectWithoutProperties","_excluded","current","currentMessages","clear","arguments","flashMessage","useMemo","Provider","useEventListener","handler","eventListenerRef","removeEventListener","addEventListener","useIFramePluginEvents","events","DiscussionTab","courseHome","path","useParams","originalPath","navigate","useNavigate","iFrameHeight","onIframeLoaded","iframeHeight","setIframeHeight","hasLoaded","setHasLoaded","height","useIFrameHeight","basePath","generatePath","discussionsUrl","DISCUSSIONS_MFE_BASE_URL","src","style","minHeight","appMessages","ar","arMessages","es419Messages","fr","frMessages","zhcnMessages","pt","ptMessages","it","itMessages","de","deMessages","hi","ru","ruMessages","uk","ukMessages","paragonMessages","footerMessages","headerMessages","daycmp","getFullYear","getMonth","getDate","isLearnerAssignment","item","dateType","DateSummary","dateBlock","linkedTitle","faCalendarAlt","fixedWidth","weekday","logVerifiedUpgradeClick","linkCategory","linkName","linkType","pageName","CourseDates","courseDateBlocks","datesTabLink","courseDateBlock","LmsHtmlFragment","html","rest","wholePage","LEGACY_THEME_NAME","BASE_URL","iframe","resetIframeHeight","contentWindow","document","scrollHeight","onLoad","ref","referrerPolicy","scrolling","srcDoc","CourseHandouts","StartOrResumeCourseCard","eventProperties","hasVisitedCourse","resumeCourseUrl","Card","Header","sendTrackingLogEvent","event_type","Footer","_Fragment","_path","_extends","assign","bind","target","i","source","prototype","hasOwnProperty","call","apply","this","SvgFlagBlack","xmlns","width","d","SvgFlagOutline","SvgFlagGray","fillRule","strokeWidth","FlagButton","buttonIcon","handleSelect","isSelected","classnames","role","LearningGoalButton","level","casual","FlagCasualIcon","regular","FlagRegularIcon","intense","FlagIntenseIcon","WeeklyLearningGoalCard","daysPerWeekGoal","setDaysPerWeekGoal","isGetReminderSelected","setGetReminderSelected","useLocation","days","triggeredFromEmail","selectReminders","num_days","reminder_selected","currentParams","URLSearchParams","search","weeklyGoal","Number","includes","delete","history","toString","size","subtitle","Section","Form","Switch","checked","onChange","isGetReminderChecked","handleSubscribeToReminders","disabled","muted","Icon","Email","showCoursewareTour","showExistingUserCourseHomeTour","showNewUserCourseHomeModal","showNewUserCourseHomeTour","toursEnabled","disableCourseHomeTour","disableCoursewareTour","disableNewUserCourseHomeModal","launchCourseHomeTour","setTourData","courseHomeTourStatus","beginTour","launchTour","newUserModalBody","newUserModalTitleWelcome","skipForNow","LaunchCourseHomeTourButton","srOnly","tours","handleClick","tour_variant","Compass","CourseTools","renderIcon","iconClasses","faBookmark","faCertificate","faInfo","faCalendar","faNewspaper","faStar","courseTool","analyticsId","tool_name","logClick","activities","minutesAbbreviated","minutesFull","EffortEstimate","minuteCount","ceil","minutes","activityCount","content","classNames","fontSize","SequenceLink","first","sequence","coursewareUrl","Link","to","displayTitle","dueDateMessage","assignmentDue","FormattedTime","timeZoneName","noDueDateMessage","fasCheckCircle","farCheckCircle","defaultOpen","expand","open","setOpen","sectionTitle","Collapsible","styling","onToggle","iconWhenClosed","IconButton","alt","faPlus","iconWhenOpen","genericMessages","faMinus","index","suggestedSchedule","upgradeToCompleteHeader","upgradeToCompleteBody","upgradeToCompleteButton","upgradeToShiftBody","upgradeToShiftButton","missedDeadlines","shiftDatesBody","shiftDatesButton","ShiftDatesAlert","fetch","missedGatedContent","Row","Col","xs","md","srPrices","srInlinePrices","FormattedPricing","inline","currencySymbol","price","discountedPrice","originalPrice","upgradeUrl","UpgradeButton","pricing","UpgradeNowButton","CheckmarkBullet","faCheck","VerifiedCertBullet","verifiedCertLink","rel","MARKETING_SITE_BASE_URL","UnlockGradedBullet","gradedAssignmentsInBoldText","FullAccessBullet","fullAccessInBoldText","SupportMissionBullet","missionInBoldText","siteName","SITE_NAME","UpsellNoFBECardContent","UpsellFBEFarAwayCardContent","UpsellFBESoonCardContent","accessExpirationDate","includingAnyProgress","benefitsOfUpgrading","instanceOf","PastExpirationCardContent","ExpirationCountdown","expirationText","hoursToExpiration","setupgradeNotificationCurrentState","dayCount","floor","hourCount","AccessExpirationDateBanner","PastExpirationDateBanner","UpgradeNotification","contentTypeGatingEnabled","marketingUrl","shouldDisplayBorder","upsellPageName","dateNow","correctedTime","expirationDate","pastExpirationDeadline","promotionEventProperties","creative","position","promotion_id","upgradeNotificationHeaderText","expirationBanner","upsellMessage","callToActionButton","offerCode","hoursToAccessExpiration","hoursToDiscountExpiration","percentage","logClickPastExpiration","UpgradeToShiftDatesAlert","logUpgradeLinkClick","verifiedUpgradeLink","CourseEndAlert","CourseStartAlert","CourseStartMasqueradeBanner","IsStartDateInFuture","today","PrivateCourseAlert","ScheduledContentAlert","WelcomeMessage","display","setDisplay","shortWelcomeMessageHtml","truncate","byWords","keepWhitespaces","messageCanBeShortened","showShortMessage","setShowShortMessage","show","TransitionReplace","enterDuration","exitDuration","ProctoringInfoPanel","setLink","onboardingPastDue","setOnboardingPastDue","showInfoPanel","setShowInfoPanel","setStatus","readableStatus","setReadableStatus","releaseDate","setReleaseDate","readableStatuses","notStarted","started","submitted","verified","rejected","otherCourseApproved","expiringSoon","expired","getReadableStatusClass","examStatus","readableClass","examStatusCamelCase","camelCase","isCurrentlySubmitted","isNotYetReleased","examReleaseDate","keys","onboarding_status","onboarding_link","expiration_date","dateString","getTime","isExpiringSoon","onboarding_release_date","onboarding_past_due","catch","finally","onboardingExamButton","formatDate","borderClass","getBorderClass","getLearningSequencesOutline","outlineUrl","learningSequencesData","isReleased","accessible","effective_start","entries","outline","seqId","availableSequenceIds","sequence_ids","childSeqId","some","seq","normalizeLearningSequencesData","getCourseMetadata","content_type_gating_enabled","enrollmentStart","enrollment_start","enrollmentEnd","enrollment_end","end","enrollment","mode","isEnrolled","is_active","license","user_timezone","showCalculator","show_calculator","notes","marketing_url","celebrations","courseExitPageIsActive","course_exit_page_is_active","certificateData","certificate_data","entranceExamData","entrance_exam_data","verifyIdentityUrl","verify_identity_url","verificationStatus","verification_status","linkedinAddToProfileUrl","linkedin_add_to_profile_url","relatedPrograms","related_programs","userNeedsIntegritySignature","user_needs_integrity_signature","canAccessProctoredExams","can_access_proctored_exams","learningAssistantEnabled","learning_assistant_enabled","normalizeMetadata","getSequenceHandlerUrl","FAILED","sequenceStatus","sequenceMightBeUnit","fetchCourseRequest","fetchCourseSuccess","fetchCourseFailure","fetchCourseDenied","fetchSequenceRequest","fetchSequenceSuccess","fetchSequenceFailure","fetchCourseRecommendationsRequest","fetchCourseRecommendationsSuccess","fetchCourseRecommendationsFailure","fetchCourse","Promise","allSettled","courseMetadataResult","learningSequencesOutlineResult","courseHomeMetadataResult","fetchedMetadata","fetchedCourseHomeMetadata","fetchedOutline","reason","getCourseDiscussionTopics","getCourseDiscussionConfig","provider","topics","getCourseTopics","usageKey","sequenceIdsSelector","courseware","coursewareMeta","flatMap","accountActivationAlertTitle","AccountActivationAlert","showModal","setShowModal","showSpinner","setShowSpinner","showCheck","setShowCheck","handleOnClick","sendActivationEmail","Cookies","domain","process","button","ArrowForward","AlertModal","isOpen","footerNode","bodyContent","boldEmail","email","sendEmailTag","Spinner","animation","Check","OutlineTab","isSelfPaced","selectedGoal","weeklyLearningGoalEnabled","setExpandAll","courseStartAlert","clientCourseStartAlert","useCourseStartAlert","courseEndAlert","endBlock","endDate","delta","clientCourseEndAlert","useCourseEndAlert","certificateAvailableAlert","certWebViewUrl","isVerifiedEnrollmentMode","PROFESSIONAL","VERIFIED","NO_ID_PROFESSIONAL_MODE","CREDIT_MODE","MASTERS","EXECUTIVE_EDUCATION","hasAlertingCertStatus","verifyCertStatusType","clientCertificateStatusAlert","useCertificateAvailableAlert","privateCourseAlert","authenticatedUser","AppContext","enrolledUser","privateOutline","anonymousUser","canEnroll","clientPrivateCourseAlert","usePrivateCourseAlert","scheduledContentAlert","useScheduledContentAlert","rootCourseId","hasDeadlines","x","learnerType","isEnterpriseUser","roles","split","pathname","logUpgradeToShiftDatesLinkClick","applyForCredit","certificateHeaderDownloadable","certificateHeaderNotAvailable","certificateNotAvailableBodyAccessCert","certificateNotAvailableEndDateBody","certificateHeaderUnverified","certificateHeaderRequestable","certificateHeaderUpgradable","certificateImage","completedCourseHeader","congratulationsHeader","congratulationsImage","courseInProgressDescription","courseInProgressHeader","dashboardLink","endOfCourseDescription","endOfCourseHeader","endOfCourseTitle","idVerificationSupportLink","linkedinAddToProfileButton","microBachelorsLearnMore","microMastersLearnMore","microMastersMessage","nextButtonComplete","nextButtonEnd","profileLink","programsLastCourseHeader","requestCertificateBodyText","requestCertificateButton","searchOurCatalogLink","shareMessage","socialMessage","upgradeLink","verificationPending","verifiedCertificateSupportLink","verifyIdentityButton","viewCertificateButton","viewCourseScheduleButton","viewCoursesButton","viewGradesButton","programTypes","ProgramCompletion","progress","inProgress","programLink","Hyperlink","textDecoration","destination","SUPPORT_URL","CREDENTIALS_BASE_URL","certImage","maxWidth","completed","Footnote","COURSE_EXIT_MODES","celebration","nonPassing","CELEBRATION_STATUSES","NON_CERTIFICATE_STATUSES","getCourseExitMode","canImmediatelyViewCertificate","isCelebratoryStatus","isEligibleForCertificate","GetCourseExitNavigation","canViewCertificate","exitMode","exitActive","exitText","extraProperties","logVisit","DashboardFootnote","UpgradeFootnote","deadline","defaultEmailBody","shareEmail","shareService","SocialIcons","emailBody","emailSubject","hashtags","twitterUrl","TWITTER_URL","twitterAccount","substring","lastIndexOf","service","socialUtmCampaign","SOCIAL_UTM_MILESTONE_CAMPAIGN","socialUtmMarketingUrl","LinkedinShareButton","beforeOnClick","LinkedinIcon","round","TwitterShareButton","platform","TwitterIcon","FacebookShareButton","quote","FacebookIcon","EmailShareButton","subject","EmailIcon","TWITTER_HASHTAG","IntlDashboardLink","isInline","IntlIdVerificationSupportLink","IntlProfileLink","DashboardLink","IdVerificationSupportLink","ProfileLink","recommendationsStatus","CatalogSuggestion","SEARCH_CATALOG_URL","faSearch","PageLoading","Component","renderSrMessage","srMessage","render","screenReaderText","recommendationsHeading","recommendationsCourseFooter","listJoin","browseCatalog","loadingRecommendations","CourseCard","original","image","owners","formattedOwners","owner","join","sp","reserveLastWord","isClickable","ImageCap","textElement","IntlCard","CourseRecommendations","recommendations","number","courseKey","discoveryApiUrl","DISCOVERY_API_BASE_URL","recommendationsUrl","enrollmentsUrl","recommendationsResponse","enrollmentsResponse","all","uuid","enrollments","enrollmentRunIds","courseDetails","recUuid","courseRunKeys","every","filterRecommendationsList","getCourseRecommendations","fetchCourseRecommendations","recommendationsLength","recommendations_status","recommendations_length","recommendationData","recommendation","preventDefault","setTimeout","window","DataTable","isPaginated","itemCount","columns","accessor","pageSize","pageIndex","CardView","CardComponent","CourseCelebration","wideScreen","useWindowSize","breakpoints","medium","minWidth","buttonLocation","buttonText","footnote","certHeader","buttonPrefix","buttonVariant","buttonEvent","buttonSuffix","certificate","visitEvent","backgroundColor","border","faLinkedinIn","certAvailableDate","SUPPORT_URL_VERIFIED_CERTIFICATE","percent","certificateLocked","Helmet","CelebrationMobile","CelebrationDesktop","program","CourseInProgress","datesTab","CourseNonPassing","CourseExit","postUnsubscribeFromGoalReminders","unsubscribeFromGoalReminders","Navigate","failure","loading","courseMaterial","invisibleStyle","left","pointerEvents","visibility","useIndexOfLastVisibleChild","containerElementRef","overflowElementRef","containingRectRef","indexOfLastVisibleChild","setIndexOfLastVisibleChild","windowSize","useLayoutEffect","containingRect","getBoundingClientRect","childNodesArr","nextIndexOfLastVisibleChild","childNode","acc","sumWidth","Tabs","attrs","tabChildren","childrenArray","toArray","indexOfOverflowStart","wrappedChildren","child","overflowChildren","overflowChild","count","Dropdown","Toggle","Menu","CourseTabsNavigation","activeTabSlug","active","congratulations","streakBody","streakButton","streakButtonSrOnly","streakButtonAA759","streakHeader","streakFactoidABoldedSection","streakFactoidBBoldedSection","streakDiscountMessage","CloseText","StreakModal","metadataModel","streakLengthToCelebrate","isStreakCelebrationOpen","closeStreakCelebration","streakDiscountCouponEnabled","factoid","streakLength","boldedSectionA","boldedSectionB","factoids","bolded_section","streak_length","random","getRandomFactoid","randomFactoid","setRandomFactoid","discountCode","discountPercent","setDiscountPercent","queryingDiscount","small","recordStreakCelebration","ECOMMERCE_BASE_URL","voucher","sku","calculateVoucherDiscount","result","totalInclTax","totalInclTaxExclDiscounts","discountMultipler","showOffer","ModalDialog","recordModalClosing","isFullscreenScroll","Title","Body","StreakMobileImage","StreakDesktopImage","Lightbulb","MoneyFilled","toLocaleDateString","CloseButton","genericError","placeholder","userNameLabel","adminNavbar","adminStudioView","MasqueradeUserNameInput","onError","onKeyPress","onSubmit","user_name","success","reload","_this$props","Input","label","MasqueradeWidgetOption","parentNode","click","groupId","userName","userPartitionId","userNameInputToggle","group_id","user_partition_id","accumulator","currentValue","selected","groupName","Item","MasqueradeWidget","constructor","super","autoFocus","masquerade","options","shouldShowUserNameInput","masqueradeUsername","componentDidMount","getMasqueradeOptions","onSuccess","console","clearError","postMasqueradeOptions","parseAvailableOptions","setState","toggle","prevState","_this","available","group","specificLearnerInputText","defaultValue","errorMessage","contextType","AccessExpirationMasqueradeBanner","InstructorToolbar","didMount","setDidMount","unitId","urlInsights","urlBase","INSIGHTS_BASE_URL","urlFull","getInsightsUrl","urlStudio","STUDIO_BASE_URL","getStudioUrl","masqueradeErrorMessage","showMasqueradeError","accessExpirationMasqueradeBanner","masqueradingExpiredCourse","clientAccessExpirationMasqueradeBanner","useAccessExpirationMasqueradeBanner","courseStartDateMasqueradeBanner","clientCourseStartMasqueradeBanner","useCourseStartMasqueradeBanner","EnrollmentAlert","LogistrationAlert","DismissButtonFormattedMessage","NextButtonFormattedMessage","OkayButtonFormattedMessage","enabled","onEnd","checkpoints","placement","endButtonText","onEscape","tourId","datesCheckpoint","outlineCheckpoint","tabNavigationCheckpoint","upgradeCheckpoint","weeklyGoalsCheckpoint","advanceButtonText","dismissButtonText","NewUserCourseHomeTourModal","onStartTour","MarketingModal","heroIsDark","hasCloseButton","heroNode","Hero","Background","backgroundSrc","heroImage","Content","as","welcome","ActionRow","patchTourData","tourData","patch","closeNewUserCourseHomeModal","endCourseHomeTour","course_home_tour_status","endCoursewareTour","show_courseware_tour","ProductTours","activeTab","isAbandonTourEnabled","setIsAbandonTourEnabled","isCoursewareTourEnabled","setIsCoursewareTourEnabled","isExistingUserCourseHomeTourEnabled","setIsExistingUserCourseHomeTourEnabled","isNewUserCourseHomeTourEnabled","setIsNewUserCourseHomeTourEnabled","isCoursewareTab","isOutlineTab","getTourData","fetchTourData","abandonTour","coursewareTour","existingUserCourseHomeTour","newUserCourseHomeTour","ProductTour","LoadedTabPage","logistrationAlert","clientLogistrationAlert","useLogistrationAlert","enrollmentAlert","extraText","clientEnrollmentAlert","useEnrollmentAlert","streakDiscountEnabled","useToggle","TabPage","redirectUrl","errorCode","additionalContextUserMessage","getLocale","format","developerMessage","getAccessDeniedRedirectUrl","Toast","action","closeLabel","courseOrg","courseNumber","courseTitle","TabContainer","isProgressTab","courseIdFromUrl","OuterExamTimer","entranceExamTextNotPassing","entranceExamTextPassed","CreativeCommonsLicenseTags","by","intlMessagesId","faCreativeCommonsBy","nc","faCreativeCommonsNc","nd","faCreativeCommonsNd","sa","faCreativeCommonsSa","zero","faCreativeCommonsZero","CourseLicense","licenseType","licenseOptions","licenseVersion","colonIndex","trim","optionStr","version","option","toLowerCase","parseLicense","faCopyright","activeCreativeCommonsLicenseTags","faCreativeCommons","tag","renderCreativeCommonsLicense","notificationTray","openNotificationTrigger","closeNotificationTrigger","responsiveCloseNotificationTray","notificationTitle","noNotificationsMessage","SidebarBase","ariaLabel","sidebarId","showTitleBar","toggleSidebar","shouldDisplayFullScreen","currentSidebar","SidebarContext","onKeyDown","tabIndex","ArrowBackIos","Close","iconAs","getSessionStorage","sessionStorage","setSessionStorage","SidebarTriggerBase","NotificationIcon","notificationColor","WatchOutline","top","right","ID","NotificationTrigger","notificationStatus","setNotificationStatus","upgradeNotificationCurrentState","NotificationTray","onNotificationSeen","setUpgradeNotificationCurrentState","Trigger","discussionsTitle","openDiscussionsTrigger","ensureConfig","DiscussionsTrigger","baseUrl","edxProvider","enabledInContext","QuestionAnswer","DiscussionsSidebar","allow","SIDEBARS","notifications","Sidebar","discusssions","SIDEBAR_ORDER","sideBarId","SidebarToRender","SidebarTriggers","isActive","borderBottom","headerPlaceholder","loadFailure","loadingHonorCode","loadingLockedContent","loadingSequence","noContent","gradeAvailable","progressPage","HiddenAfterDue","UnitIcon","faVideo","faBook","faTasks","faEdit","faLock","UnitButton","contentType","bookmarked","showCompletion","showTitle","CompleteIcon","BookmarkFilledIcon","connect","mapStateToProps","units","SequenceNavigationDropdown","onNavigate","unitIds","total","buttonUnitId","SequenceNavigationTabs","containerRef","shouldDisplayDropdown","flexBasis","useSequenceNavigationMetadata","currentSequenceId","currentUnitId","isFirstUnit","isLastUnit","sequenceIndex","unitIndex","isLastSequence","isLastUnitInSequence","nextSequenceId","previousSequenceId","nextLink","previousLink","nextIndex","previousIndex","nextButton","nextUpButton","previousButton","SequenceNavigation","nextHandler","previousHandler","isLocked","gatedContent","gated","shouldDisplayNotificationTriggerInSequence","renderPreviousButton","prevArrow","isRtl","ChevronRight","ChevronLeft","iconBefore","renderNextButton","nextArrow","iconAfter","UnitNavigationEffortEstimate","nextSequence","UnitNavigation","onClickPrevious","onClickNext","faChevronRight","faChevronLeft","getBookmarksBaseUrl","addBookmarkLabel","hasBookmarkLabel","BookmarkButton","isBookmarked","isProcessing","bookmarkState","toggleBookmark","bookmarkedUpdateState","usageId","deleteBookmark","removeBookmark","usage_id","createBookmark","addBookmark","StatefulButton","disabledStates","labels","default","defaultProcessing","bookmarkedProcessing","icons","BookmarkOutlineIcon","stateKeys","StrictDict","accessToken","blockAccess","modelKeys","views","student","public","messageTypes","modal","resize","videoFullScreen","loadingState","setValue","showError","windowTopOffset","shouldDisplay","setShouldDisplay","useKeyedState","graded","IFRAME_FEATURE_POLICY","testIDs","contentIFrame","modalIFrame","ContentIFrame","iframeUrl","shouldShowContent","loadingMessage","elementId","onLoaded","handleIFrameLoad","useLoadBearingHook","setShowError","setWindowTopOffset","frame","getElementById","hash","postMessage","hashName","scrollTo","scrollY","offset","offsetTop","onmessage","event_name","hooks","modalOptions","handleModalClose","useModalIFrameBehavior","setIsOpen","setOptions","contentIFrameProps","allowFullScreen","ErrorPage","Modal","frameBorder","dialogClassName","HonorCode","authUser","honorCodeUrl","TERMS_OF_SERVICE_URL","Spacer","handleCancel","handleAgree","postIntegritySignature","saveIntegritySignature","LockPaywall","notificationTrayVisible","shouldDisplayBulletPointsBelowCertificate","large","shouldDisplayGatedContentOneColumn","extraLarge","shouldDisplayGatedContentTwoColumns","shouldDisplayGatedContentTwoColumnsHalf","shouldWrapTextOnButton","extraSmall","Locked","float","whiteSpace","UnitSuspense","useIntl","shouldDisplayHonorCode","unit","shouldDisplayContentGating","containsContentTypeGatedContent","suspenseComponent","iframeParams","show_title","show_bookmark","recheck_access","Unit","examAccess","setAccessToken","setBlockAccess","isExam","fetchExamAccess","getExamAccess","useExamAccess","useShouldDisplayHonorCode","view","exam_access","getIFrameUrl","ContentLock","SequenceContent","unitLoadedHandler","sequenceTitle","prereqSectionName","prereqId","Sequence","unitNavigationHandler","nextSequenceHandler","previousSequenceHandler","handleNext","newUnitId","handleNavigate","handlePrevious","destinationUnitId","logEvent","widgetPlacement","targetUnitId","current_tab","tab_count","widget_placement","targetIndex","target_tab","bannerText","useSequenceBannerTextAlert","entranceExamCurrentScore","entranceExamEnabled","entranceExamId","entranceExamMinimumScorePct","entranceExamPassed","entranceExamAlertVisible","entranceExamText","useSequenceEntranceExamAlert","unitHasLoaded","setUnitHasLoaded","isHiddenAfterDue","defaultContent","handleUnitLoaded","SequenceExamWrapper","congrats","earned","forward","goalMet","keepItUp","share","postCelebrationComplete","CELEBRATION_LOCAL_STORAGE_KEY","CelebrationModal","first_section","firstSection","recordFirstSectionCelebration","StandardModal","isStacked","ClapsMobile","ClapsTablet","WeeklyGoalCelebrationModal","weekly_goal","recordWeeklyGoalCelebration","nTimes","Target","strongText","Chat","contentToolsEnabled","shouldDisplayChat","createPortal","Xpert","Calculator","equation","handleSubmit","stopPropagation","urlEncoded","changeEquation","Advanced","Visible","whenOpen","faTimesCircle","whenClosed","faCalculator","faEquals","readOnly","faQuestionCircle","maxHeight","overflow","tagName","expressions_link","SUPPORT_URL_CALCULATOR_MATH","scope","dir","exponentSyntax","notationSyntax","NotesVisibility","visible","put","visibilityUrl","faPencilAlt","ContentTools","sidebarIsOpen","learningAssistant","JumpNavMenuItem","currentSequence","currentUnit","isDefault","targetUrl","target_name","current_id","sequenceShape","CourseBreadcrumb","withSeparator","showRegularLink","ENABLE_JUMPNAV","setTarget","textOverflow","ModalPopup","positionRef","CourseBreadcrumbs","allSequencesInSections","fromEntries","links","chapters","sequentials","faHome","SidebarProvider","shouldDisplaySidebarOpen","query","initialSidebar","DISCUSSIONS","setCurrentSidebar","contextValue","Course","windowWidth","pageTitleBreadCrumbs","element","firstSectionCelebrationOpen","setFirstSectionCelebrationOpen","weeklyGoalCelebrationOpen","setWeeklyGoalCelebrationOpen","shouldDisplayTriggers","shouldDisplayNotificationTrayOpenOnLoad","celebrateFirstSection","celebrationIds","prevSequenceId","onTargetSequence","shouldCelebrate","shouldCelebrateOnSectionLoad","checkResumeRedirect","memoize","firstSequenceId","getResumeBlock","checkSectionUnitToUnitRedirect","checkSectionToSequenceRedirect","checkUnitToSequenceUnitRedirect","routeUnitId","parent","getSequenceForUnitDeprecated","parentId","checkSequenceToSequenceUnitRedirect","nextUnitId","activeUnitIndex","checkSequenceUnitMarkerToSequenceUnitRedirect","hasUnits","firstUnitId","lastUnitId","CoursewareContainer","_defineProperty","saveUnitPosition","saveSequencePosition","fetchSequence","checkBlockCompletion","handleNextSectionCelebration","routeCourseId","routeSequenceId","checkFetchCourse","checkFetchSequence","componentDidUpdate","sectionViaSequenceId","checkSaveSequencePosition","handleNextSequenceClick","handlePreviousSequenceClick","handleUnitNavigationClick","sectionShape","courseShape","previousSequence","currentCourseSelector","createSelector","coursesById","currentSequenceSelector","sequencesById","sectionsById","previousSequenceSelector","nextSequenceSelector","firstSequenceIdSelector","sectionViaSequenceIdSelector","getState","isComplete","usage_key","getBlockCompletion","initialActiveUnitIndex","postSequencePosition","item_id","blockType","items","banner_text","gated_content","isTimeLimited","is_time_limited","isProctored","is_proctored","is_hidden_after_due","save_position","show_completion","allowProctoringOptOut","allow_proctoring_opt_out","page_title","contains_content_type_gated_content","getSequenceMetadata","WrappedComponent","DECODE_ROUTES","ACCESS_DENIED","HOME","LIVE","DATES","DISCUSSION","PROGRESS","COURSE_END","COURSEWARE","REDIRECT_HOME","REDIRECT_SURVEY","REDIRECT_MODES","ROUTES","concat","decodeUrl","encodedUrl","decodedUrl","decodeURIComponent","DecodePageRoute","computedMatch","route","matchedRoute","useMatch","pattern","params","param","newUrl","PageWrap","RedirectPage","consentPath","queryString","CoursewareRedirectLandingPage","Routes","Route","dueNext","pastDue","unreleased","verifiedOnly","isPastDue","isUnreleased","getBadgeListAndColor","assignments","isToday","isInFuture","badgesInfo","shownForDay","bg","shownForItem","color","badges","shown","Badge","Day","last","itemBadges","showDueDateTime","textColor","extraInfo","OverlayTrigger","overlay","Tooltip","faInfoCircle","Timeline","groupedDates","foundNextDue","foundToday","dateInfo","parsedDate","compared","groupedDate","SuggestedScheduleHeader","UpgradeToCompleteAlert","DatesTab","contactSupport","errorHeader","goToDashboard","_circle","SvgUnsubscribe","cx","cy","r","transform","ResultPage","errorDescription","CONTACT_URL","UnsubscribeIcon","GoalUnsubscribe","setError","isLoading","setIsLoading","setData","showUserDropdown","CertificateStatus","verificationData","certCase","certAvailabilityDate","certEventName","gradeEventName","certIsDownloadable","track_variant","grade_variant","certificate_status_variant","donutLabel","completionBody","completeContentTooltip","courseCompletion","incompleteContentTooltip","lockedContentTooltip","percentComplete","percentIncomplete","percentLocked","CompleteDonutSegment","completePercentage","lockedPercentage","showCompletePopover","setShowCompletePopover","completeSegmentOffset","completeTooltipDegree","lockedSegmentOffset","onBlur","onFocus","Popover","y","strokeDasharray","strokeDashoffset","IncompleteDonutSegment","incompletePercentage","showIncompletePopover","setShowIncompletePopover","incompleteTooltipDegree","LockedDonutSegment","showLockedPopover","setShowLockedPopover","iconDegree","viewBox","transformOrigin","CompletionDonutChart","completeCount","incompleteCount","numTotalUnits","isLocaleRtl","CourseCompletion","backToContent","courseGradeBody","courseGradeBarAltText","courseGradeFooterGenericPassing","courseGradeFooterNonPassing","courseGradeFooterPassingWithGrade","courseGradePreviewHeaderLocked","courseGradePreviewHeaderLimited","courseGradePreviewHeaderAriaHidden","courseGradePreviewUnlockCertificateBody","courseGradePartialPreviewUnlockCertificateBody","courseGradePreviewUpgradeDeadlinePassedBody","courseGradePreviewUpgradeButton","courseGradeRangeTooltip","courseOutline","currentGradeLabel","detailedGrades","detailedGradesEmpty","footnotesTitle","grade","gradesAndCredit","gradeRangeTooltipAlt","gradeSummary","gradeSummaryLimitedAccessExplanation","gradeSummaryTooltipAlt","gradeSummaryTooltipBody","noAccessToAssignmentType","noAccessToSubsection","passingGradeLabel","problemScoreLabel","problemScoreToggleAltText","sectionGradeOverridden","score","weightedGradeSummary","GradeRangeTooltip","iconButtonClassName","passingGrade","showTooltip","setShowTooltip","orderedGradeRange","sort","trigger","range","previousGrade","InfoOutline","CourseGradeFooter","courseGrade","isPassing","letterGrade","hasLetterGrades","footerText","minGradeRangeCutoff","possibleMaxGradeRangeValues","maxGradeRangeCutoff","minGrade","maxGrade","CourseGradeHeader","previewText","logUpgradeButtonClick","CurrentGradeTooltip","tooltipClassName","currentGrade","currentGradeDirection","textAnchor","PassingGradeTooltip","passingGradeDirection","GradeBar","lockedTooltipClassName","adjustedRtlStyle","percentOffest","courseCredit","minimumGrade","requirementsHeader","upcoming","verificationFailed","verificationSubmitted","CreditInformation","creditCourseRequirements","eligibilityStatus","requirementStatus","requirements","creditLink","CREDIT_HELP_LINK_URL","requirement","WatchFilled","namespace","criteria","displayName","order","CourseGrade","applyLockedOverlay","ProblemScoreDrawer","problemScores","problemScore","possible","SubsectionTitleCell","blockKey","subsectionTitle","ArrowDropDown","ArrowDropUp","Blocked","logSubsectionClicked","assignment_block_key","override","system","DetailedGradesTable","subsectionScores","detailedGradesData","headerClassName","cellClassName","Table","DetailedGrades","hasSectionScores","overviewTab","overviewTabUrl","outlineLink","logOutlineLinkClick","GradeSummaryHeader","allOfSomeAssignmentTypeIsLocked","AssignmentTypeCell","footnoteMarker","footnoteId","locked","lockedIcon","DroppableAssignmentFootnote","footnotes","GradeSummaryTableFooter","bgColor","totalGrade","TableFooter","GradeSummaryTable","setAllOfSomeAssignmentTypeIsLocked","gradeSummaryData","getFootnoteId","subsectionAssignmentsOfType","flat","hasNoAccessToAssignmentsOfType","getCell","Cell","getAssignmentTypeCell","GradeSummary","progressHeader","progressHeaderForTargetUser","studioLink","ProgressHeader","userId","studioUrl","pageTitle","datesCardDescription","datesCardLink","outlineCardDescription","outlineCardLink","relatedLinks","RelatedLinks","logLinkClicked","link_clicked","datesTabUrl","ProgressTab","NoticesProvider","isRedirected","setIsRedirected","ENABLE_NOTICES","getNotices","results","getData","PathFixesProvider","newLocation","replaceAll","new_path","old_path","referrer","LiveTab","liveModel","live","dangerouslySetInnerHTML","__html","ActiveEnterpriseAlert","CourseAccessErrorPage","activeEnterpriseAlert","userMessage","clientActiveEnterpriseAlert","useActiveEnterpriseAlert","subscribe","APP_READY","ReactDOM","AppProvider","store","configureStore","modelsReducer","coursewareReducer","courseHomeReducer","learningAssistantReducer","recommendationsReducer","toursReducer","FAVICON_URL","APP_INIT_ERROR","initialize","handlers","config","mergeConfig","ENTERPRISE_LEARNER_PORTAL_HOSTNAME","EXAMS_BASE_URL","PROCTORED_EXAM_FAQ_URL","PROCTORED_EXAM_RULES_URL","CHAT_RESPONSE_URL","PRIVACY_POLICY_URL"],"sourceRoot":""}