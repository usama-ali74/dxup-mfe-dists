{"version":3,"file":"35.641ca26ceed9fedb6abd.js","mappings":"+NAkCA,QAzBA,SAA+BA,EAAUC,EAAOC,GAC9C,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IACjC,SAAEC,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,IAoBhC,MAAO,CAAEC,oBAnBkBC,EAAAA,EAAAA,cAAY,KACrCN,GAAW,GCTRO,eAAoCX,GACzC,MAAMY,EAAO,IAAEC,EAAAA,EAAAA,aAAYC,6CACrB,KAAEC,SAAeC,EAAAA,EAAAA,MAA6BC,KAAKL,EAAK,CAAEM,eAAgB,CAAEC,UAAWnB,KAC7F,OAAOe,CACT,CDMIK,CAAqBpB,GAAUqB,MAAK,KAClCf,EAAS,CACPgB,aAAa,EACbC,OAAO,EACPC,KAAMtB,EACNuB,KAAMC,EAAAA,GAAYC,QAClBC,MAAO,WAETxB,GAAW,IACXyB,EAAAA,EAAAA,IAAe,qCAAsC,CACnDC,QAAS7B,EACT8B,cAAe/B,IAEjBgC,EAAAA,EAAOC,SAASC,QAAQ,GACxB,GACD,CAAC5B,EAAUN,EAAUC,EAAOC,IAEFC,UAC/B,C,mCE9BA,MA6BA,GA7BiBgC,E,SAAAA,IAAe,CAC9BC,MAAO,CACLC,GAAI,4BACJC,eAAgB,4DAChBC,YAAa,mKAEfC,WAAY,CACVH,GAAI,kCACJC,eAAgB,8DAChBC,YAAa,8KAEfE,gBAAiB,CACfJ,GAAI,uCACJC,eAAgB,aAChBC,YAAa,gMAGfG,kBAAmB,CACjBL,GAAI,yCACJC,eAAgB,cAChBC,YAAa,sFAEfI,QAAS,CACPN,GAAI,8BACJC,eAAgB,+CAChBC,YAAa,4E,mNCdjB,MAAMK,EAAkBC,IAAuB,IAAtB,KAAEC,EAAI,QAAEC,GAASF,EACxC,MAAM,UACJG,EAAS,SACThD,EAAQ,UACRiD,EAAS,QACTC,GACEH,GAEE,IACJI,IACEC,EAAAA,EAAAA,IAAS,iBAAkBpD,IAEzB,mBAAES,EAAkB,QAAEN,IAAYkD,EAAAA,EAAAA,GACtCrD,EACAmD,EACAL,EAAKQ,cAAcC,EAAAA,EAASZ,UAG9B,IAAInB,EAAOsB,EAAKQ,cAAcC,EAAAA,EAASnB,OACnCX,EAAO,UACP+B,EAAOC,EAAAA,EACPP,GACF1B,EAAOsB,EAAKQ,cAAcC,EAAAA,EAASf,YACnCf,EAAO,OACP+B,EAAOE,EAAAA,GACET,IACTzB,EAAQ,GAAEA,KAAQyB,KAGpB,MAAMU,EAASX,IACbY,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,SAAU3D,EAAS4D,QAAQ,OAAOC,UAAU,8BAA8BC,KAAK,KAAKC,MAAO,CAAEC,eAAgB,aAAeC,QAAS3D,EAAmB4D,SAC7JvB,EAAKQ,cAAcC,EAAAA,EAASb,qBAIjC,OACEkB,EAAAA,EAAAA,KAACU,EAAAA,EAAK,CAACP,QAAStC,EAAM+B,KAAMA,EAAKa,UAC/BE,EAAAA,EAAAA,MAAA,OAAKP,UAAU,SAAQK,SAAA,CACpB7C,EACAmC,EACAxD,IAAWyD,EAAAA,EAAAA,KAACY,EAAAA,EAAe,CAAChB,KAAMiB,EAAAA,GAAWC,MAAI,QAE9C,EAIZ9B,EAAgB+B,UAAY,CAC1B7B,KAAM8B,EAAAA,GAAUC,WAChB9B,QAAS+B,IAAAA,MAAgB,CACvB9B,UAAW8B,IAAAA,KACX9E,SAAU8E,IAAAA,OACV7B,UAAW6B,IAAAA,OACX5B,QAAS4B,IAAAA,OACRD,YAGL,SAAeE,EAAAA,EAAAA,GAAWnC,E,gBC3D1BoC,EAAQ,GAAa,CACnBC,OATW,MAUXC,SATa,UAUb1B,KAAM,CATI,IACC,IACG,GACF,OACI,ukBAalBwB,EAAQ,GAAYA,EAAQ,E","sources":["webpack://@edx/frontend-app-learning/./src/alerts/enrollment-alert/clickHook.js","webpack://@edx/frontend-app-learning/./src/alerts/enrollment-alert/data/api.js","webpack://@edx/frontend-app-learning/./src/alerts/enrollment-alert/messages.js","webpack://@edx/frontend-app-learning/./src/alerts/enrollment-alert/EnrollmentAlert.jsx","webpack://@edx/frontend-app-learning/./node_modules/@fortawesome/free-solid-svg-icons/faSpinner.js"],"sourcesContent":["import { useContext, useState, useCallback } from 'react';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\n\nimport { UserMessagesContext, ALERT_TYPES } from '../../generic/user-messages';\n\nimport { postCourseEnrollment } from './data/api';\n\n// Separated into its own file to avoid a circular dependency inside this directory\n\nfunction useEnrollClickHandler(courseId, orgId, successText) {\n  const [loading, setLoading] = useState(false);\n  const { addFlash } = useContext(UserMessagesContext);\n  const enrollClickHandler = useCallback(() => {\n    setLoading(true);\n    postCourseEnrollment(courseId).then(() => {\n      addFlash({\n        dismissible: true,\n        flash: true,\n        text: successText,\n        type: ALERT_TYPES.SUCCESS,\n        topic: 'course',\n      });\n      setLoading(false);\n      sendTrackEvent('edx.bi.user.course-home.enrollment', {\n        org_key: orgId,\n        courserun_key: courseId,\n      });\n      global.location.reload();\n    });\n  }, [addFlash, courseId, orgId, successText]);\n\n  return { enrollClickHandler, loading };\n}\n\nexport default useEnrollClickHandler;\n","/* eslint-disable import/prefer-default-export */\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { getConfig } from '@edx/frontend-platform';\n\nexport async function postCourseEnrollment(courseId) {\n  const url = `${getConfig().LMS_BASE_URL}/api/enrollment/v1/enrollment`;\n  const { data } = await getAuthenticatedHttpClient().post(url, { course_details: { course_id: courseId } });\n  return data;\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  alert: {\n    id: 'learning.enrollment.alert',\n    defaultMessage: 'You must be enrolled in the course to see course content.',\n    description: 'Message shown to indicate that a user needs to enroll in a course prior to viewing the course content.  Shown as part of an alert, along with a link to enroll.',\n  },\n  staffAlert: {\n    id: 'learning.staff.enrollment.alert',\n    defaultMessage: 'You are viewing this course as staff, and are not enrolled.',\n    description: 'Message shown to indicate that a user is not enrolled, but is able to view a course anyway because they are staff. Shown as part of an alert, along with a link to enroll.',\n  },\n  enrollNowInline: {\n    id: 'learning.enrollment.enrollNow.Inline',\n    defaultMessage: 'Enroll now',\n    description: 'A link prompting the user to click on it to enroll in the currently viewed course.'\n      + 'This text is meant to be used at the beginning of a sentence (example: Enroll now to view course content.)',\n  },\n  enrollNowSentence: {\n    id: 'learning.enrollment.enrollNow.Sentence',\n    defaultMessage: 'Enroll now.',\n    description: 'A link prompting the user to click on it to enroll in the currently viewed course.',\n  },\n  success: {\n    id: 'learning.enrollment.success',\n    defaultMessage: \"You've successfully enrolled in this course!\",\n    description: 'A message telling the user that their course enrollment was successful.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport { Alert, Button } from '@edx/paragon';\nimport { Info, WarningFilled } from '@edx/paragon/icons';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { useModel } from '../../generic/model-store';\n\nimport messages from './messages';\nimport useEnrollClickHandler from './clickHook';\n\nconst EnrollmentAlert = ({ intl, payload }) => {\n  const {\n    canEnroll,\n    courseId,\n    extraText,\n    isStaff,\n  } = payload;\n\n  const {\n    org,\n  } = useModel('courseHomeMeta', courseId);\n\n  const { enrollClickHandler, loading } = useEnrollClickHandler(\n    courseId,\n    org,\n    intl.formatMessage(messages.success),\n  );\n\n  let text = intl.formatMessage(messages.alert);\n  let type = 'warning';\n  let icon = WarningFilled;\n  if (isStaff) {\n    text = intl.formatMessage(messages.staffAlert);\n    type = 'info';\n    icon = Info;\n  } else if (extraText) {\n    text = `${text} ${extraText}`;\n  }\n\n  const button = canEnroll && (\n    <Button disabled={loading} variant=\"link\" className=\"p-0 border-0 align-top mx-1\" size=\"sm\" style={{ textDecoration: 'underline' }} onClick={enrollClickHandler}>\n      {intl.formatMessage(messages.enrollNowSentence)}\n    </Button>\n  );\n\n  return (\n    <Alert variant={type} icon={icon}>\n      <div className=\"d-flex\">\n        {text}\n        {button}\n        {loading && <FontAwesomeIcon icon={faSpinner} spin />}\n      </div>\n    </Alert>\n  );\n};\n\nEnrollmentAlert.propTypes = {\n  intl: intlShape.isRequired,\n  payload: PropTypes.shape({\n    canEnroll: PropTypes.bool,\n    courseId: PropTypes.string,\n    extraText: PropTypes.string,\n    isStaff: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default injectIntl(EnrollmentAlert);\n","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nvar prefix = 'fas';\nvar iconName = 'spinner';\nvar width = 512;\nvar height = 512;\nvar ligatures = [];\nvar unicode = 'f110';\nvar svgPathData = 'M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z';\n\nexports.definition = {\n  prefix: prefix,\n  iconName: iconName,\n  icon: [\n    width,\n    height,\n    ligatures,\n    unicode,\n    svgPathData\n  ]};\n\nexports.faSpinner = exports.definition;\nexports.prefix = prefix;\nexports.iconName = iconName;\nexports.width = width;\nexports.height = height;\nexports.ligatures = ligatures;\nexports.unicode = unicode;\nexports.svgPathData = svgPathData;"],"names":["courseId","orgId","successText","loading","setLoading","useState","addFlash","useContext","UserMessagesContext","enrollClickHandler","useCallback","async","url","getConfig","LMS_BASE_URL","data","getAuthenticatedHttpClient","post","course_details","course_id","postCourseEnrollment","then","dismissible","flash","text","type","ALERT_TYPES","SUCCESS","topic","sendTrackEvent","org_key","courserun_key","global","location","reload","defineMessages","alert","id","defaultMessage","description","staffAlert","enrollNowInline","enrollNowSentence","success","EnrollmentAlert","_ref","intl","payload","canEnroll","extraText","isStaff","org","useModel","useEnrollClickHandler","formatMessage","messages","icon","WarningFilled","Info","button","_jsx","Button","disabled","variant","className","size","style","textDecoration","onClick","children","Alert","_jsxs","FontAwesomeIcon","faSpinner","spin","propTypes","intlShape","isRequired","PropTypes","injectIntl","exports","prefix","iconName"],"sourceRoot":""}