{"version":3,"file":"700.64afd298c9099851b95b.js","mappings":"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","sources":["webpack://@edx/frontend-app-learning/./src/alerts/enrollment-alert/clickHook.js","webpack://@edx/frontend-app-learning/./src/alerts/enrollment-alert/data/api.js","webpack://@edx/frontend-app-learning/./src/alerts/enrollment-alert/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/alerts/private-course-alert/messages.js","webpack://@edx/frontend-app-learning/./src/course-home/outline-tab/alerts/private-course-alert/PrivateCourseAlert.jsx","webpack://@edx/frontend-app-learning/./node_modules/@fortawesome/free-solid-svg-icons/faSpinner.js"],"sourcesContent":["import { useContext, useState, useCallback } from 'react';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\n\nimport { UserMessagesContext, ALERT_TYPES } from '../../generic/user-messages';\n\nimport { postCourseEnrollment } from './data/api';\n\n// Separated into its own file to avoid a circular dependency inside this directory\n\nfunction useEnrollClickHandler(courseId, orgId, successText) {\n  const [loading, setLoading] = useState(false);\n  const { addFlash } = useContext(UserMessagesContext);\n  const enrollClickHandler = useCallback(() => {\n    setLoading(true);\n    postCourseEnrollment(courseId).then(() => {\n      addFlash({\n        dismissible: true,\n        flash: true,\n        text: successText,\n        type: ALERT_TYPES.SUCCESS,\n        topic: 'course',\n      });\n      setLoading(false);\n      sendTrackEvent('edx.bi.user.course-home.enrollment', {\n        org_key: orgId,\n        courserun_key: courseId,\n      });\n      global.location.reload();\n    });\n  }, [addFlash, courseId, orgId, successText]);\n\n  return { enrollClickHandler, loading };\n}\n\nexport default useEnrollClickHandler;\n","/* eslint-disable import/prefer-default-export */\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { getConfig } from '@edx/frontend-platform';\n\nexport async function postCourseEnrollment(courseId) {\n  const url = `${getConfig().LMS_BASE_URL}/api/enrollment/v1/enrollment`;\n  const { data } = await getAuthenticatedHttpClient().post(url, { course_details: { course_id: courseId } });\n  return data;\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  alert: {\n    id: 'learning.enrollment.alert',\n    defaultMessage: 'You must be enrolled in the course to see course content.',\n    description: 'Message shown to indicate that a user needs to enroll in a course prior to viewing the course content.  Shown as part of an alert, along with a link to enroll.',\n  },\n  staffAlert: {\n    id: 'learning.staff.enrollment.alert',\n    defaultMessage: 'You are viewing this course as staff, and are not enrolled.',\n    description: 'Message shown to indicate that a user is not enrolled, but is able to view a course anyway because they are staff. Shown as part of an alert, along with a link to enroll.',\n  },\n  enrollNowInline: {\n    id: 'learning.enrollment.enrollNow.Inline',\n    defaultMessage: 'Enroll now',\n    description: 'A link prompting the user to click on it to enroll in the currently viewed course.'\n      + 'This text is meant to be used at the beginning of a sentence (example: Enroll now to view course content.)',\n  },\n  enrollNowSentence: {\n    id: 'learning.enrollment.enrollNow.Sentence',\n    defaultMessage: 'Enroll now.',\n    description: 'A link prompting the user to click on it to enroll in the currently viewed course.',\n  },\n  success: {\n    id: 'learning.enrollment.success',\n    defaultMessage: \"You've successfully enrolled in this course!\",\n    description: 'A message telling the user that their course enrollment was successful.',\n  },\n});\n\nexport default messages;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  toAccess: {\n    id: 'alert.enroll',\n    defaultMessage: ' to access the full course.',\n    description: 'Text instructing the learner to enroll in the course in order to see course content. The full string'\n      + 'would say \"Enroll now to access the full course\", where \"Enroll now\" is a button.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getConfig } from '@edx/frontend-platform';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { getLoginRedirectUrl } from '@edx/frontend-platform/auth';\nimport { Alert, Button, Hyperlink } from '@edx/paragon';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\n\nimport enrollmentMessages from '../../../../alerts/enrollment-alert/messages';\nimport genericMessages from '../../../../generic/messages';\nimport messages from './messages';\nimport outlineMessages from '../../messages';\nimport useEnrollClickHandler from '../../../../alerts/enrollment-alert/clickHook';\nimport { useModel } from '../../../../generic/model-store';\n\nconst PrivateCourseAlert = ({ intl, payload }) => {\n  const {\n    anonymousUser,\n    canEnroll,\n    courseId,\n  } = payload;\n\n  const {\n    org,\n    title,\n  } = useModel('courseHomeMeta', courseId);\n\n  const { enrollClickHandler, loading } = useEnrollClickHandler(\n    courseId,\n    org,\n    intl.formatMessage(enrollmentMessages.success),\n  );\n\n  const enrollNowButton = (\n    <Button\n      disabled={loading}\n      variant=\"link\"\n      className=\"p-0 border-0 align-top mr-1\"\n      style={{ textDecoration: 'underline' }}\n      size=\"sm\"\n      onClick={enrollClickHandler}\n    >\n      {intl.formatMessage(enrollmentMessages.enrollNowInline)}\n    </Button>\n  );\n\n  const register = (\n    <Hyperlink\n      style={{ textDecoration: 'underline' }}\n      destination={`${getConfig().LMS_BASE_URL}/register?next=${encodeURIComponent(global.location.href)}`}\n    >\n      {intl.formatMessage(genericMessages.registerLowercase)}\n    </Hyperlink>\n  );\n\n  const signIn = (\n    <Hyperlink\n      style={{ textDecoration: 'underline' }}\n      destination={`${getLoginRedirectUrl(global.location.href)}`}\n    >\n      {intl.formatMessage(genericMessages.signInSentenceCase)}\n    </Hyperlink>\n  );\n\n  return (\n    <Alert variant=\"light\" data-testid=\"private-course-alert\">\n      {anonymousUser && (\n        <>\n          <p className=\"font-weight-bold\">\n            {intl.formatMessage(enrollmentMessages.alert)}\n          </p>\n          <FormattedMessage\n            id=\"learning.privateCourse.signInOrRegister\"\n            description=\"Prompts the user to sign in or register to see course content.\"\n            defaultMessage=\"{signIn} or {register} and then enroll in this course.\"\n            values={{\n              signIn,\n              register,\n            }}\n          />\n        </>\n      )}\n      {!anonymousUser && (\n        <>\n          <p className=\"font-weight-bold\">{intl.formatMessage(outlineMessages.welcomeTo)} {title}</p>\n          {canEnroll && (\n            <div className=\"d-flex\">\n              {enrollNowButton}\n              {intl.formatMessage(messages.toAccess)}\n              {loading && <FontAwesomeIcon icon={faSpinner} spin />}\n            </div>\n          )}\n          {!canEnroll && (\n            <>\n              {intl.formatMessage(enrollmentMessages.alert)}\n            </>\n          )}\n        </>\n      )}\n    </Alert>\n  );\n};\n\nPrivateCourseAlert.propTypes = {\n  intl: intlShape.isRequired,\n  payload: PropTypes.shape({\n    anonymousUser: PropTypes.bool,\n    canEnroll: PropTypes.bool,\n    courseId: PropTypes.string,\n  }).isRequired,\n};\n\nexport default injectIntl(PrivateCourseAlert);\n","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nvar prefix = 'fas';\nvar iconName = 'spinner';\nvar width = 512;\nvar height = 512;\nvar ligatures = [];\nvar unicode = 'f110';\nvar svgPathData = 'M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z';\n\nexports.definition = {\n  prefix: prefix,\n  iconName: iconName,\n  icon: [\n    width,\n    height,\n    ligatures,\n    unicode,\n    svgPathData\n  ]};\n\nexports.faSpinner = exports.definition;\nexports.prefix = prefix;\nexports.iconName = iconName;\nexports.width = width;\nexports.height = height;\nexports.ligatures = ligatures;\nexports.unicode = unicode;\nexports.svgPathData = svgPathData;"],"names":["courseId","orgId","successText","loading","setLoading","useState","addFlash","useContext","UserMessagesContext","enrollClickHandler","useCallback","async","url","getConfig","LMS_BASE_URL","data","getAuthenticatedHttpClient","post","course_details","course_id","postCourseEnrollment","then","dismissible","flash","text","type","ALERT_TYPES","SUCCESS","topic","sendTrackEvent","org_key","courserun_key","global","location","reload","defineMessages","alert","id","defaultMessage","description","staffAlert","enrollNowInline","enrollNowSentence","success","toAccess","PrivateCourseAlert","_ref","intl","payload","anonymousUser","canEnroll","org","title","useModel","useEnrollClickHandler","formatMessage","enrollmentMessages","enrollNowButton","_jsx","Button","disabled","variant","className","style","textDecoration","size","onClick","children","register","Hyperlink","destination","encodeURIComponent","href","genericMessages","registerLowercase","signIn","getLoginRedirectUrl","signInSentenceCase","_jsxs","Alert","_Fragment","FormattedMessage","values","outlineMessages","welcomeTo","messages","FontAwesomeIcon","icon","faSpinner","spin","propTypes","intlShape","isRequired","PropTypes","injectIntl","exports","prefix","iconName"],"sourceRoot":""}